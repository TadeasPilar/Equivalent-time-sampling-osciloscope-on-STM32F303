
SamplingScope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a228  0800a228  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a228  0800a228  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a228  0800a228  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a228  0800a228  0001a228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a22c  0800a22c  0001a22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c0e0  200001f0  0800a420  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c2d0  0800a420  0002c2d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014257  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a88  00000000  00000000  00034477  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001238  00000000  00000000  00036f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e0  00000000  00000000  00038138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fc80  00000000  00000000  00039218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8bb  00000000  00000000  00058e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c237e  00000000  00000000  00068753  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012aad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a0  00000000  00000000  0012ab4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a008 	.word	0x0800a008

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800a008 	.word	0x0800a008

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
#endif
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 1000);
 8000288:	1d39      	adds	r1, r7, #4
 800028a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028e:	2201      	movs	r2, #1
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <__io_putchar+0x20>)
 8000292:	f007 fe69 	bl	8007f68 <HAL_UART_Transmit>
	return ch;
 8000296:	687b      	ldr	r3, [r7, #4]
}
 8000298:	4618      	mov	r0, r3
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	200063b0 	.word	0x200063b0

080002a4 <parseSerial>:

/*
 * Read data from serial buffer and parse them. No value check is being done here.
 */
void parseSerial() {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0

	//Make sure, that string array is empty
	for (int i = 0; i < 11; i++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
 80002ae:	e016      	b.n	80002de <parseSerial+0x3a>
		for (int j = 0; j < 6; j++) {
 80002b0:	2300      	movs	r3, #0
 80002b2:	613b      	str	r3, [r7, #16]
 80002b4:	e00d      	b.n	80002d2 <parseSerial+0x2e>
			settingsStringArray[i][j] = '\0';
 80002b6:	4961      	ldr	r1, [pc, #388]	; (800043c <parseSerial+0x198>)
 80002b8:	697a      	ldr	r2, [r7, #20]
 80002ba:	4613      	mov	r3, r2
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	4413      	add	r3, r2
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	18ca      	adds	r2, r1, r3
 80002c4:	693b      	ldr	r3, [r7, #16]
 80002c6:	4413      	add	r3, r2
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 6; j++) {
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	3301      	adds	r3, #1
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	2b05      	cmp	r3, #5
 80002d6:	ddee      	ble.n	80002b6 <parseSerial+0x12>
	for (int i = 0; i < 11; i++) {
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	3301      	adds	r3, #1
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	2b0a      	cmp	r3, #10
 80002e2:	dde5      	ble.n	80002b0 <parseSerial+0xc>
		}
	}

	//Parse rx buffer into array of string
	if (rx_buff[0] == ':') {
 80002e4:	4b56      	ldr	r3, [pc, #344]	; (8000440 <parseSerial+0x19c>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b3a      	cmp	r3, #58	; 0x3a
 80002ea:	f040 80a3 	bne.w	8000434 <parseSerial+0x190>
		int bufferPointer = 1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	60fb      	str	r3, [r7, #12]
		for (int settingsPointer = 0; settingsPointer < 11; settingsPointer++) {
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
 80002f6:	e036      	b.n	8000366 <parseSerial+0xc2>
			int i = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	607b      	str	r3, [r7, #4]
			while (rx_buff[bufferPointer] != '|' && rx_buff[bufferPointer] != ':' && bufferPointer < 50) {
 80002fc:	e014      	b.n	8000328 <parseSerial+0x84>
				settingsStringArray[settingsPointer][i] = rx_buff[bufferPointer];
 80002fe:	4a50      	ldr	r2, [pc, #320]	; (8000440 <parseSerial+0x19c>)
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	4413      	add	r3, r2
 8000304:	7818      	ldrb	r0, [r3, #0]
 8000306:	494d      	ldr	r1, [pc, #308]	; (800043c <parseSerial+0x198>)
 8000308:	68ba      	ldr	r2, [r7, #8]
 800030a:	4613      	mov	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	4413      	add	r3, r2
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	18ca      	adds	r2, r1, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4413      	add	r3, r2
 8000318:	4602      	mov	r2, r0
 800031a:	701a      	strb	r2, [r3, #0]
				i++;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3301      	adds	r3, #1
 8000320:	607b      	str	r3, [r7, #4]
				bufferPointer++;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	3301      	adds	r3, #1
 8000326:	60fb      	str	r3, [r7, #12]
			while (rx_buff[bufferPointer] != '|' && rx_buff[bufferPointer] != ':' && bufferPointer < 50) {
 8000328:	4a45      	ldr	r2, [pc, #276]	; (8000440 <parseSerial+0x19c>)
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	4413      	add	r3, r2
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b7c      	cmp	r3, #124	; 0x7c
 8000332:	d008      	beq.n	8000346 <parseSerial+0xa2>
 8000334:	4a42      	ldr	r2, [pc, #264]	; (8000440 <parseSerial+0x19c>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	4413      	add	r3, r2
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b3a      	cmp	r3, #58	; 0x3a
 800033e:	d002      	beq.n	8000346 <parseSerial+0xa2>
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	2b31      	cmp	r3, #49	; 0x31
 8000344:	dddb      	ble.n	80002fe <parseSerial+0x5a>
			}
			bufferPointer++;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3301      	adds	r3, #1
 800034a:	60fb      	str	r3, [r7, #12]
			settingsStringArray[settingsPointer][5] = 0;
 800034c:	493b      	ldr	r1, [pc, #236]	; (800043c <parseSerial+0x198>)
 800034e:	68ba      	ldr	r2, [r7, #8]
 8000350:	4613      	mov	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	4413      	add	r3, r2
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	440b      	add	r3, r1
 800035a:	3305      	adds	r3, #5
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
		for (int settingsPointer = 0; settingsPointer < 11; settingsPointer++) {
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	3301      	adds	r3, #1
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	2b0a      	cmp	r3, #10
 800036a:	ddc5      	ble.n	80002f8 <parseSerial+0x54>
		}

	//Parse numbers from array of strings into theirs respective variables
	samplingDivider = atoi(settingsStringArray[0]);
 800036c:	4833      	ldr	r0, [pc, #204]	; (800043c <parseSerial+0x198>)
 800036e:	f008 fe30 	bl	8008fd2 <atoi>
 8000372:	4603      	mov	r3, r0
 8000374:	b29a      	uxth	r2, r3
 8000376:	4b33      	ldr	r3, [pc, #204]	; (8000444 <parseSerial+0x1a0>)
 8000378:	801a      	strh	r2, [r3, #0]
	generatorDivider = atoi(settingsStringArray[1]);
 800037a:	4833      	ldr	r0, [pc, #204]	; (8000448 <parseSerial+0x1a4>)
 800037c:	f008 fe29 	bl	8008fd2 <atoi>
 8000380:	4603      	mov	r3, r0
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b31      	ldr	r3, [pc, #196]	; (800044c <parseSerial+0x1a8>)
 8000386:	801a      	strh	r2, [r3, #0]
	comparatorVoltage = atoi(settingsStringArray[2]);
 8000388:	4831      	ldr	r0, [pc, #196]	; (8000450 <parseSerial+0x1ac>)
 800038a:	f008 fe22 	bl	8008fd2 <atoi>
 800038e:	4603      	mov	r3, r0
 8000390:	b29a      	uxth	r2, r3
 8000392:	4b30      	ldr	r3, [pc, #192]	; (8000454 <parseSerial+0x1b0>)
 8000394:	801a      	strh	r2, [r3, #0]
	comparatorHysteresis = atoi(settingsStringArray[3]);
 8000396:	4830      	ldr	r0, [pc, #192]	; (8000458 <parseSerial+0x1b4>)
 8000398:	f008 fe1b 	bl	8008fd2 <atoi>
 800039c:	4603      	mov	r3, r0
 800039e:	b29a      	uxth	r2, r3
 80003a0:	4b2e      	ldr	r3, [pc, #184]	; (800045c <parseSerial+0x1b8>)
 80003a2:	801a      	strh	r2, [r3, #0]
	channel1On = atoi(settingsStringArray[4]);
 80003a4:	482e      	ldr	r0, [pc, #184]	; (8000460 <parseSerial+0x1bc>)
 80003a6:	f008 fe14 	bl	8008fd2 <atoi>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bf14      	ite	ne
 80003b0:	2301      	movne	r3, #1
 80003b2:	2300      	moveq	r3, #0
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	4b2b      	ldr	r3, [pc, #172]	; (8000464 <parseSerial+0x1c0>)
 80003b8:	701a      	strb	r2, [r3, #0]
	channel2On = atoi(settingsStringArray[5]);
 80003ba:	482b      	ldr	r0, [pc, #172]	; (8000468 <parseSerial+0x1c4>)
 80003bc:	f008 fe09 	bl	8008fd2 <atoi>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	bf14      	ite	ne
 80003c6:	2301      	movne	r3, #1
 80003c8:	2300      	moveq	r3, #0
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4b27      	ldr	r3, [pc, #156]	; (800046c <parseSerial+0x1c8>)
 80003ce:	701a      	strb	r2, [r3, #0]
	channel3On = atoi(settingsStringArray[6]);
 80003d0:	4827      	ldr	r0, [pc, #156]	; (8000470 <parseSerial+0x1cc>)
 80003d2:	f008 fdfe 	bl	8008fd2 <atoi>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	bf14      	ite	ne
 80003dc:	2301      	movne	r3, #1
 80003de:	2300      	moveq	r3, #0
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b24      	ldr	r3, [pc, #144]	; (8000474 <parseSerial+0x1d0>)
 80003e4:	701a      	strb	r2, [r3, #0]
	channel4On = atoi(settingsStringArray[7]);
 80003e6:	4824      	ldr	r0, [pc, #144]	; (8000478 <parseSerial+0x1d4>)
 80003e8:	f008 fdf3 	bl	8008fd2 <atoi>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	bf14      	ite	ne
 80003f2:	2301      	movne	r3, #1
 80003f4:	2300      	moveq	r3, #0
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <parseSerial+0x1d8>)
 80003fa:	701a      	strb	r2, [r3, #0]
	memDepth = atoi(settingsStringArray[8]);
 80003fc:	4820      	ldr	r0, [pc, #128]	; (8000480 <parseSerial+0x1dc>)
 80003fe:	f008 fde8 	bl	8008fd2 <atoi>
 8000402:	4603      	mov	r3, r0
 8000404:	b29a      	uxth	r2, r3
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <parseSerial+0x1e0>)
 8000408:	801a      	strh	r2, [r3, #0]
	bits = atoi(settingsStringArray[9]);
 800040a:	481f      	ldr	r0, [pc, #124]	; (8000488 <parseSerial+0x1e4>)
 800040c:	f008 fde1 	bl	8008fd2 <atoi>
 8000410:	4603      	mov	r3, r0
 8000412:	b2da      	uxtb	r2, r3
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <parseSerial+0x1e8>)
 8000416:	701a      	strb	r2, [r3, #0]
	channel4Vref = atoi(settingsStringArray[10]);
 8000418:	481d      	ldr	r0, [pc, #116]	; (8000490 <parseSerial+0x1ec>)
 800041a:	f008 fdda 	bl	8008fd2 <atoi>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	bf14      	ite	ne
 8000424:	2301      	movne	r3, #1
 8000426:	2300      	moveq	r3, #0
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <parseSerial+0x1f0>)
 800042c:	701a      	strb	r2, [r3, #0]
	settingsChanged = 1;
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <parseSerial+0x1f4>)
 8000430:	2201      	movs	r2, #1
 8000432:	601a      	str	r2, [r3, #0]

	}
}
 8000434:	bf00      	nop
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	200093a4 	.word	0x200093a4
 8000440:	20000340 	.word	0x20000340
 8000444:	20000004 	.word	0x20000004
 8000448:	200093aa 	.word	0x200093aa
 800044c:	20000006 	.word	0x20000006
 8000450:	200093b0 	.word	0x200093b0
 8000454:	20000008 	.word	0x20000008
 8000458:	200093b6 	.word	0x200093b6
 800045c:	2000000a 	.word	0x2000000a
 8000460:	200093bc 	.word	0x200093bc
 8000464:	2000000c 	.word	0x2000000c
 8000468:	200093c2 	.word	0x200093c2
 800046c:	2000021c 	.word	0x2000021c
 8000470:	200093c8 	.word	0x200093c8
 8000474:	2000021d 	.word	0x2000021d
 8000478:	200093ce 	.word	0x200093ce
 800047c:	2000021e 	.word	0x2000021e
 8000480:	200093d4 	.word	0x200093d4
 8000484:	2000000e 	.word	0x2000000e
 8000488:	200093da 	.word	0x200093da
 800048c:	20000010 	.word	0x20000010
 8000490:	200093e0 	.word	0x200093e0
 8000494:	2000021f 	.word	0x2000021f
 8000498:	20000214 	.word	0x20000214

0800049c <sendSerial>:


/*
 * Send all settings and data
 */
void sendSerial(){
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af02      	add	r7, sp, #8
	signalFreq = 0;
 80004a2:	4b73      	ldr	r3, [pc, #460]	; (8000670 <sendSerial+0x1d4>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FREQ_BUFFER_SIZE; i++) {
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e00f      	b.n	80004ce <sendSerial+0x32>
		signalFreq += frequency[i] * 1000;
 80004ae:	4a71      	ldr	r2, [pc, #452]	; (8000674 <sendSerial+0x1d8>)
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ba:	fb02 f203 	mul.w	r2, r2, r3
 80004be:	4b6c      	ldr	r3, [pc, #432]	; (8000670 <sendSerial+0x1d4>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4413      	add	r3, r2
 80004c4:	4a6a      	ldr	r2, [pc, #424]	; (8000670 <sendSerial+0x1d4>)
 80004c6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < FREQ_BUFFER_SIZE; i++) {
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	3301      	adds	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	2b09      	cmp	r3, #9
 80004d2:	ddec      	ble.n	80004ae <sendSerial+0x12>
	}
	signalFreq = signalFreq / FREQ_BUFFER_SIZE;
 80004d4:	4b66      	ldr	r3, [pc, #408]	; (8000670 <sendSerial+0x1d4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a67      	ldr	r2, [pc, #412]	; (8000678 <sendSerial+0x1dc>)
 80004da:	fba2 2303 	umull	r2, r3, r2, r3
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	4a63      	ldr	r2, [pc, #396]	; (8000670 <sendSerial+0x1d4>)
 80004e2:	6013      	str	r3, [r2, #0]

	printf(":%u|", __HAL_TIM_GET_AUTORELOAD(&htim1));
 80004e4:	4b65      	ldr	r3, [pc, #404]	; (800067c <sendSerial+0x1e0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ea:	4619      	mov	r1, r3
 80004ec:	4864      	ldr	r0, [pc, #400]	; (8000680 <sendSerial+0x1e4>)
 80004ee:	f008 fda7 	bl	8009040 <iprintf>
	if(generatorDivider){
 80004f2:	4b64      	ldr	r3, [pc, #400]	; (8000684 <sendSerial+0x1e8>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d008      	beq.n	800050c <sendSerial+0x70>
		printf("%u|", (uint16_t)__HAL_TIM_GET_AUTORELOAD(&htim8));
 80004fa:	4b63      	ldr	r3, [pc, #396]	; (8000688 <sendSerial+0x1ec>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000500:	b29b      	uxth	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	4861      	ldr	r0, [pc, #388]	; (800068c <sendSerial+0x1f0>)
 8000506:	f008 fd9b 	bl	8009040 <iprintf>
 800050a:	e002      	b.n	8000512 <sendSerial+0x76>
	}else{
		printf("0|");
 800050c:	4860      	ldr	r0, [pc, #384]	; (8000690 <sendSerial+0x1f4>)
 800050e:	f008 fd97 	bl	8009040 <iprintf>
	}
	printf("%u|", comparatorVoltage);
 8000512:	4b60      	ldr	r3, [pc, #384]	; (8000694 <sendSerial+0x1f8>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	485c      	ldr	r0, [pc, #368]	; (800068c <sendSerial+0x1f0>)
 800051a:	f008 fd91 	bl	8009040 <iprintf>
	printf("%u|", comparatorHysteresis);
 800051e:	4b5e      	ldr	r3, [pc, #376]	; (8000698 <sendSerial+0x1fc>)
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	4619      	mov	r1, r3
 8000524:	4859      	ldr	r0, [pc, #356]	; (800068c <sendSerial+0x1f0>)
 8000526:	f008 fd8b 	bl	8009040 <iprintf>
	printf("%i|%i|%i|%i|", channel1On, channel2On, channel3On, channel4On);
 800052a:	4b5c      	ldr	r3, [pc, #368]	; (800069c <sendSerial+0x200>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	4619      	mov	r1, r3
 8000530:	4b5b      	ldr	r3, [pc, #364]	; (80006a0 <sendSerial+0x204>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b5b      	ldr	r3, [pc, #364]	; (80006a4 <sendSerial+0x208>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	4b5a      	ldr	r3, [pc, #360]	; (80006a8 <sendSerial+0x20c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	4603      	mov	r3, r0
 8000544:	4859      	ldr	r0, [pc, #356]	; (80006ac <sendSerial+0x210>)
 8000546:	f008 fd7b 	bl	8009040 <iprintf>
	printf("%u|", memDepth);
 800054a:	4b59      	ldr	r3, [pc, #356]	; (80006b0 <sendSerial+0x214>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	4619      	mov	r1, r3
 8000550:	484e      	ldr	r0, [pc, #312]	; (800068c <sendSerial+0x1f0>)
 8000552:	f008 fd75 	bl	8009040 <iprintf>
	printf("%u|", bits);
 8000556:	4b57      	ldr	r3, [pc, #348]	; (80006b4 <sendSerial+0x218>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	4619      	mov	r1, r3
 800055c:	484b      	ldr	r0, [pc, #300]	; (800068c <sendSerial+0x1f0>)
 800055e:	f008 fd6f 	bl	8009040 <iprintf>
	printf("%i|", channel4Vref);
 8000562:	4b55      	ldr	r3, [pc, #340]	; (80006b8 <sendSerial+0x21c>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	4619      	mov	r1, r3
 8000568:	4854      	ldr	r0, [pc, #336]	; (80006bc <sendSerial+0x220>)
 800056a:	f008 fd69 	bl	8009040 <iprintf>
	printf("%u|", signalFreq);
 800056e:	4b40      	ldr	r3, [pc, #256]	; (8000670 <sendSerial+0x1d4>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	4845      	ldr	r0, [pc, #276]	; (800068c <sendSerial+0x1f0>)
 8000576:	f008 fd63 	bl	8009040 <iprintf>
	uint16_t vrefcal;
	vrefcal = *((uint16_t*)VREFCAL_ADRESS);
 800057a:	4b51      	ldr	r3, [pc, #324]	; (80006c0 <sendSerial+0x224>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	807b      	strh	r3, [r7, #2]
	printf("%u:", vrefcal);
 8000580:	887b      	ldrh	r3, [r7, #2]
 8000582:	4619      	mov	r1, r3
 8000584:	484f      	ldr	r0, [pc, #316]	; (80006c4 <sendSerial+0x228>)
 8000586:	f008 fd5b 	bl	8009040 <iprintf>


	if(channel1On){
 800058a:	4b44      	ldr	r3, [pc, #272]	; (800069c <sendSerial+0x200>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d016      	beq.n	80005c0 <sendSerial+0x124>
		for (int i = 0; i < memDepth*memMultiplier; i++) {
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	e009      	b.n	80005ac <sendSerial+0x110>
			printf("%c", (char)value_adc1[i]);
 8000598:	4a4b      	ldr	r2, [pc, #300]	; (80006c8 <sendSerial+0x22c>)
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f008 fd65 	bl	8009070 <putchar>
		for (int i = 0; i < memDepth*memMultiplier; i++) {
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	3301      	adds	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	4b40      	ldr	r3, [pc, #256]	; (80006b0 <sendSerial+0x214>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b46      	ldr	r3, [pc, #280]	; (80006cc <sendSerial+0x230>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	fb03 f302 	mul.w	r3, r3, r2
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	429a      	cmp	r2, r3
 80005be:	dbeb      	blt.n	8000598 <sendSerial+0xfc>
		}
	}
	if(channel2On){
 80005c0:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <sendSerial+0x204>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d016      	beq.n	80005f6 <sendSerial+0x15a>
		for (int i = 0; i < memDepth*memMultiplier; i++) {
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e009      	b.n	80005e2 <sendSerial+0x146>
			printf("%c", (char)value_adc2[i]);
 80005ce:	4a40      	ldr	r2, [pc, #256]	; (80006d0 <sendSerial+0x234>)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f008 fd4a 	bl	8009070 <putchar>
		for (int i = 0; i < memDepth*memMultiplier; i++) {
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <sendSerial+0x214>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b38      	ldr	r3, [pc, #224]	; (80006cc <sendSerial+0x230>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	fb03 f302 	mul.w	r3, r3, r2
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbeb      	blt.n	80005ce <sendSerial+0x132>
		}
	}
	if(channel3On){
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <sendSerial+0x208>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d016      	beq.n	800062c <sendSerial+0x190>
		for (int i = 0; i < memDepth*memMultiplier; i++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	e009      	b.n	8000618 <sendSerial+0x17c>
			printf("%c", (char)value_adc3[i]);
 8000604:	4a33      	ldr	r2, [pc, #204]	; (80006d4 <sendSerial+0x238>)
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f008 fd2f 	bl	8009070 <putchar>
		for (int i = 0; i < memDepth*memMultiplier; i++) {
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3301      	adds	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <sendSerial+0x214>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <sendSerial+0x230>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	fb03 f302 	mul.w	r3, r3, r2
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	429a      	cmp	r2, r3
 800062a:	dbeb      	blt.n	8000604 <sendSerial+0x168>
		}
	}
	if(channel4On){
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <sendSerial+0x20c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d016      	beq.n	8000662 <sendSerial+0x1c6>
		for (int i = 0; i < memDepth*memMultiplier; i++) {
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	e009      	b.n	800064e <sendSerial+0x1b2>
			printf("%c", (char)value_adc4[i]);
 800063a:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <sendSerial+0x23c>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f008 fd14 	bl	8009070 <putchar>
		for (int i = 0; i < memDepth*memMultiplier; i++) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3301      	adds	r3, #1
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <sendSerial+0x214>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <sendSerial+0x230>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	fb03 f302 	mul.w	r3, r3, r2
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	429a      	cmp	r2, r3
 8000660:	dbeb      	blt.n	800063a <sendSerial+0x19e>
		}
	}
	printf("!\n\r");
 8000662:	481e      	ldr	r0, [pc, #120]	; (80006dc <sendSerial+0x240>)
 8000664:	f008 fcec 	bl	8009040 <iprintf>

}
 8000668:	bf00      	nop
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000218 	.word	0x20000218
 8000674:	200002d8 	.word	0x200002d8
 8000678:	cccccccd 	.word	0xcccccccd
 800067c:	20006300 	.word	0x20006300
 8000680:	0800a020 	.word	0x0800a020
 8000684:	20000006 	.word	0x20000006
 8000688:	20000300 	.word	0x20000300
 800068c:	0800a028 	.word	0x0800a028
 8000690:	0800a02c 	.word	0x0800a02c
 8000694:	20000008 	.word	0x20000008
 8000698:	2000000a 	.word	0x2000000a
 800069c:	2000000c 	.word	0x2000000c
 80006a0:	2000021c 	.word	0x2000021c
 80006a4:	2000021d 	.word	0x2000021d
 80006a8:	2000021e 	.word	0x2000021e
 80006ac:	0800a030 	.word	0x0800a030
 80006b0:	2000000e 	.word	0x2000000e
 80006b4:	20000010 	.word	0x20000010
 80006b8:	2000021f 	.word	0x2000021f
 80006bc:	0800a040 	.word	0x0800a040
 80006c0:	1ffff7ba 	.word	0x1ffff7ba
 80006c4:	0800a044 	.word	0x0800a044
 80006c8:	20003420 	.word	0x20003420
 80006cc:	20000000 	.word	0x20000000
 80006d0:	200093e8 	.word	0x200093e8
 80006d4:	200003d8 	.word	0x200003d8
 80006d8:	200064c4 	.word	0x200064c4
 80006dc:	0800a048 	.word	0x0800a048

080006e0 <updateSettings>:
ADC_ChannelConfTypeDef ch4Config = {0};

/*
 * Updates parameters of peripherals
 */
void updateSettings(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, samplingDivider);	//Set divider of sampling timer
 80006e4:	4b23      	ldr	r3, [pc, #140]	; (8000774 <updateSettings+0x94>)
 80006e6:	881a      	ldrh	r2, [r3, #0]
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <updateSettings+0x98>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <updateSettings+0x94>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <updateSettings+0x98>)
 80006f6:	60da      	str	r2, [r3, #12]
	if(generatorDivider == 0){							//Stop generating signal if divider is 0
 80006f8:	4b20      	ldr	r3, [pc, #128]	; (800077c <updateSettings+0x9c>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d104      	bne.n	800070a <updateSettings+0x2a>
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8000700:	2104      	movs	r1, #4
 8000702:	481f      	ldr	r0, [pc, #124]	; (8000780 <updateSettings+0xa0>)
 8000704:	f005 fde6 	bl	80062d4 <HAL_TIM_PWM_Stop>
 8000708:	e014      	b.n	8000734 <updateSettings+0x54>
	}else{
		__HAL_TIM_SET_AUTORELOAD(&htim8, generatorDivider);		//Set divider of signal generator
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <updateSettings+0x9c>)
 800070c:	881a      	ldrh	r2, [r3, #0]
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <updateSettings+0xa0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <updateSettings+0x9c>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <updateSettings+0xa0>)
 800071c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, generatorDivider / 2);	//Set pulse width of signal generation
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <updateSettings+0x9c>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	085b      	lsrs	r3, r3, #1
 8000724:	b29a      	uxth	r2, r3
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <updateSettings+0xa0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);				//Starts signal generation
 800072c:	2104      	movs	r1, #4
 800072e:	4814      	ldr	r0, [pc, #80]	; (8000780 <updateSettings+0xa0>)
 8000730:	f005 fd70 	bl	8006214 <HAL_TIM_PWM_Start>
	}
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, comparatorVoltage);	//Sets comparator treshold voltage
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <updateSettings+0xa4>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	2200      	movs	r2, #0
 800073a:	2110      	movs	r1, #16
 800073c:	4812      	ldr	r0, [pc, #72]	; (8000788 <updateSettings+0xa8>)
 800073e:	f003 fbd2 	bl	8003ee6 <HAL_DAC_SetValue>



	if(!channel4Vref){								//Switch between external input and internal reference voltage on CH4
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <updateSettings+0xac>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	f083 0301 	eor.w	r3, r3, #1
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d003      	beq.n	8000758 <updateSettings+0x78>
		ch4Config.Channel = ADC_CHANNEL_3;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <updateSettings+0xb0>)
 8000752:	2203      	movs	r2, #3
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e002      	b.n	800075e <updateSettings+0x7e>
	}else{
		ch4Config.Channel = ADC_CHANNEL_VREFINT;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <updateSettings+0xb0>)
 800075a:	2212      	movs	r2, #18
 800075c:	601a      	str	r2, [r3, #0]
	}

	if (HAL_ADC_ConfigChannel(&hadc4, &ch4Config) != HAL_OK)	//Apply CH4 confguration
 800075e:	490c      	ldr	r1, [pc, #48]	; (8000790 <updateSettings+0xb0>)
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <updateSettings+0xb4>)
 8000762:	f002 fb73 	bl	8002e4c <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <updateSettings+0x90>
	{
	  Error_Handler();
 800076c:	f000 fefe 	bl	800156c <Error_Handler>
	}

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000004 	.word	0x20000004
 8000778:	20006300 	.word	0x20006300
 800077c:	20000006 	.word	0x20000006
 8000780:	20000300 	.word	0x20000300
 8000784:	20000008 	.word	0x20000008
 8000788:	20000374 	.word	0x20000374
 800078c:	2000021f 	.word	0x2000021f
 8000790:	20000220 	.word	0x20000220
 8000794:	20006430 	.word	0x20006430

08000798 <startSampling>:


/*
 * Starts sampling on channels that are turned on
 */
void startSampling(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	if(channel1On){
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <startSampling+0x80>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d009      	beq.n	80007b8 <startSampling+0x20>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &value_adc1, memDepth);
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <startSampling+0x84>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	491d      	ldr	r1, [pc, #116]	; (8000820 <startSampling+0x88>)
 80007ac:	481d      	ldr	r0, [pc, #116]	; (8000824 <startSampling+0x8c>)
 80007ae:	f001 fea1 	bl	80024f4 <HAL_ADC_Start_DMA>
		ch1Started = true;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <startSampling+0x90>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
	}
	if(channel2On){
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <startSampling+0x94>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d009      	beq.n	80007d4 <startSampling+0x3c>
		HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &value_adc2, memDepth);
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <startSampling+0x84>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	491a      	ldr	r1, [pc, #104]	; (8000830 <startSampling+0x98>)
 80007c8:	481a      	ldr	r0, [pc, #104]	; (8000834 <startSampling+0x9c>)
 80007ca:	f001 fe93 	bl	80024f4 <HAL_ADC_Start_DMA>
		ch2Started = true;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <startSampling+0xa0>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
	}
	if(channel3On){
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <startSampling+0xa4>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d009      	beq.n	80007f0 <startSampling+0x58>
		HAL_ADC_Start_DMA(&hadc3, (uint32_t*) &value_adc3, memDepth);
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <startSampling+0x84>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4917      	ldr	r1, [pc, #92]	; (8000840 <startSampling+0xa8>)
 80007e4:	4817      	ldr	r0, [pc, #92]	; (8000844 <startSampling+0xac>)
 80007e6:	f001 fe85 	bl	80024f4 <HAL_ADC_Start_DMA>
		ch3Started = true;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <startSampling+0xb0>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
	}
	if(channel4On){
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <startSampling+0xb4>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d009      	beq.n	800080c <startSampling+0x74>
		HAL_ADC_Start_DMA(&hadc4, (uint32_t*) &value_adc4, memDepth);
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <startSampling+0x84>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4914      	ldr	r1, [pc, #80]	; (8000850 <startSampling+0xb8>)
 8000800:	4814      	ldr	r0, [pc, #80]	; (8000854 <startSampling+0xbc>)
 8000802:	f001 fe77 	bl	80024f4 <HAL_ADC_Start_DMA>
		ch4Started = true;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <startSampling+0xc0>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
	}


	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);	//Starts the timer that is triggering ADCs
 800080c:	2108      	movs	r1, #8
 800080e:	4813      	ldr	r0, [pc, #76]	; (800085c <startSampling+0xc4>)
 8000810:	f005 fbfa 	bl	8006008 <HAL_TIM_OC_Start>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000000c 	.word	0x2000000c
 800081c:	2000000e 	.word	0x2000000e
 8000820:	20003420 	.word	0x20003420
 8000824:	2000333c 	.word	0x2000333c
 8000828:	20000238 	.word	0x20000238
 800082c:	2000021c 	.word	0x2000021c
 8000830:	200093e8 	.word	0x200093e8
 8000834:	20000388 	.word	0x20000388
 8000838:	20000239 	.word	0x20000239
 800083c:	2000021d 	.word	0x2000021d
 8000840:	200003d8 	.word	0x200003d8
 8000844:	2000338c 	.word	0x2000338c
 8000848:	2000023a 	.word	0x2000023a
 800084c:	2000021e 	.word	0x2000021e
 8000850:	200064c4 	.word	0x200064c4
 8000854:	20006430 	.word	0x20006430
 8000858:	2000023b 	.word	0x2000023b
 800085c:	20006300 	.word	0x20006300

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f001 fba6 	bl	8001fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f8e2 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f000 fe22 	bl	80014b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000870:	f000 fdd6 	bl	8001420 <MX_DMA_Init>
  MX_ADC1_Init();
 8000874:	f000 f948 	bl	8000b08 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000878:	f000 fda2 	bl	80013c0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800087c:	f000 fc7c 	bl	8001178 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000880:	f000 fb42 	bl	8000f08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000884:	f000 fbea 	bl	800105c <MX_TIM2_Init>
  MX_COMP2_Init();
 8000888:	f000 fae2 	bl	8000e50 <MX_COMP2_Init>
  MX_DAC1_Init();
 800088c:	f000 fb06 	bl	8000e9c <MX_DAC1_Init>
  MX_ADC2_Init();
 8000890:	f000 f9ac 	bl	8000bec <MX_ADC2_Init>
  MX_ADC3_Init();
 8000894:	f000 fa0a 	bl	8000cac <MX_ADC3_Init>
  MX_ADC4_Init();
 8000898:	f000 fa7a 	bl	8000d90 <MX_ADC4_Init>
  MX_TIM8_Init();
 800089c:	f000 fce4 	bl	8001268 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  	//Starting of peripherals
	HAL_TIM_Base_Start_IT(&htim3);
 80008a0:	484c      	ldr	r0, [pc, #304]	; (80009d4 <main+0x174>)
 80008a2:	f005 fb51 	bl	8005f48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 80008a6:	484c      	ldr	r0, [pc, #304]	; (80009d8 <main+0x178>)
 80008a8:	f005 fb24 	bl	8005ef4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1);
 80008ac:	484b      	ldr	r0, [pc, #300]	; (80009dc <main+0x17c>)
 80008ae:	f005 fb21 	bl	8005ef4 <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 80008b2:	2108      	movs	r1, #8
 80008b4:	4849      	ldr	r0, [pc, #292]	; (80009dc <main+0x17c>)
 80008b6:	f005 fba7 	bl	8006008 <HAL_TIM_OC_Start>
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &frequency, FREQ_BUFFER_SIZE);
 80008ba:	230a      	movs	r3, #10
 80008bc:	4a48      	ldr	r2, [pc, #288]	; (80009e0 <main+0x180>)
 80008be:	2100      	movs	r1, #0
 80008c0:	4845      	ldr	r0, [pc, #276]	; (80009d8 <main+0x178>)
 80008c2:	f005 fdb1 	bl	8006428 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008c6:	2100      	movs	r1, #0
 80008c8:	4842      	ldr	r0, [pc, #264]	; (80009d4 <main+0x174>)
 80008ca:	f005 fca3 	bl	8006214 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart2, rx_buff, 50);
 80008ce:	2232      	movs	r2, #50	; 0x32
 80008d0:	4944      	ldr	r1, [pc, #272]	; (80009e4 <main+0x184>)
 80008d2:	4845      	ldr	r0, [pc, #276]	; (80009e8 <main+0x188>)
 80008d4:	f007 fbdc 	bl	8008090 <HAL_UART_Receive_IT>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80008d8:	2110      	movs	r1, #16
 80008da:	4844      	ldr	r0, [pc, #272]	; (80009ec <main+0x18c>)
 80008dc:	f003 fb28 	bl	8003f30 <HAL_DAC_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &value_adc1, memDepth);
 80008e0:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <main+0x190>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4943      	ldr	r1, [pc, #268]	; (80009f4 <main+0x194>)
 80008e8:	4843      	ldr	r0, [pc, #268]	; (80009f8 <main+0x198>)
 80008ea:	f001 fe03 	bl	80024f4 <HAL_ADC_Start_DMA>
	HAL_COMP_Start(&hcomp2);
 80008ee:	4843      	ldr	r0, [pc, #268]	; (80009fc <main+0x19c>)
 80008f0:	f003 f8d6 	bl	8003aa0 <HAL_COMP_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80008f4:	2104      	movs	r1, #4
 80008f6:	4842      	ldr	r0, [pc, #264]	; (8000a00 <main+0x1a0>)
 80008f8:	f005 fc8c 	bl	8006214 <HAL_TIM_PWM_Start>

	ch4Config.Channel = ADC_CHANNEL_3;
 80008fc:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <main+0x1a4>)
 80008fe:	2203      	movs	r2, #3
 8000900:	601a      	str	r2, [r3, #0]
	ch4Config.Rank = ADC_REGULAR_RANK_1;
 8000902:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <main+0x1a4>)
 8000904:	2201      	movs	r2, #1
 8000906:	605a      	str	r2, [r3, #4]
	ch4Config.SingleDiff = ADC_SINGLE_ENDED;
 8000908:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <main+0x1a4>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
	ch4Config.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <main+0x1a4>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
	ch4Config.OffsetNumber = ADC_OFFSET_NONE;
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <main+0x1a4>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
	ch4Config.Offset = 0;
 800091a:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <main+0x1a4>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(10);		//Wait for everything to start. Probably not needed. Just in case.
 8000920:	200a      	movs	r0, #10
 8000922:	f001 fbad 	bl	8002080 <HAL_Delay>
	// HAL_ADC_Start(&hadc1);

	while (1) {
		if (!measure) {			//If measurement is finished(set by DMA transfer complete interrupt) stop measuring on all channels that were measuring.
 8000926:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <main+0x1a8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d136      	bne.n	800099c <main+0x13c>
			HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 800092e:	2108      	movs	r1, #8
 8000930:	482a      	ldr	r0, [pc, #168]	; (80009dc <main+0x17c>)
 8000932:	f005 fbc9 	bl	80060c8 <HAL_TIM_OC_Stop>

			if(ch1Started){
 8000936:	4b35      	ldr	r3, [pc, #212]	; (8000a0c <main+0x1ac>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d005      	beq.n	800094a <main+0xea>
				HAL_ADC_Stop_DMA(&hadc1);
 800093e:	482e      	ldr	r0, [pc, #184]	; (80009f8 <main+0x198>)
 8000940:	f001 fef4 	bl	800272c <HAL_ADC_Stop_DMA>
				ch1Started = false;
 8000944:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <main+0x1ac>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
			}
			if(ch2Started){
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <main+0x1b0>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d005      	beq.n	800095e <main+0xfe>
				HAL_ADC_Stop_DMA(&hadc2);
 8000952:	4830      	ldr	r0, [pc, #192]	; (8000a14 <main+0x1b4>)
 8000954:	f001 feea 	bl	800272c <HAL_ADC_Stop_DMA>
				ch2Started = false;
 8000958:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <main+0x1b0>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
			}
			if(ch3Started){
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <main+0x1b8>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d005      	beq.n	8000972 <main+0x112>
				HAL_ADC_Stop_DMA(&hadc3);
 8000966:	482d      	ldr	r0, [pc, #180]	; (8000a1c <main+0x1bc>)
 8000968:	f001 fee0 	bl	800272c <HAL_ADC_Stop_DMA>
				ch3Started = false;
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <main+0x1b8>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
			}
			if(ch4Started){
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <main+0x1c0>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d005      	beq.n	8000986 <main+0x126>
				HAL_ADC_Stop_DMA(&hadc4);
 800097a:	482a      	ldr	r0, [pc, #168]	; (8000a24 <main+0x1c4>)
 800097c:	f001 fed6 	bl	800272c <HAL_ADC_Stop_DMA>
				ch4Started = false;
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <main+0x1c0>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
			}


			sendSerial();
 8000986:	f7ff fd89 	bl	800049c <sendSerial>

			//HAL_Delay(1000);


			if(settingsChanged){
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <main+0x1c8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <main+0x136>
				updateSettings();
 8000992:	f7ff fea5 	bl	80006e0 <updateSettings>
			}
			measure = 1;	// Ready for next measurement
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <main+0x1a8>)
 8000998:	2201      	movs	r2, #1
 800099a:	601a      	str	r2, [r3, #0]
		}

		if (recieve && measure) { //If serial data received(set by Rx complete interrupt) and ready to measure
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <main+0x1cc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0c0      	beq.n	8000926 <main+0xc6>
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <main+0x1a8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0bc      	beq.n	8000926 <main+0xc6>

			HAL_Delay(50);
 80009ac:	2032      	movs	r0, #50	; 0x32
 80009ae:	f001 fb67 	bl	8002080 <HAL_Delay>
			recieve = 0;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <main+0x1cc>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
			HAL_UART_Abort_IT(&huart2);
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <main+0x188>)
 80009ba:	f007 fc0b 	bl	80081d4 <HAL_UART_Abort_IT>
			parseSerial();
 80009be:	f7ff fc71 	bl	80002a4 <parseSerial>
			HAL_UART_Receive_IT(&huart2, rx_buff, 50);
 80009c2:	2232      	movs	r2, #50	; 0x32
 80009c4:	4907      	ldr	r1, [pc, #28]	; (80009e4 <main+0x184>)
 80009c6:	4808      	ldr	r0, [pc, #32]	; (80009e8 <main+0x188>)
 80009c8:	f007 fb62 	bl	8008090 <HAL_UART_Receive_IT>

			startSampling();
 80009cc:	f7ff fee4 	bl	8000798 <startSampling>
		if (!measure) {			//If measurement is finished(set by DMA transfer complete interrupt) stop measuring on all channels that were measuring.
 80009d0:	e7a9      	b.n	8000926 <main+0xc6>
 80009d2:	bf00      	nop
 80009d4:	200032fc 	.word	0x200032fc
 80009d8:	20006370 	.word	0x20006370
 80009dc:	20006300 	.word	0x20006300
 80009e0:	200002d8 	.word	0x200002d8
 80009e4:	20000340 	.word	0x20000340
 80009e8:	200063b0 	.word	0x200063b0
 80009ec:	20000374 	.word	0x20000374
 80009f0:	2000000e 	.word	0x2000000e
 80009f4:	20003420 	.word	0x20003420
 80009f8:	2000333c 	.word	0x2000333c
 80009fc:	20006340 	.word	0x20006340
 8000a00:	20000300 	.word	0x20000300
 8000a04:	20000220 	.word	0x20000220
 8000a08:	2000020c 	.word	0x2000020c
 8000a0c:	20000238 	.word	0x20000238
 8000a10:	20000239 	.word	0x20000239
 8000a14:	20000388 	.word	0x20000388
 8000a18:	2000023a 	.word	0x2000023a
 8000a1c:	2000338c 	.word	0x2000338c
 8000a20:	2000023b 	.word	0x2000023b
 8000a24:	20006430 	.word	0x20006430
 8000a28:	20000214 	.word	0x20000214
 8000a2c:	20000210 	.word	0x20000210

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0a6      	sub	sp, #152	; 0x98
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a3a:	2228      	movs	r2, #40	; 0x28
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f008 faf6 	bl	8009030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2258      	movs	r2, #88	; 0x58
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f008 fae8 	bl	8009030 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a68:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 fe9a 	bl	80047c8 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 fd67 	bl	800156c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 fd9a 	bl	80055f4 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ac6:	f000 fd51 	bl	800156c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <SystemClock_Config+0xd4>)
 8000acc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8000ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_PLLCLK;
 8000ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000adc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 8000ade:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 ffb8 	bl	8005a60 <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000af6:	f000 fd39 	bl	800156c <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3798      	adds	r7, #152	; 0x98
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	00303002 	.word	0x00303002

08000b08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
 8000b28:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000b32:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b46:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b54:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b78:	2204      	movs	r2, #4
 8000b7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b88:	4817      	ldr	r0, [pc, #92]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000b8a:	f001 fab9 	bl	8002100 <HAL_ADC_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b94:	f000 fcea 	bl	800156c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4811      	ldr	r0, [pc, #68]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000ba4:	f002 fc3e 	bl	8003424 <HAL_ADCEx_MultiModeConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000bae:	f000 fcdd 	bl	800156c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_ADC1_Init+0xe0>)
 8000bd0:	f002 f93c 	bl	8002e4c <HAL_ADC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000bda:	f000 fcc7 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000333c 	.word	0x2000333c

08000bec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c04:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <MX_ADC2_Init+0xbc>)
 8000c06:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c0e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c12:	2210      	movs	r2, #16
 8000c14:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c5e:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c60:	f001 fa4e 	bl	8002100 <HAL_ADC_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000c6a:	f000 fc7f 	bl	800156c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c6e:	2305      	movs	r3, #5
 8000c70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_ADC2_Init+0xb8>)
 8000c8c:	f002 f8de 	bl	8002e4c <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000c96:	f000 fc69 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000388 	.word	0x20000388
 8000ca8:	50000100 	.word	0x50000100

08000cac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000cd0:	4a2e      	ldr	r2, [pc, #184]	; (8000d8c <MX_ADC3_Init+0xe0>)
 8000cd2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000cd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cda:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000cde:	2210      	movs	r2, #16
 8000ce0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d2a:	4817      	ldr	r0, [pc, #92]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000d2c:	f001 f9e8 	bl	8002100 <HAL_ADC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000d36:	f000 fc19 	bl	800156c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4810      	ldr	r0, [pc, #64]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000d46:	f002 fb6d 	bl	8003424 <HAL_ADCEx_MultiModeConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 8000d50:	f000 fc0c 	bl	800156c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_ADC3_Init+0xdc>)
 8000d72:	f002 f86b 	bl	8002e4c <HAL_ADC_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8000d7c:	f000 fbf6 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000338c 	.word	0x2000338c
 8000d8c:	50000400 	.word	0x50000400

08000d90 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config 
  */
  hadc4.Instance = ADC4;
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000da8:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <MX_ADC4_Init+0xbc>)
 8000daa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000dae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000db2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_8B;
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000db6:	2210      	movs	r2, #16
 8000db8:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000df2:	2204      	movs	r2, #4
 8000df4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000e04:	f001 f97c 	bl	8002100 <HAL_ADC_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC4_Init+0x82>
  {
    Error_Handler();
 8000e0e:	f000 fbad 	bl	800156c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e12:	2303      	movs	r3, #3
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <MX_ADC4_Init+0xb8>)
 8000e30:	f002 f80c 	bl	8002e4c <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC4_Init+0xae>
  {
    Error_Handler();
 8000e3a:	f000 fb97 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20006430 	.word	0x20006430
 8000e4c:	50000500 	.word	0x50000500

08000e50 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_COMP2_Init+0x44>)
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <MX_COMP2_Init+0x48>)
 8000e58:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_COMP2_Init+0x44>)
 8000e5c:	2250      	movs	r2, #80	; 0x50
 8000e5e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_COMP2_Init+0x44>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_COMP2_Init+0x44>)
 8000e68:	227f      	movs	r2, #127	; 0x7f
 8000e6a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_COMP2_Init+0x44>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_COMP2_Init+0x44>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_COMP2_Init+0x44>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_COMP2_Init+0x44>)
 8000e80:	f002 fd94 	bl	80039ac <HAL_COMP_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8000e8a:	f000 fb6f 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20006340 	.word	0x20006340
 8000e98:	40010020 	.word	0x40010020

08000e9c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_DAC1_Init+0x64>)
 8000eae:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <MX_DAC1_Init+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000eb2:	4813      	ldr	r0, [pc, #76]	; (8000f00 <MX_DAC1_Init+0x64>)
 8000eb4:	f002 fff5 	bl	8003ea2 <HAL_DAC_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000ebe:	f000 fb55 	bl	800156c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <MX_DAC1_Init+0x64>)
 8000ed2:	f003 f878 	bl	8003fc6 <HAL_DAC_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000edc:	f000 fb46 	bl	800156c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2210      	movs	r2, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <MX_DAC1_Init+0x64>)
 8000ee8:	f003 f86d 	bl	8003fc6 <HAL_DAC_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_DAC1_Init+0x5a>
  {
    Error_Handler();
 8000ef2:	f000 fb3b 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000374 	.word	0x20000374
 8000f04:	40007400 	.word	0x40007400

08000f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b09a      	sub	sp, #104	; 0x68
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
 8000f38:	615a      	str	r2, [r3, #20]
 8000f3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	222c      	movs	r2, #44	; 0x2c
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f008 f874 	bl	8009030 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f48:	4b42      	ldr	r3, [pc, #264]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000f4a:	4a43      	ldr	r2, [pc, #268]	; (8001058 <MX_TIM1_Init+0x150>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f4e:	4b41      	ldr	r3, [pc, #260]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f68:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f6e:	4b39      	ldr	r3, [pc, #228]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f74:	4837      	ldr	r0, [pc, #220]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000f76:	f004 ff91 	bl	8005e9c <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f80:	f000 faf4 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4830      	ldr	r0, [pc, #192]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000f92:	f005 fe97 	bl	8006cc4 <HAL_TIM_ConfigClockSource>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f9c:	f000 fae6 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000fa0:	482c      	ldr	r0, [pc, #176]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000fa2:	f004 fffb 	bl	8005f9c <HAL_TIM_OC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fac:	f000 fade 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000fb0:	2360      	movs	r3, #96	; 0x60
 8000fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fb8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fbe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4823      	ldr	r0, [pc, #140]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000fc6:	f006 fe51 	bl	8007c6c <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000fd0:	f000 facc 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fd4:	2330      	movs	r3, #48	; 0x30
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4816      	ldr	r0, [pc, #88]	; (8001054 <MX_TIM1_Init+0x14c>)
 8000ffa:	f005 fc31 	bl	8006860 <HAL_TIM_OC_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001004:	f000 fab2 	bl	800156c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800102a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_TIM1_Init+0x14c>)
 800103e:	f006 fea1 	bl	8007d84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001048:	f000 fa90 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3768      	adds	r7, #104	; 0x68
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20006300 	.word	0x20006300
 8001058:	40012c00 	.word	0x40012c00

0800105c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b090      	sub	sp, #64	; 0x40
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001098:	4b36      	ldr	r3, [pc, #216]	; (8001174 <MX_TIM2_Init+0x118>)
 800109a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a0:	4b34      	ldr	r3, [pc, #208]	; (8001174 <MX_TIM2_Init+0x118>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b33      	ldr	r3, [pc, #204]	; (8001174 <MX_TIM2_Init+0x118>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80010ac:	4b31      	ldr	r3, [pc, #196]	; (8001174 <MX_TIM2_Init+0x118>)
 80010ae:	f04f 32ff 	mov.w	r2, #4294967295
 80010b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <MX_TIM2_Init+0x118>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <MX_TIM2_Init+0x118>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c0:	482c      	ldr	r0, [pc, #176]	; (8001174 <MX_TIM2_Init+0x118>)
 80010c2:	f004 feeb 	bl	8005e9c <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80010cc:	f000 fa4e 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80010d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sClockSourceConfig.ClockFilter = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e6:	4619      	mov	r1, r3
 80010e8:	4822      	ldr	r0, [pc, #136]	; (8001174 <MX_TIM2_Init+0x118>)
 80010ea:	f005 fdeb 	bl	8006cc4 <HAL_TIM_ConfigClockSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80010f4:	f000 fa3a 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010f8:	481e      	ldr	r0, [pc, #120]	; (8001174 <MX_TIM2_Init+0x118>)
 80010fa:	f005 f95f 	bl	80063bc <HAL_TIM_IC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001104:	f000 fa32 	bl	800156c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 8001108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800110e:	2320      	movs	r3, #32
 8001110:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4816      	ldr	r0, [pc, #88]	; (8001174 <MX_TIM2_Init+0x118>)
 800111a:	f005 fe8c 	bl	8006e36 <HAL_TIM_SlaveConfigSynchro>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001124:	f000 fa22 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4619      	mov	r1, r3
 8001136:	480f      	ldr	r0, [pc, #60]	; (8001174 <MX_TIM2_Init+0x118>)
 8001138:	f006 fd98 	bl	8007c6c <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8001142:	f000 fa13 	bl	800156c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 800114a:	2303      	movs	r3, #3
 800114c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_TIM2_Init+0x118>)
 800115e:	f005 fbfd 	bl	800695c <HAL_TIM_IC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8001168:	f000 fa00 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3740      	adds	r7, #64	; 0x40
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20006370 	.word	0x20006370

08001178 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
 80011a6:	615a      	str	r2, [r3, #20]
 80011a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <MX_TIM3_Init+0xe8>)
 80011ac:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <MX_TIM3_Init+0xec>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_TIM3_Init+0xe8>)
 80011b2:	2247      	movs	r2, #71	; 0x47
 80011b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_TIM3_Init+0xe8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <MX_TIM3_Init+0xe8>)
 80011be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_TIM3_Init+0xe8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <MX_TIM3_Init+0xe8>)
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011d0:	4823      	ldr	r0, [pc, #140]	; (8001260 <MX_TIM3_Init+0xe8>)
 80011d2:	f004 fe63 	bl	8005e9c <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011dc:	f000 f9c6 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ea:	4619      	mov	r1, r3
 80011ec:	481c      	ldr	r0, [pc, #112]	; (8001260 <MX_TIM3_Init+0xe8>)
 80011ee:	f005 fd69 	bl	8006cc4 <HAL_TIM_ConfigClockSource>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011f8:	f000 f9b8 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011fc:	4818      	ldr	r0, [pc, #96]	; (8001260 <MX_TIM3_Init+0xe8>)
 80011fe:	f004 ffd3 	bl	80061a8 <HAL_TIM_PWM_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001208:	f000 f9b0 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800120c:	2340      	movs	r3, #64	; 0x40
 800120e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	4811      	ldr	r0, [pc, #68]	; (8001260 <MX_TIM3_Init+0xe8>)
 800121c:	f006 fd26 	bl	8007c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001226:	f000 f9a1 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800122e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001232:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	4807      	ldr	r0, [pc, #28]	; (8001260 <MX_TIM3_Init+0xe8>)
 8001244:	f005 fc26 	bl	8006a94 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800124e:	f000 f98d 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <MX_TIM3_Init+0xe8>)
 8001254:	f000 fcaa 	bl	8001bac <HAL_TIM_MspPostInit>

}
 8001258:	bf00      	nop
 800125a:	3738      	adds	r7, #56	; 0x38
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200032fc 	.word	0x200032fc
 8001264:	40000400 	.word	0x40000400

08001268 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b09a      	sub	sp, #104	; 0x68
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001288:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]
 800129a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	222c      	movs	r2, #44	; 0x2c
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f007 fec4 	bl	8009030 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012a8:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <MX_TIM8_Init+0x150>)
 80012aa:	4a44      	ldr	r2, [pc, #272]	; (80013bc <MX_TIM8_Init+0x154>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80012ae:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <MX_TIM8_Init+0x150>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <MX_TIM8_Init+0x150>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 71;
 80012ba:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <MX_TIM8_Init+0x150>)
 80012bc:	2247      	movs	r2, #71	; 0x47
 80012be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <MX_TIM8_Init+0x150>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012c6:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <MX_TIM8_Init+0x150>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <MX_TIM8_Init+0x150>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012d2:	4839      	ldr	r0, [pc, #228]	; (80013b8 <MX_TIM8_Init+0x150>)
 80012d4:	f004 fde2 	bl	8005e9c <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80012de:	f000 f945 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ec:	4619      	mov	r1, r3
 80012ee:	4832      	ldr	r0, [pc, #200]	; (80013b8 <MX_TIM8_Init+0x150>)
 80012f0:	f005 fce8 	bl	8006cc4 <HAL_TIM_ConfigClockSource>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80012fa:	f000 f937 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012fe:	482e      	ldr	r0, [pc, #184]	; (80013b8 <MX_TIM8_Init+0x150>)
 8001300:	f004 ff52 	bl	80061a8 <HAL_TIM_PWM_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800130a:	f000 f92f 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800131a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800131e:	4619      	mov	r1, r3
 8001320:	4825      	ldr	r0, [pc, #148]	; (80013b8 <MX_TIM8_Init+0x150>)
 8001322:	f006 fca3 	bl	8007c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 800132c:	f000 f91e 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001330:	2360      	movs	r3, #96	; 0x60
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 32;
 8001334:	2320      	movs	r3, #32
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800134c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001350:	2204      	movs	r2, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4818      	ldr	r0, [pc, #96]	; (80013b8 <MX_TIM8_Init+0x150>)
 8001356:	f005 fb9d 	bl	8006a94 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001360:	f000 f904 	bl	800156c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <MX_TIM8_Init+0x150>)
 800139a:	f006 fcf3 	bl	8007d84 <HAL_TIMEx_ConfigBreakDeadTime>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80013a4:	f000 f8e2 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <MX_TIM8_Init+0x150>)
 80013aa:	f000 fbff 	bl	8001bac <HAL_TIM_MspPostInit>

}
 80013ae:	bf00      	nop
 80013b0:	3768      	adds	r7, #104	; 0x68
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000300 	.word	0x20000300
 80013bc:	40013400 	.word	0x40013400

080013c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_USART2_UART_Init+0x58>)
 80013c6:	4a15      	ldr	r2, [pc, #84]	; (800141c <MX_USART2_UART_Init+0x5c>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_USART2_UART_Init+0x58>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USART2_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_USART2_UART_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USART2_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USART2_UART_Init+0x58>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USART2_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USART2_UART_Init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USART2_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USART2_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USART2_UART_Init+0x58>)
 8001404:	f006 fd62 	bl	8007ecc <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800140e:	f000 f8ad 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200063b0 	.word	0x200063b0
 800141c:	40004400 	.word	0x40004400

08001420 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <MX_DMA_Init+0x90>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <MX_DMA_Init+0x90>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6153      	str	r3, [r2, #20]
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_DMA_Init+0x90>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_DMA_Init+0x90>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <MX_DMA_Init+0x90>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6153      	str	r3, [r2, #20]
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_DMA_Init+0x90>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	200b      	movs	r0, #11
 800145c:	f002 fceb 	bl	8003e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001460:	200b      	movs	r0, #11
 8001462:	f002 fd04 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	200f      	movs	r0, #15
 800146c:	f002 fce3 	bl	8003e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001470:	200f      	movs	r0, #15
 8001472:	f002 fcfc 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	203a      	movs	r0, #58	; 0x3a
 800147c:	f002 fcdb 	bl	8003e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001480:	203a      	movs	r0, #58	; 0x3a
 8001482:	f002 fcf4 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	203b      	movs	r0, #59	; 0x3b
 800148c:	f002 fcd3 	bl	8003e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001490:	203b      	movs	r0, #59	; 0x3b
 8001492:	f002 fcec 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	203c      	movs	r0, #60	; 0x3c
 800149c:	f002 fccb 	bl	8003e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80014a0:	203c      	movs	r0, #60	; 0x3c
 80014a2:	f002 fce4 	bl	8003e6e <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_GPIO_Init+0x74>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <MX_GPIO_Init+0x74>)
 80014c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c4:	6153      	str	r3, [r2, #20]
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_GPIO_Init+0x74>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_GPIO_Init+0x74>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <MX_GPIO_Init+0x74>)
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	6153      	str	r3, [r2, #20]
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_GPIO_Init+0x74>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_GPIO_Init+0x74>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <MX_GPIO_Init+0x74>)
 80014f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014f4:	6153      	str	r3, [r2, #20]
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_GPIO_Init+0x74>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_GPIO_Init+0x74>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <MX_GPIO_Init+0x74>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6153      	str	r3, [r2, #20]
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_GPIO_Init+0x74>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	measure = 0;
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	2000020c 	.word	0x2000020c

0800154c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	recieve = 1;
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_UART_RxCpltCallback+0x1c>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000210 	.word	0x20000210

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_MspInit+0x44>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <HAL_MspInit+0x44>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <HAL_MspInit+0x44>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_MspInit+0x44>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_MspInit+0x44>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_MspInit+0x44>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000

080015c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b090      	sub	sp, #64	; 0x40
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e4:	d15d      	bne.n	80016a2 <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015e6:	4b90      	ldr	r3, [pc, #576]	; (8001828 <HAL_ADC_MspInit+0x264>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a8e      	ldr	r2, [pc, #568]	; (8001828 <HAL_ADC_MspInit+0x264>)
 80015ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015f0:	4b8d      	ldr	r3, [pc, #564]	; (8001828 <HAL_ADC_MspInit+0x264>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10b      	bne.n	8001610 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015f8:	4b8c      	ldr	r3, [pc, #560]	; (800182c <HAL_ADC_MspInit+0x268>)
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	4a8b      	ldr	r2, [pc, #556]	; (800182c <HAL_ADC_MspInit+0x268>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6153      	str	r3, [r2, #20]
 8001604:	4b89      	ldr	r3, [pc, #548]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	4b86      	ldr	r3, [pc, #536]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4a85      	ldr	r2, [pc, #532]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161a:	6153      	str	r3, [r2, #20]
 800161c:	4b83      	ldr	r3, [pc, #524]	; (800182c <HAL_ADC_MspInit+0x268>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001628:	2301      	movs	r3, #1
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162c:	2303      	movs	r3, #3
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f002 ff39 	bl	80044b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001642:	4b7b      	ldr	r3, [pc, #492]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 8001644:	4a7b      	ldr	r2, [pc, #492]	; (8001834 <HAL_ADC_MspInit+0x270>)
 8001646:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001648:	4b79      	ldr	r3, [pc, #484]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800164e:	4b78      	ldr	r3, [pc, #480]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001654:	4b76      	ldr	r3, [pc, #472]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165a:	4b75      	ldr	r3, [pc, #468]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001660:	4b73      	ldr	r3, [pc, #460]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001666:	4b72      	ldr	r3, [pc, #456]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 8001668:	2220      	movs	r2, #32
 800166a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800166c:	4b70      	ldr	r3, [pc, #448]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 800166e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001672:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001674:	486e      	ldr	r0, [pc, #440]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 8001676:	f002 fcf3 	bl	8004060 <HAL_DMA_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001680:	f7ff ff74 	bl	800156c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a6a      	ldr	r2, [pc, #424]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
 800168a:	4a69      	ldr	r2, [pc, #420]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	2012      	movs	r0, #18
 8001696:	f002 fbce 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800169a:	2012      	movs	r0, #18
 800169c:	f002 fbe7 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80016a0:	e13d      	b.n	800191e <HAL_ADC_MspInit+0x35a>
  else if(hadc->Instance==ADC2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a64      	ldr	r2, [pc, #400]	; (8001838 <HAL_ADC_MspInit+0x274>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d162      	bne.n	8001772 <HAL_ADC_MspInit+0x1ae>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016ac:	4b5e      	ldr	r3, [pc, #376]	; (8001828 <HAL_ADC_MspInit+0x264>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a5d      	ldr	r2, [pc, #372]	; (8001828 <HAL_ADC_MspInit+0x264>)
 80016b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016b6:	4b5c      	ldr	r3, [pc, #368]	; (8001828 <HAL_ADC_MspInit+0x264>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10b      	bne.n	80016d6 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016be:	4b5b      	ldr	r3, [pc, #364]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	4a5a      	ldr	r2, [pc, #360]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	4b58      	ldr	r3, [pc, #352]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	623b      	str	r3, [r7, #32]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	4b55      	ldr	r3, [pc, #340]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	4a54      	ldr	r2, [pc, #336]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016e0:	6153      	str	r3, [r2, #20]
 80016e2:	4b52      	ldr	r3, [pc, #328]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016ee:	2310      	movs	r3, #16
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f2:	2303      	movs	r3, #3
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fe:	4619      	mov	r1, r3
 8001700:	484e      	ldr	r0, [pc, #312]	; (800183c <HAL_ADC_MspInit+0x278>)
 8001702:	f002 fed7 	bl	80044b4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel3;
 8001706:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 8001708:	4a4e      	ldr	r2, [pc, #312]	; (8001844 <HAL_ADC_MspInit+0x280>)
 800170a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170c:	4b4c      	ldr	r3, [pc, #304]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001712:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001718:	4b49      	ldr	r3, [pc, #292]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171e:	4b48      	ldr	r3, [pc, #288]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001724:	4b46      	ldr	r3, [pc, #280]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800172a:	4b45      	ldr	r3, [pc, #276]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 800172c:	2220      	movs	r2, #32
 800172e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 8001732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001736:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001738:	4841      	ldr	r0, [pc, #260]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 800173a:	f002 fc91 	bl	8004060 <HAL_DMA_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8001744:	f7ff ff12 	bl	800156c <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_ADC24_DMA2_CH34);
 8001748:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <HAL_ADC_MspInit+0x284>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a3e      	ldr	r2, [pc, #248]	; (8001848 <HAL_ADC_MspInit+0x284>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a3a      	ldr	r2, [pc, #232]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 8001758:	639a      	str	r2, [r3, #56]	; 0x38
 800175a:	4a39      	ldr	r2, [pc, #228]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2012      	movs	r0, #18
 8001766:	f002 fb66 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800176a:	2012      	movs	r0, #18
 800176c:	f002 fb7f 	bl	8003e6e <HAL_NVIC_EnableIRQ>
}
 8001770:	e0d5      	b.n	800191e <HAL_ADC_MspInit+0x35a>
  else if(hadc->Instance==ADC3)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a35      	ldr	r2, [pc, #212]	; (800184c <HAL_ADC_MspInit+0x288>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d171      	bne.n	8001860 <HAL_ADC_MspInit+0x29c>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_ADC_MspInit+0x28c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	4a33      	ldr	r2, [pc, #204]	; (8001850 <HAL_ADC_MspInit+0x28c>)
 8001784:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <HAL_ADC_MspInit+0x28c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d10b      	bne.n	80017a6 <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a26      	ldr	r2, [pc, #152]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001794:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_ADC_MspInit+0x268>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_ADC_MspInit+0x268>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a20      	ldr	r2, [pc, #128]	; (800182c <HAL_ADC_MspInit+0x268>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_ADC_MspInit+0x268>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017be:	2302      	movs	r3, #2
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c2:	2303      	movs	r3, #3
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	4820      	ldr	r0, [pc, #128]	; (8001854 <HAL_ADC_MspInit+0x290>)
 80017d2:	f002 fe6f 	bl	80044b4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_ADC_MspInit+0x294>)
 80017d8:	4a20      	ldr	r2, [pc, #128]	; (800185c <HAL_ADC_MspInit+0x298>)
 80017da:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_ADC_MspInit+0x294>)
 80017de:	2200      	movs	r2, #0
 80017e0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_ADC_MspInit+0x294>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_ADC_MspInit+0x294>)
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_ADC_MspInit+0x294>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_ADC_MspInit+0x294>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_ADC_MspInit+0x294>)
 80017fc:	2220      	movs	r2, #32
 80017fe:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_ADC_MspInit+0x294>)
 8001802:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001806:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001808:	4813      	ldr	r0, [pc, #76]	; (8001858 <HAL_ADC_MspInit+0x294>)
 800180a:	f002 fc29 	bl	8004060 <HAL_DMA_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_ADC_MspInit+0x254>
      Error_Handler();
 8001814:	f7ff feaa 	bl	800156c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_ADC_MspInit+0x294>)
 800181c:	639a      	str	r2, [r3, #56]	; 0x38
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_ADC_MspInit+0x294>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001824:	e07b      	b.n	800191e <HAL_ADC_MspInit+0x35a>
 8001826:	bf00      	nop
 8001828:	2000023c 	.word	0x2000023c
 800182c:	40021000 	.word	0x40021000
 8001830:	200033dc 	.word	0x200033dc
 8001834:	40020008 	.word	0x40020008
 8001838:	50000100 	.word	0x50000100
 800183c:	48000800 	.word	0x48000800
 8001840:	20006480 	.word	0x20006480
 8001844:	40020430 	.word	0x40020430
 8001848:	40010000 	.word	0x40010000
 800184c:	50000400 	.word	0x50000400
 8001850:	20000240 	.word	0x20000240
 8001854:	48000400 	.word	0x48000400
 8001858:	200032b8 	.word	0x200032b8
 800185c:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a30      	ldr	r2, [pc, #192]	; (8001928 <HAL_ADC_MspInit+0x364>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d159      	bne.n	800191e <HAL_ADC_MspInit+0x35a>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <HAL_ADC_MspInit+0x368>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a2e      	ldr	r2, [pc, #184]	; (800192c <HAL_ADC_MspInit+0x368>)
 8001872:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_ADC_MspInit+0x368>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d10b      	bne.n	8001894 <HAL_ADC_MspInit+0x2d0>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <HAL_ADC_MspInit+0x36c>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <HAL_ADC_MspInit+0x36c>)
 8001882:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001886:	6153      	str	r3, [r2, #20]
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <HAL_ADC_MspInit+0x36c>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_ADC_MspInit+0x36c>)
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	4a25      	ldr	r2, [pc, #148]	; (8001930 <HAL_ADC_MspInit+0x36c>)
 800189a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189e:	6153      	str	r3, [r2, #20]
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_ADC_MspInit+0x36c>)
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b2:	2303      	movs	r3, #3
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	481c      	ldr	r0, [pc, #112]	; (8001934 <HAL_ADC_MspInit+0x370>)
 80018c2:	f002 fdf7 	bl	80044b4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel4;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_ADC_MspInit+0x374>)
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_ADC_MspInit+0x378>)
 80018ca:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_ADC_MspInit+0x374>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_ADC_MspInit+0x374>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_ADC_MspInit+0x374>)
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_ADC_MspInit+0x374>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_ADC_MspInit+0x374>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_ADC_MspInit+0x374>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_ADC_MspInit+0x374>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80018f6:	4810      	ldr	r0, [pc, #64]	; (8001938 <HAL_ADC_MspInit+0x374>)
 80018f8:	f002 fbb2 	bl	8004060 <HAL_DMA_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_ADC_MspInit+0x342>
      Error_Handler();
 8001902:	f7ff fe33 	bl	800156c <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_ADC24_DMA2_CH34);
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_ADC_MspInit+0x37c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_ADC_MspInit+0x37c>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_ADC_MspInit+0x374>)
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_ADC_MspInit+0x374>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800191e:	bf00      	nop
 8001920:	3740      	adds	r7, #64	; 0x40
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	50000500 	.word	0x50000500
 800192c:	20000240 	.word	0x20000240
 8001930:	40021000 	.word	0x40021000
 8001934:	48000400 	.word	0x48000400
 8001938:	20000294 	.word	0x20000294
 800193c:	40020444 	.word	0x40020444
 8001940:	40010000 	.word	0x40010000

08001944 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <HAL_COMP_MspInit+0x80>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d12a      	bne.n	80019bc <HAL_COMP_MspInit+0x78>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_COMP_MspInit+0x84>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <HAL_COMP_MspInit+0x84>)
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	6153      	str	r3, [r2, #20]
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_COMP_MspInit+0x84>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration    
    PA7     ------> COMP2_INP
    PA12     ------> COMP2_OUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001982:	2303      	movs	r3, #3
 8001984:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f002 fd8e 	bl	80044b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP2;
 80019aa:	2308      	movs	r3, #8
 80019ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f002 fd7c 	bl	80044b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40010020 	.word	0x40010020
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <HAL_DAC_MspInit+0x74>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d124      	bne.n	8001a38 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_DAC_MspInit+0x78>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <HAL_DAC_MspInit+0x78>)
 80019f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_DAC_MspInit+0x78>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_DAC_MspInit+0x78>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_DAC_MspInit+0x78>)
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	6153      	str	r3, [r2, #20]
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_DAC_MspInit+0x78>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a1e:	2330      	movs	r3, #48	; 0x30
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a22:	2303      	movs	r3, #3
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f002 fd3e 	bl	80044b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40007400 	.word	0x40007400
 8001a44:	40021000 	.word	0x40021000

08001a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a4b      	ldr	r2, [pc, #300]	; (8001b94 <HAL_TIM_Base_MspInit+0x14c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d10c      	bne.n	8001a84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4a4a      	ldr	r2, [pc, #296]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001a70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a74:	6193      	str	r3, [r2, #24]
 8001a76:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001a82:	e082      	b.n	8001b8a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a8c:	d152      	bne.n	8001b34 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8e:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a41      	ldr	r2, [pc, #260]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	6153      	str	r3, [r2, #20]
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ade:	f002 fce9 	bl	80044b4 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001ae4:	4a2e      	ldr	r2, [pc, #184]	; (8001ba0 <HAL_TIM_Base_MspInit+0x158>)
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b00:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b08:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001b16:	4821      	ldr	r0, [pc, #132]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001b18:	f002 faa2 	bl	8004060 <HAL_DMA_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_TIM_Base_MspInit+0xde>
      Error_Handler();
 8001b22:	f7ff fd23 	bl	800156c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <HAL_TIM_Base_MspInit+0x154>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001b32:	e02a      	b.n	8001b8a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1a      	ldr	r2, [pc, #104]	; (8001ba4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d114      	bne.n	8001b68 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	201d      	movs	r0, #29
 8001b5c:	f002 f96b 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b60:	201d      	movs	r0, #29
 8001b62:	f002 f984 	bl	8003e6e <HAL_NVIC_EnableIRQ>
}
 8001b66:	e010      	b.n	8001b8a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM8)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_TIM_Base_MspInit+0x160>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10b      	bne.n	8001b8a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001b78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b7c:	6193      	str	r3, [r2, #24]
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_TIM_Base_MspInit+0x150>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
}
 8001b8a:	bf00      	nop
 8001b8c:	3730      	adds	r7, #48	; 0x30
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	20000250 	.word	0x20000250
 8001ba0:	40020058 	.word	0x40020058
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40013400 	.word	0x40013400

08001bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a22      	ldr	r2, [pc, #136]	; (8001c54 <HAL_TIM_MspPostInit+0xa8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d11c      	bne.n	8001c08 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_TIM_MspPostInit+0xac>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_TIM_MspPostInit+0xac>)
 8001bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bd8:	6153      	str	r3, [r2, #20]
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <HAL_TIM_MspPostInit+0xac>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001be6:	2340      	movs	r3, #64	; 0x40
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4816      	ldr	r0, [pc, #88]	; (8001c5c <HAL_TIM_MspPostInit+0xb0>)
 8001c02:	f002 fc57 	bl	80044b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c06:	e021      	b.n	8001c4c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <HAL_TIM_MspPostInit+0xb4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d11c      	bne.n	8001c4c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_TIM_MspPostInit+0xac>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <HAL_TIM_MspPostInit+0xac>)
 8001c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1c:	6153      	str	r3, [r2, #20]
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_TIM_MspPostInit+0xac>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001c3c:	230a      	movs	r3, #10
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4619      	mov	r1, r3
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <HAL_TIM_MspPostInit+0xb8>)
 8001c48:	f002 fc34 	bl	80044b4 <HAL_GPIO_Init>
}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48000800 	.word	0x48000800
 8001c60:	40013400 	.word	0x40013400
 8001c64:	48000400 	.word	0x48000400

08001c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <HAL_UART_MspInit+0x8c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d130      	bne.n	8001cec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_UART_MspInit+0x90>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <HAL_UART_MspInit+0x90>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	61d3      	str	r3, [r2, #28]
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_UART_MspInit+0x90>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_UART_MspInit+0x90>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <HAL_UART_MspInit+0x90>)
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	6153      	str	r3, [r2, #20]
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_UART_MspInit+0x90>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cba:	230c      	movs	r3, #12
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cca:	2307      	movs	r3, #7
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd8:	f002 fbec 	bl	80044b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2026      	movs	r0, #38	; 0x26
 8001ce2:	f002 f8a8 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ce6:	2026      	movs	r0, #38	; 0x26
 8001ce8:	f002 f8c1 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40004400 	.word	0x40004400
 8001cf8:	40021000 	.word	0x40021000

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <HardFault_Handler+0x4>

08001d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <MemManage_Handler+0x4>

08001d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d50:	f000 f976 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <DMA1_Channel1_IRQHandler+0x10>)
 8001d5e:	f002 fa9c 	bl	800429a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200033dc 	.word	0x200033dc

08001d6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <DMA1_Channel5_IRQHandler+0x10>)
 8001d72:	f002 fa92 	bl	800429a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000250 	.word	0x20000250

08001d80 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <ADC1_2_IRQHandler+0x14>)
 8001d86:	f000 fd2d 	bl	80027e4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001d8a:	4803      	ldr	r0, [pc, #12]	; (8001d98 <ADC1_2_IRQHandler+0x18>)
 8001d8c:	f000 fd2a 	bl	80027e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2000333c 	.word	0x2000333c
 8001d98:	20000388 	.word	0x20000388

08001d9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <TIM3_IRQHandler+0x10>)
 8001da2:	f004 fc3d 	bl	8006620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200032fc 	.word	0x200032fc

08001db0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <USART2_IRQHandler+0x10>)
 8001db6:	f006 fac3 	bl	8008340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200063b0 	.word	0x200063b0

08001dc4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <DMA2_Channel3_IRQHandler+0x10>)
 8001dca:	f002 fa66 	bl	800429a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20006480 	.word	0x20006480

08001dd8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <DMA2_Channel4_IRQHandler+0x10>)
 8001dde:	f002 fa5c 	bl	800429a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000294 	.word	0x20000294

08001dec <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <DMA2_Channel5_IRQHandler+0x10>)
 8001df2:	f002 fa52 	bl	800429a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200032b8 	.word	0x200032b8

08001e00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e00a      	b.n	8001e28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e12:	f3af 8000 	nop.w
 8001e16:	4601      	mov	r1, r0
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	60ba      	str	r2, [r7, #8]
 8001e1e:	b2ca      	uxtb	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf0      	blt.n	8001e12 <_read+0x12>
	}

return len;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e009      	b.n	8001e60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fa13 	bl	8000280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf1      	blt.n	8001e4c <_write+0x12>
	}
	return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_close>:

int _close(int file)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <_isatty>:

int _isatty(int file)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
	return 1;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <_sbrk+0x50>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <_sbrk+0x16>
		heap_end = &end;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <_sbrk+0x50>)
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <_sbrk+0x54>)
 8001ef0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <_sbrk+0x50>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <_sbrk+0x50>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	466a      	mov	r2, sp
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d907      	bls.n	8001f16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f06:	f007 f869 	bl	8008fdc <__errno>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	230c      	movs	r3, #12
 8001f0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	e006      	b.n	8001f24 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <_sbrk+0x50>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <_sbrk+0x50>)
 8001f20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000244 	.word	0x20000244
 8001f30:	2000c2d0 	.word	0x2000c2d0

08001f34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <SystemInit+0x28>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <SystemInit+0x28>)
 8001f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <SystemInit+0x28>)
 8001f4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f4e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f66:	e003      	b.n	8001f70 <LoopCopyDataInit>

08001f68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f6e:	3104      	adds	r1, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f70:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f78:	d3f6      	bcc.n	8001f68 <CopyDataInit>
	ldr	r2, =_sbss
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f7c:	e002      	b.n	8001f84 <LoopFillZerobss>

08001f7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f80:	f842 3b04 	str.w	r3, [r2], #4

08001f84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <LoopForever+0x16>)
	cmp	r2, r3
 8001f86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f88:	d3f9      	bcc.n	8001f7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f8a:	f7ff ffd3 	bl	8001f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f007 f82b 	bl	8008fe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7fe fc65 	bl	8000860 <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f98:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001f9c:	0800a230 	.word	0x0800a230
	ldr	r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fa4:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8001fa8:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8001fac:	2000c2d0 	.word	0x2000c2d0

08001fb0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC3_IRQHandler>
	...

08001fb4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_Init+0x28>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_Init+0x28>)
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f001 ff2b 	bl	8003e20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f000 f808 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7ff fad4 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000

08001fe0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 ff43 	bl	8003e8a <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f001 ff0b 	bl	8003e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000014 	.word	0x20000014
 8002038:	2000001c 	.word	0x2000001c
 800203c:	20000018 	.word	0x20000018

08002040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	2000001c 	.word	0x2000001c
 8002064:	2000c2c8 	.word	0x2000c2c8

08002068 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;  
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2000c2c8 	.word	0x2000c2c8

08002080 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_Delay+0x40>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000001c 	.word	0x2000001c

080020c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b09a      	sub	sp, #104	; 0x68
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e1e3      	b.n	80024e8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d176      	bne.n	8002220 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d152      	bne.n	80021e0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fa35 	bl	80015c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d13b      	bne.n	80021e0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f001 fb11 	bl	8003790 <ADC_Disable>
 800216e:	4603      	mov	r3, r0
 8002170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d12f      	bne.n	80021e0 <HAL_ADC_Init+0xe0>
 8002180:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002184:	2b00      	cmp	r3, #0
 8002186:	d12b      	bne.n	80021e0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002190:	f023 0302 	bic.w	r3, r3, #2
 8002194:	f043 0202 	orr.w	r2, r3, #2
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021aa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021bc:	4b92      	ldr	r3, [pc, #584]	; (8002408 <HAL_ADC_Init+0x308>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a92      	ldr	r2, [pc, #584]	; (800240c <HAL_ADC_Init+0x30c>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0c9a      	lsrs	r2, r3, #18
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021d2:	e002      	b.n	80021da <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f9      	bne.n	80021d4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021fc:	d110      	bne.n	8002220 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f023 0312 	bic.w	r3, r3, #18
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	f040 8150 	bne.w	80024ce <HAL_ADC_Init+0x3ce>
 800222e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 814b 	bne.w	80024ce <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 8143 	bne.w	80024ce <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002250:	f043 0202 	orr.w	r2, r3, #2
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002260:	d004      	beq.n	800226c <HAL_ADC_Init+0x16c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6a      	ldr	r2, [pc, #424]	; (8002410 <HAL_ADC_Init+0x310>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_ADC_Init+0x170>
 800226c:	4b69      	ldr	r3, [pc, #420]	; (8002414 <HAL_ADC_Init+0x314>)
 800226e:	e000      	b.n	8002272 <HAL_ADC_Init+0x172>
 8002270:	4b69      	ldr	r3, [pc, #420]	; (8002418 <HAL_ADC_Init+0x318>)
 8002272:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800227c:	d102      	bne.n	8002284 <HAL_ADC_Init+0x184>
 800227e:	4b64      	ldr	r3, [pc, #400]	; (8002410 <HAL_ADC_Init+0x310>)
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e01a      	b.n	80022ba <HAL_ADC_Init+0x1ba>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a61      	ldr	r2, [pc, #388]	; (8002410 <HAL_ADC_Init+0x310>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d103      	bne.n	8002296 <HAL_ADC_Init+0x196>
 800228e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e011      	b.n	80022ba <HAL_ADC_Init+0x1ba>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a60      	ldr	r2, [pc, #384]	; (800241c <HAL_ADC_Init+0x31c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d102      	bne.n	80022a6 <HAL_ADC_Init+0x1a6>
 80022a0:	4b5f      	ldr	r3, [pc, #380]	; (8002420 <HAL_ADC_Init+0x320>)
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e009      	b.n	80022ba <HAL_ADC_Init+0x1ba>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5d      	ldr	r2, [pc, #372]	; (8002420 <HAL_ADC_Init+0x320>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d102      	bne.n	80022b6 <HAL_ADC_Init+0x1b6>
 80022b0:	4b5a      	ldr	r3, [pc, #360]	; (800241c <HAL_ADC_Init+0x31c>)
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e001      	b.n	80022ba <HAL_ADC_Init+0x1ba>
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d108      	bne.n	80022da <HAL_ADC_Init+0x1da>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_ADC_Init+0x1da>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_ADC_Init+0x1dc>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11c      	bne.n	800231a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_ADC_Init+0x202>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_Init+0x202>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_ADC_Init+0x204>
 8002302:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002304:	2b00      	cmp	r3, #0
 8002306:	d108      	bne.n	800231a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	431a      	orrs	r2, r3
 8002316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002318:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7e5b      	ldrb	r3, [r3, #25]
 800231e:	035b      	lsls	r3, r3, #13
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002324:	2a01      	cmp	r2, #1
 8002326:	d002      	beq.n	800232e <HAL_ADC_Init+0x22e>
 8002328:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800232c:	e000      	b.n	8002330 <HAL_ADC_Init+0x230>
 800232e:	2200      	movs	r2, #0
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4313      	orrs	r3, r2
 800233e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002340:	4313      	orrs	r3, r2
 8002342:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d11b      	bne.n	8002386 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7e5b      	ldrb	r3, [r3, #25]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	3b01      	subs	r3, #1
 800235c:	045a      	lsls	r2, r3, #17
 800235e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002360:	4313      	orrs	r3, r2
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	663b      	str	r3, [r7, #96]	; 0x60
 8002368:	e00d      	b.n	8002386 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002372:	f043 0220 	orr.w	r2, r3, #32
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	2b01      	cmp	r3, #1
 800238c:	d054      	beq.n	8002438 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a22      	ldr	r2, [pc, #136]	; (800241c <HAL_ADC_Init+0x31c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_ADC_Init+0x2a2>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a20      	ldr	r2, [pc, #128]	; (8002420 <HAL_ADC_Init+0x320>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d140      	bne.n	8002424 <HAL_ADC_Init+0x324>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80023aa:	d02a      	beq.n	8002402 <HAL_ADC_Init+0x302>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b4:	d022      	beq.n	80023fc <HAL_ADC_Init+0x2fc>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80023be:	d01a      	beq.n	80023f6 <HAL_ADC_Init+0x2f6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80023c8:	d012      	beq.n	80023f0 <HAL_ADC_Init+0x2f0>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80023d2:	d00a      	beq.n	80023ea <HAL_ADC_Init+0x2ea>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80023dc:	d002      	beq.n	80023e4 <HAL_ADC_Init+0x2e4>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	e023      	b.n	800242c <HAL_ADC_Init+0x32c>
 80023e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80023e8:	e020      	b.n	800242c <HAL_ADC_Init+0x32c>
 80023ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023ee:	e01d      	b.n	800242c <HAL_ADC_Init+0x32c>
 80023f0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80023f4:	e01a      	b.n	800242c <HAL_ADC_Init+0x32c>
 80023f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fa:	e017      	b.n	800242c <HAL_ADC_Init+0x32c>
 80023fc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002400:	e014      	b.n	800242c <HAL_ADC_Init+0x32c>
 8002402:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002406:	e011      	b.n	800242c <HAL_ADC_Init+0x32c>
 8002408:	20000014 	.word	0x20000014
 800240c:	431bde83 	.word	0x431bde83
 8002410:	50000100 	.word	0x50000100
 8002414:	50000300 	.word	0x50000300
 8002418:	50000700 	.word	0x50000700
 800241c:	50000400 	.word	0x50000400
 8002420:	50000500 	.word	0x50000500
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002430:	4313      	orrs	r3, r2
 8002432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002434:	4313      	orrs	r3, r2
 8002436:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b00      	cmp	r3, #0
 8002444:	d114      	bne.n	8002470 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002454:	f023 0302 	bic.w	r3, r3, #2
 8002458:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7e1b      	ldrb	r3, [r3, #24]
 800245e:	039a      	lsls	r2, r3, #14
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4313      	orrs	r3, r2
 800246a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800246c:	4313      	orrs	r3, r2
 800246e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <HAL_ADC_Init+0x3f0>)
 8002478:	4013      	ands	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002480:	430b      	orrs	r3, r1
 8002482:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d10c      	bne.n	80024a6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f023 010f 	bic.w	r1, r3, #15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
 80024a4:	e007      	b.n	80024b6 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 020f 	bic.w	r2, r2, #15
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f023 0303 	bic.w	r3, r3, #3
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
 80024cc:	e00a      	b.n	80024e4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f023 0312 	bic.w	r3, r3, #18
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80024e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3768      	adds	r7, #104	; 0x68
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	fff0c007 	.word	0xfff0c007

080024f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 80f7 	bne.w	8002702 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Start_DMA+0x2e>
 800251e:	2302      	movs	r3, #2
 8002520:	e0f2      	b.n	8002708 <HAL_ADC_Start_DMA+0x214>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002532:	d004      	beq.n	800253e <HAL_ADC_Start_DMA+0x4a>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a75      	ldr	r2, [pc, #468]	; (8002710 <HAL_ADC_Start_DMA+0x21c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d109      	bne.n	8002552 <HAL_ADC_Start_DMA+0x5e>
 800253e:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_ADC_Start_DMA+0x220>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	e008      	b.n	8002564 <HAL_ADC_Start_DMA+0x70>
 8002552:	4b71      	ldr	r3, [pc, #452]	; (8002718 <HAL_ADC_Start_DMA+0x224>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf0c      	ite	eq
 800255e:	2301      	moveq	r3, #1
 8002560:	2300      	movne	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80c5 	beq.w	80026f4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f001 f8b2 	bl	80036d4 <ADC_Enable>
 8002570:	4603      	mov	r3, r0
 8002572:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002574:	7dfb      	ldrb	r3, [r7, #23]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80b7 	bne.w	80026ea <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002598:	d004      	beq.n	80025a4 <HAL_ADC_Start_DMA+0xb0>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5c      	ldr	r2, [pc, #368]	; (8002710 <HAL_ADC_Start_DMA+0x21c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d106      	bne.n	80025b2 <HAL_ADC_Start_DMA+0xbe>
 80025a4:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <HAL_ADC_Start_DMA+0x220>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d010      	beq.n	80025d2 <HAL_ADC_Start_DMA+0xde>
 80025b0:	e005      	b.n	80025be <HAL_ADC_Start_DMA+0xca>
 80025b2:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_ADC_Start_DMA+0x224>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_ADC_Start_DMA+0xde>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c6:	d004      	beq.n	80025d2 <HAL_ADC_Start_DMA+0xde>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a53      	ldr	r2, [pc, #332]	; (800271c <HAL_ADC_Start_DMA+0x228>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d115      	bne.n	80025fe <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d036      	beq.n	800265a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025fc:	e02d      	b.n	800265a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002612:	d004      	beq.n	800261e <HAL_ADC_Start_DMA+0x12a>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a3d      	ldr	r2, [pc, #244]	; (8002710 <HAL_ADC_Start_DMA+0x21c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10a      	bne.n	8002634 <HAL_ADC_Start_DMA+0x140>
 800261e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e008      	b.n	8002646 <HAL_ADC_Start_DMA+0x152>
 8002634:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_ADC_Start_DMA+0x228>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002652:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002666:	d106      	bne.n	8002676 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f023 0206 	bic.w	r2, r3, #6
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
 8002674:	e002      	b.n	800267c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	4a25      	ldr	r2, [pc, #148]	; (8002720 <HAL_ADC_Start_DMA+0x22c>)
 800268a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	4a24      	ldr	r2, [pc, #144]	; (8002724 <HAL_ADC_Start_DMA+0x230>)
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_ADC_Start_DMA+0x234>)
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	221c      	movs	r2, #28
 80026a2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0210 	orr.w	r2, r2, #16
 80026b2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3340      	adds	r3, #64	; 0x40
 80026ce:	4619      	mov	r1, r3
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f001 fd0b 	bl	80040ee <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0204 	orr.w	r2, r2, #4
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e00d      	b.n	8002706 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026f2:	e008      	b.n	8002706 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002700:	e001      	b.n	8002706 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002702:	2302      	movs	r3, #2
 8002704:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002706:	7dfb      	ldrb	r3, [r7, #23]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	50000100 	.word	0x50000100
 8002714:	50000300 	.word	0x50000300
 8002718:	50000700 	.word	0x50000700
 800271c:	50000400 	.word	0x50000400
 8002720:	08003609 	.word	0x08003609
 8002724:	08003683 	.word	0x08003683
 8002728:	0800369f 	.word	0x0800369f

0800272c <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_Stop_DMA+0x1a>
 8002742:	2302      	movs	r3, #2
 8002744:	e04a      	b.n	80027dc <HAL_ADC_Stop_DMA+0xb0>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800274e:	216c      	movs	r1, #108	; 0x6c
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f001 f87d 	bl	8003850 <ADC_ConversionStop>
 8002756:	4603      	mov	r3, r0
 8002758:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d138      	bne.n	80027d2 <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	4618      	mov	r0, r3
 8002776:	f001 fd19 	bl	80041ac <HAL_DMA_Abort>
 800277a:	4603      	mov	r3, r0
 800277c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0210 	bic.w	r2, r2, #16
 800279e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fff2 	bl	8003790 <ADC_Disable>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e002      	b.n	80027b8 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 ffec 	bl	8003790 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d106      	bne.n	8002814 <HAL_ADC_IRQHandler+0x30>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b04      	cmp	r3, #4
 8002812:	d00f      	beq.n	8002834 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800281e:	2b08      	cmp	r3, #8
 8002820:	f040 80c0 	bne.w	80029a4 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b08      	cmp	r3, #8
 8002830:	f040 80b8 	bne.w	80029a4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002854:	d004      	beq.n	8002860 <HAL_ADC_IRQHandler+0x7c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a95      	ldr	r2, [pc, #596]	; (8002ab0 <HAL_ADC_IRQHandler+0x2cc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d106      	bne.n	800286e <HAL_ADC_IRQHandler+0x8a>
 8002860:	4b94      	ldr	r3, [pc, #592]	; (8002ab4 <HAL_ADC_IRQHandler+0x2d0>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2b00      	cmp	r3, #0
 800286a:	d03e      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 800286c:	e005      	b.n	800287a <HAL_ADC_IRQHandler+0x96>
 800286e:	4b92      	ldr	r3, [pc, #584]	; (8002ab8 <HAL_ADC_IRQHandler+0x2d4>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2b00      	cmp	r3, #0
 8002878:	d037      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002882:	d004      	beq.n	800288e <HAL_ADC_IRQHandler+0xaa>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a89      	ldr	r2, [pc, #548]	; (8002ab0 <HAL_ADC_IRQHandler+0x2cc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d106      	bne.n	800289c <HAL_ADC_IRQHandler+0xb8>
 800288e:	4b89      	ldr	r3, [pc, #548]	; (8002ab4 <HAL_ADC_IRQHandler+0x2d0>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2b05      	cmp	r3, #5
 8002898:	d027      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 800289a:	e005      	b.n	80028a8 <HAL_ADC_IRQHandler+0xc4>
 800289c:	4b86      	ldr	r3, [pc, #536]	; (8002ab8 <HAL_ADC_IRQHandler+0x2d4>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d020      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b0:	d004      	beq.n	80028bc <HAL_ADC_IRQHandler+0xd8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7e      	ldr	r2, [pc, #504]	; (8002ab0 <HAL_ADC_IRQHandler+0x2cc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d106      	bne.n	80028ca <HAL_ADC_IRQHandler+0xe6>
 80028bc:	4b7d      	ldr	r3, [pc, #500]	; (8002ab4 <HAL_ADC_IRQHandler+0x2d0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2b09      	cmp	r3, #9
 80028c6:	d010      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 80028c8:	e005      	b.n	80028d6 <HAL_ADC_IRQHandler+0xf2>
 80028ca:	4b7b      	ldr	r3, [pc, #492]	; (8002ab8 <HAL_ADC_IRQHandler+0x2d4>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d009      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028de:	d004      	beq.n	80028ea <HAL_ADC_IRQHandler+0x106>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a75      	ldr	r2, [pc, #468]	; (8002abc <HAL_ADC_IRQHandler+0x2d8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d104      	bne.n	80028f4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	e00f      	b.n	8002914 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028fc:	d004      	beq.n	8002908 <HAL_ADC_IRQHandler+0x124>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6b      	ldr	r2, [pc, #428]	; (8002ab0 <HAL_ADC_IRQHandler+0x2cc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d102      	bne.n	800290e <HAL_ADC_IRQHandler+0x12a>
 8002908:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800290c:	e000      	b.n	8002910 <HAL_ADC_IRQHandler+0x12c>
 800290e:	4b6b      	ldr	r3, [pc, #428]	; (8002abc <HAL_ADC_IRQHandler+0x2d8>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800291e:	2b00      	cmp	r3, #0
 8002920:	d139      	bne.n	8002996 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002928:	2b00      	cmp	r3, #0
 800292a:	d134      	bne.n	8002996 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b08      	cmp	r3, #8
 8002938:	d12d      	bne.n	8002996 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d11a      	bne.n	800297e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 020c 	bic.w	r2, r2, #12
 8002956:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d112      	bne.n	8002996 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
 800297c:	e00b      	b.n	8002996 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f043 0210 	orr.w	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fdc8 	bl	800152c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	220c      	movs	r2, #12
 80029a2:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d106      	bne.n	80029c0 <HAL_ADC_IRQHandler+0x1dc>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d00f      	beq.n	80029e0 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	f040 813c 	bne.w	8002c48 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	f040 8134 	bne.w	8002c48 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f4:	d004      	beq.n	8002a00 <HAL_ADC_IRQHandler+0x21c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2d      	ldr	r2, [pc, #180]	; (8002ab0 <HAL_ADC_IRQHandler+0x2cc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d106      	bne.n	8002a0e <HAL_ADC_IRQHandler+0x22a>
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <HAL_ADC_IRQHandler+0x2d0>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d03e      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x2a6>
 8002a0c:	e005      	b.n	8002a1a <HAL_ADC_IRQHandler+0x236>
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <HAL_ADC_IRQHandler+0x2d4>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d037      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x2a6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a22:	d004      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x24a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <HAL_ADC_IRQHandler+0x2cc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d106      	bne.n	8002a3c <HAL_ADC_IRQHandler+0x258>
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <HAL_ADC_IRQHandler+0x2d0>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d027      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x2a6>
 8002a3a:	e005      	b.n	8002a48 <HAL_ADC_IRQHandler+0x264>
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_ADC_IRQHandler+0x2d4>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d020      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x2a6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a50:	d004      	beq.n	8002a5c <HAL_ADC_IRQHandler+0x278>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <HAL_ADC_IRQHandler+0x2cc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d106      	bne.n	8002a6a <HAL_ADC_IRQHandler+0x286>
 8002a5c:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_ADC_IRQHandler+0x2d0>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2b09      	cmp	r3, #9
 8002a66:	d010      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x2a6>
 8002a68:	e005      	b.n	8002a76 <HAL_ADC_IRQHandler+0x292>
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_ADC_IRQHandler+0x2d4>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	d009      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x2a6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a7e:	d004      	beq.n	8002a8a <HAL_ADC_IRQHandler+0x2a6>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <HAL_ADC_IRQHandler+0x2d8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d104      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	e018      	b.n	8002ac6 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a9c:	d004      	beq.n	8002aa8 <HAL_ADC_IRQHandler+0x2c4>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <HAL_ADC_IRQHandler+0x2cc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10b      	bne.n	8002ac0 <HAL_ADC_IRQHandler+0x2dc>
 8002aa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aac:	e009      	b.n	8002ac2 <HAL_ADC_IRQHandler+0x2de>
 8002aae:	bf00      	nop
 8002ab0:	50000100 	.word	0x50000100
 8002ab4:	50000300 	.word	0x50000300
 8002ab8:	50000700 	.word	0x50000700
 8002abc:	50000400 	.word	0x50000400
 8002ac0:	4b9d      	ldr	r3, [pc, #628]	; (8002d38 <HAL_ADC_IRQHandler+0x554>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002acc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 80ad 	bne.w	8002c3a <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 80a5 	bne.w	8002c3a <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 809f 	bne.w	8002c3a <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	f040 8097 	bne.w	8002c3a <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b14:	d004      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x33c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a88      	ldr	r2, [pc, #544]	; (8002d3c <HAL_ADC_IRQHandler+0x558>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d106      	bne.n	8002b2e <HAL_ADC_IRQHandler+0x34a>
 8002b20:	4b87      	ldr	r3, [pc, #540]	; (8002d40 <HAL_ADC_IRQHandler+0x55c>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d03e      	beq.n	8002baa <HAL_ADC_IRQHandler+0x3c6>
 8002b2c:	e005      	b.n	8002b3a <HAL_ADC_IRQHandler+0x356>
 8002b2e:	4b85      	ldr	r3, [pc, #532]	; (8002d44 <HAL_ADC_IRQHandler+0x560>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d037      	beq.n	8002baa <HAL_ADC_IRQHandler+0x3c6>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b42:	d004      	beq.n	8002b4e <HAL_ADC_IRQHandler+0x36a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a7c      	ldr	r2, [pc, #496]	; (8002d3c <HAL_ADC_IRQHandler+0x558>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d106      	bne.n	8002b5c <HAL_ADC_IRQHandler+0x378>
 8002b4e:	4b7c      	ldr	r3, [pc, #496]	; (8002d40 <HAL_ADC_IRQHandler+0x55c>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d027      	beq.n	8002baa <HAL_ADC_IRQHandler+0x3c6>
 8002b5a:	e005      	b.n	8002b68 <HAL_ADC_IRQHandler+0x384>
 8002b5c:	4b79      	ldr	r3, [pc, #484]	; (8002d44 <HAL_ADC_IRQHandler+0x560>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d020      	beq.n	8002baa <HAL_ADC_IRQHandler+0x3c6>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b70:	d004      	beq.n	8002b7c <HAL_ADC_IRQHandler+0x398>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a71      	ldr	r2, [pc, #452]	; (8002d3c <HAL_ADC_IRQHandler+0x558>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d106      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x3a6>
 8002b7c:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <HAL_ADC_IRQHandler+0x55c>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	2b07      	cmp	r3, #7
 8002b86:	d010      	beq.n	8002baa <HAL_ADC_IRQHandler+0x3c6>
 8002b88:	e005      	b.n	8002b96 <HAL_ADC_IRQHandler+0x3b2>
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <HAL_ADC_IRQHandler+0x560>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	2b07      	cmp	r3, #7
 8002b94:	d009      	beq.n	8002baa <HAL_ADC_IRQHandler+0x3c6>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b9e:	d004      	beq.n	8002baa <HAL_ADC_IRQHandler+0x3c6>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a64      	ldr	r2, [pc, #400]	; (8002d38 <HAL_ADC_IRQHandler+0x554>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d104      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e00f      	b.n	8002bd4 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bbc:	d004      	beq.n	8002bc8 <HAL_ADC_IRQHandler+0x3e4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a5e      	ldr	r2, [pc, #376]	; (8002d3c <HAL_ADC_IRQHandler+0x558>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d102      	bne.n	8002bce <HAL_ADC_IRQHandler+0x3ea>
 8002bc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bcc:	e000      	b.n	8002bd0 <HAL_ADC_IRQHandler+0x3ec>
 8002bce:	4b5a      	ldr	r3, [pc, #360]	; (8002d38 <HAL_ADC_IRQHandler+0x554>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d12d      	bne.n	8002c3a <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d11a      	bne.n	8002c22 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bfa:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d112      	bne.n	8002c3a <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c20:	e00b      	b.n	8002c3a <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0210 	orr.w	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8de 	bl	8002dfc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2260      	movs	r2, #96	; 0x60
 8002c46:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	d113      	bne.n	8002c7e <HAL_ADC_IRQHandler+0x49a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c60:	2b80      	cmp	r3, #128	; 0x80
 8002c62:	d10c      	bne.n	8002c7e <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fa31 	bl	80020d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8c:	d115      	bne.n	8002cba <HAL_ADC_IRQHandler+0x4d6>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9c:	d10d      	bne.n	8002cba <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8ba 	bl	8002e24 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc8:	d115      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x512>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd8:	d10d      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8a6 	bl	8002e38 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d151      	bne.n	8002da8 <HAL_ADC_IRQHandler+0x5c4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d14a      	bne.n	8002da8 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d102      	bne.n	8002d20 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e02d      	b.n	8002d7c <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d28:	d004      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x550>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <HAL_ADC_IRQHandler+0x558>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d109      	bne.n	8002d48 <HAL_ADC_IRQHandler+0x564>
 8002d34:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <HAL_ADC_IRQHandler+0x55c>)
 8002d36:	e008      	b.n	8002d4a <HAL_ADC_IRQHandler+0x566>
 8002d38:	50000400 	.word	0x50000400
 8002d3c:	50000100 	.word	0x50000100
 8002d40:	50000300 	.word	0x50000300
 8002d44:	50000700 	.word	0x50000700
 8002d48:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_ADC_IRQHandler+0x614>)
 8002d4a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10a      	bne.n	8002d7c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002d66:	2301      	movs	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e007      	b.n	8002d7c <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002d78:	2301      	movs	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10e      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f043 0202 	orr.w	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff f9a6 	bl	80020ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2210      	movs	r2, #16
 8002da6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db6:	d11b      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x60c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d113      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	f043 0208 	orr.w	r2, r3, #8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f810 	bl	8002e10 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	50000700 	.word	0x50000700

08002dfc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b09b      	sub	sp, #108	; 0x6c
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x22>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e2cb      	b.n	8003406 <HAL_ADC_ConfigChannel+0x5ba>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 82af 	bne.w	80033e4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d81c      	bhi.n	8002ec8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	231f      	movs	r3, #31
 8002ea4:	4093      	lsls	r3, r2
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	4019      	ands	r1, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec6:	e063      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	d81e      	bhi.n	8002f0e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	3b1e      	subs	r3, #30
 8002ee4:	221f      	movs	r2, #31
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	4019      	ands	r1, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	3b1e      	subs	r3, #30
 8002f00:	fa00 f203 	lsl.w	r2, r0, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0c:	e040      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b0e      	cmp	r3, #14
 8002f14:	d81e      	bhi.n	8002f54 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	3b3c      	subs	r3, #60	; 0x3c
 8002f2a:	221f      	movs	r2, #31
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	4019      	ands	r1, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	3b3c      	subs	r3, #60	; 0x3c
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
 8002f52:	e01d      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	3b5a      	subs	r3, #90	; 0x5a
 8002f68:	221f      	movs	r2, #31
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	4019      	ands	r1, r3
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	3b5a      	subs	r3, #90	; 0x5a
 8002f84:	fa00 f203 	lsl.w	r2, r0, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 80e5 	bne.w	800316a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b09      	cmp	r3, #9
 8002fa6:	d91c      	bls.n	8002fe2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6999      	ldr	r1, [r3, #24]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3b1e      	subs	r3, #30
 8002fba:	2207      	movs	r2, #7
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	4019      	ands	r1, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6898      	ldr	r0, [r3, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3b1e      	subs	r3, #30
 8002fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	619a      	str	r2, [r3, #24]
 8002fe0:	e019      	b.n	8003016 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6959      	ldr	r1, [r3, #20]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4019      	ands	r1, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6898      	ldr	r0, [r3, #8]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	fa00 f203 	lsl.w	r2, r0, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	08db      	lsrs	r3, r3, #3
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	3b01      	subs	r3, #1
 8003034:	2b03      	cmp	r3, #3
 8003036:	d84f      	bhi.n	80030d8 <HAL_ADC_ConfigChannel+0x28c>
 8003038:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <HAL_ADC_ConfigChannel+0x1f4>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	08003051 	.word	0x08003051
 8003044:	08003073 	.word	0x08003073
 8003048:	08003095 	.word	0x08003095
 800304c:	080030b7 	.word	0x080030b7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003056:	4b9f      	ldr	r3, [pc, #636]	; (80032d4 <HAL_ADC_ConfigChannel+0x488>)
 8003058:	4013      	ands	r3, r2
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	0691      	lsls	r1, r2, #26
 8003060:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003062:	430a      	orrs	r2, r1
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800306e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003070:	e07e      	b.n	8003170 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003078:	4b96      	ldr	r3, [pc, #600]	; (80032d4 <HAL_ADC_ConfigChannel+0x488>)
 800307a:	4013      	ands	r3, r2
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	0691      	lsls	r1, r2, #26
 8003082:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003084:	430a      	orrs	r2, r1
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003090:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003092:	e06d      	b.n	8003170 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800309a:	4b8e      	ldr	r3, [pc, #568]	; (80032d4 <HAL_ADC_ConfigChannel+0x488>)
 800309c:	4013      	ands	r3, r2
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	0691      	lsls	r1, r2, #26
 80030a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030a6:	430a      	orrs	r2, r1
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030b2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030b4:	e05c      	b.n	8003170 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030bc:	4b85      	ldr	r3, [pc, #532]	; (80032d4 <HAL_ADC_ConfigChannel+0x488>)
 80030be:	4013      	ands	r3, r2
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	0691      	lsls	r1, r2, #26
 80030c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030c8:	430a      	orrs	r2, r1
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030d4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030d6:	e04b      	b.n	8003170 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	069b      	lsls	r3, r3, #26
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d107      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030fa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	069b      	lsls	r3, r3, #26
 800310c:	429a      	cmp	r2, r3
 800310e:	d107      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800311e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	069b      	lsls	r3, r3, #26
 8003130:	429a      	cmp	r2, r3
 8003132:	d107      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003142:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	069b      	lsls	r3, r3, #26
 8003154:	429a      	cmp	r2, r3
 8003156:	d10a      	bne.n	800316e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003166:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003168:	e001      	b.n	800316e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <HAL_ADC_ConfigChannel+0x324>
      break;
 800316e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d108      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x344>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x344>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_ADC_ConfigChannel+0x346>
 8003190:	2300      	movs	r3, #0
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 8131 	bne.w	80033fa <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d00f      	beq.n	80031c0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2201      	movs	r2, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	400a      	ands	r2, r1
 80031ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80031be:	e049      	b.n	8003254 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	409a      	lsls	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b09      	cmp	r3, #9
 80031e0:	d91c      	bls.n	800321c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6999      	ldr	r1, [r3, #24]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	3b1b      	subs	r3, #27
 80031f4:	2207      	movs	r2, #7
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	4019      	ands	r1, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6898      	ldr	r0, [r3, #8]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	3b1b      	subs	r3, #27
 800320e:	fa00 f203 	lsl.w	r2, r0, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	619a      	str	r2, [r3, #24]
 800321a:	e01b      	b.n	8003254 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6959      	ldr	r1, [r3, #20]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	2207      	movs	r2, #7
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	4019      	ands	r1, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6898      	ldr	r0, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	fa00 f203 	lsl.w	r2, r0, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800325c:	d004      	beq.n	8003268 <HAL_ADC_ConfigChannel+0x41c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_ADC_ConfigChannel+0x48c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x420>
 8003268:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <HAL_ADC_ConfigChannel+0x490>)
 800326a:	e000      	b.n	800326e <HAL_ADC_ConfigChannel+0x422>
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <HAL_ADC_ConfigChannel+0x494>)
 800326e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b10      	cmp	r3, #16
 8003276:	d105      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003280:	2b00      	cmp	r3, #0
 8003282:	d015      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003288:	2b11      	cmp	r3, #17
 800328a:	d105      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800328c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800329c:	2b12      	cmp	r3, #18
 800329e:	f040 80ac 	bne.w	80033fa <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80032a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 80a5 	bne.w	80033fa <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b8:	d102      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x474>
 80032ba:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <HAL_ADC_ConfigChannel+0x48c>)
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e023      	b.n	8003308 <HAL_ADC_ConfigChannel+0x4bc>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <HAL_ADC_ConfigChannel+0x48c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10c      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x498>
 80032ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e01a      	b.n	8003308 <HAL_ADC_ConfigChannel+0x4bc>
 80032d2:	bf00      	nop
 80032d4:	83fff000 	.word	0x83fff000
 80032d8:	50000100 	.word	0x50000100
 80032dc:	50000300 	.word	0x50000300
 80032e0:	50000700 	.word	0x50000700
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a4a      	ldr	r2, [pc, #296]	; (8003414 <HAL_ADC_ConfigChannel+0x5c8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d102      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x4a8>
 80032ee:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_ADC_ConfigChannel+0x5cc>)
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e009      	b.n	8003308 <HAL_ADC_ConfigChannel+0x4bc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a47      	ldr	r2, [pc, #284]	; (8003418 <HAL_ADC_ConfigChannel+0x5cc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d102      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x4b8>
 80032fe:	4b45      	ldr	r3, [pc, #276]	; (8003414 <HAL_ADC_ConfigChannel+0x5c8>)
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e001      	b.n	8003308 <HAL_ADC_ConfigChannel+0x4bc>
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d108      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x4dc>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x4dc>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_ADC_ConfigChannel+0x4de>
 8003328:	2300      	movs	r3, #0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d150      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800332e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	2b01      	cmp	r3, #1
 800333e:	d107      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x504>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x504>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_ADC_ConfigChannel+0x506>
 8003350:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003352:	2b00      	cmp	r3, #0
 8003354:	d13c      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b10      	cmp	r3, #16
 800335c:	d11d      	bne.n	800339a <HAL_ADC_ConfigChannel+0x54e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003366:	d118      	bne.n	800339a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003372:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_ADC_ConfigChannel+0x5d0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a29      	ldr	r2, [pc, #164]	; (8003420 <HAL_ADC_ConfigChannel+0x5d4>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0c9a      	lsrs	r2, r3, #18
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800338a:	e002      	b.n	8003392 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	3b01      	subs	r3, #1
 8003390:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f9      	bne.n	800338c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003398:	e02e      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b11      	cmp	r3, #17
 80033a0:	d10b      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x56e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033aa:	d106      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80033ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80033b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033b8:	e01e      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b12      	cmp	r3, #18
 80033c0:	d11a      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80033c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033cc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033ce:	e013      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033e2:	e00a      	b.n	80033fa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033f6:	e000      	b.n	80033fa <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033f8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003402:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003406:	4618      	mov	r0, r3
 8003408:	376c      	adds	r7, #108	; 0x6c
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	50000400 	.word	0x50000400
 8003418:	50000500 	.word	0x50000500
 800341c:	20000014 	.word	0x20000014
 8003420:	431bde83 	.word	0x431bde83

08003424 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003424:	b480      	push	{r7}
 8003426:	b099      	sub	sp, #100	; 0x64
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800343c:	d102      	bne.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800343e:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	e01a      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6a      	ldr	r2, [pc, #424]	; (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d103      	bne.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800344e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	e011      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a67      	ldr	r2, [pc, #412]	; (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d102      	bne.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003460:	4b66      	ldr	r3, [pc, #408]	; (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	e009      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a64      	ldr	r2, [pc, #400]	; (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d102      	bne.n	8003476 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003470:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	e001      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0b0      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800348e:	2302      	movs	r3, #2
 8003490:	e0a9      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f040 808d 	bne.w	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 8086 	bne.w	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c0:	d004      	beq.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80034cc:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80034ce:	e000      	b.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80034d0:	4b4c      	ldr	r3, [pc, #304]	; (8003604 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80034d2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d040      	beq.n	800355e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80034dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ee:	035b      	lsls	r3, r3, #13
 80034f0:	430b      	orrs	r3, r1
 80034f2:	431a      	orrs	r2, r3
 80034f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d108      	bne.n	8003518 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003518:	2300      	movs	r3, #0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d15c      	bne.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d107      	bne.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800353a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800353c:	2b00      	cmp	r3, #0
 800353e:	d14b      	bne.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003548:	f023 030f 	bic.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	6811      	ldr	r1, [r2, #0]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	6892      	ldr	r2, [r2, #8]
 8003554:	430a      	orrs	r2, r1
 8003556:	431a      	orrs	r2, r3
 8003558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800355a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800355c:	e03c      	b.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800355e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003568:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d123      	bne.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d107      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80035ac:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d112      	bne.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80035b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035ba:	f023 030f 	bic.w	r3, r3, #15
 80035be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035c0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035c2:	e009      	b.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80035d6:	e000      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035d8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80035e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80035e6:	4618      	mov	r0, r3
 80035e8:	3764      	adds	r7, #100	; 0x64
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	50000100 	.word	0x50000100
 80035f8:	50000400 	.word	0x50000400
 80035fc:	50000500 	.word	0x50000500
 8003600:	50000300 	.word	0x50000300
 8003604:	50000700 	.word	0x50000700

08003608 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800361e:	2b00      	cmp	r3, #0
 8003620:	d126      	bne.n	8003670 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003638:	2b00      	cmp	r3, #0
 800363a:	d115      	bne.n	8003668 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003640:	2b00      	cmp	r3, #0
 8003642:	d111      	bne.n	8003668 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7fd ff5f 	bl	800152c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800366e:	e004      	b.n	800367a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7fe fd17 	bl	80020c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	f043 0204 	orr.w	r2, r3, #4
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7fe fd11 	bl	80020ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d108      	bne.n	8003700 <ADC_Enable+0x2c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <ADC_Enable+0x2c>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <ADC_Enable+0x2e>
 8003700:	2300      	movs	r3, #0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d13c      	bne.n	8003780 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <ADC_Enable+0xb8>)
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f043 0210 	orr.w	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	f043 0201 	orr.w	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e028      	b.n	8003782 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003740:	f7fe fc92 	bl	8002068 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003746:	e014      	b.n	8003772 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003748:	f7fe fc8e 	bl	8002068 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d90d      	bls.n	8003772 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e007      	b.n	8003782 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d1e3      	bne.n	8003748 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	8000003f 	.word	0x8000003f

08003790 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d108      	bne.n	80037bc <ADC_Disable+0x2c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <ADC_Disable+0x2c>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <ADC_Disable+0x2e>
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d040      	beq.n	8003844 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030d 	and.w	r3, r3, #13
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d10f      	bne.n	80037f0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0202 	orr.w	r2, r2, #2
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2203      	movs	r2, #3
 80037e6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80037e8:	f7fe fc3e 	bl	8002068 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037ee:	e022      	b.n	8003836 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f043 0210 	orr.w	r2, r3, #16
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e01c      	b.n	8003846 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800380c:	f7fe fc2c 	bl	8002068 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d90d      	bls.n	8003836 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f043 0210 	orr.w	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e007      	b.n	8003846 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d0e3      	beq.n	800380c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8093 	beq.w	800399c <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003884:	d12a      	bne.n	80038dc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800388a:	2b01      	cmp	r3, #1
 800388c:	d126      	bne.n	80038dc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003892:	2b01      	cmp	r3, #1
 8003894:	d122      	bne.n	80038dc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003896:	230c      	movs	r3, #12
 8003898:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800389a:	e014      	b.n	80038c6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4a42      	ldr	r2, [pc, #264]	; (80039a8 <ADC_ConversionStop+0x158>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d90d      	bls.n	80038c0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f043 0210 	orr.w	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e06e      	b.n	800399e <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3301      	adds	r3, #1
 80038c4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d1e3      	bne.n	800389c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2240      	movs	r2, #64	; 0x40
 80038da:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b60      	cmp	r3, #96	; 0x60
 80038e0:	d015      	beq.n	800390e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d10e      	bne.n	800390e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0210 	orr.w	r2, r2, #16
 800390c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b0c      	cmp	r3, #12
 8003912:	d015      	beq.n	8003940 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b08      	cmp	r3, #8
 8003920:	d10e      	bne.n	8003940 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0220 	orr.w	r2, r2, #32
 800393e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b60      	cmp	r3, #96	; 0x60
 8003944:	d004      	beq.n	8003950 <ADC_ConversionStop+0x100>
 8003946:	2b6c      	cmp	r3, #108	; 0x6c
 8003948:	d105      	bne.n	8003956 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800394a:	230c      	movs	r3, #12
 800394c:	617b      	str	r3, [r7, #20]
        break;
 800394e:	e005      	b.n	800395c <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003950:	2308      	movs	r3, #8
 8003952:	617b      	str	r3, [r7, #20]
        break;
 8003954:	e002      	b.n	800395c <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003956:	2304      	movs	r3, #4
 8003958:	617b      	str	r3, [r7, #20]
        break;
 800395a:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800395c:	f7fe fb84 	bl	8002068 <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003962:	e014      	b.n	800398e <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003964:	f7fe fb80 	bl	8002068 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b0b      	cmp	r3, #11
 8003970:	d90d      	bls.n	800398e <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f043 0210 	orr.w	r2, r3, #16
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e007      	b.n	800399e <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e3      	bne.n	8003964 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	000993ff 	.word	0x000993ff

080039ac <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_COMP_Init+0x22>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
 80039d2:	e05e      	b.n	8003a92 <HAL_COMP_Init+0xe6>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d4:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <HAL_COMP_Init+0xf0>)
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	4a30      	ldr	r2, [pc, #192]	; (8003a9c <HAL_COMP_Init+0xf0>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6193      	str	r3, [r2, #24]
 80039e0:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_COMP_Init+0xf0>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7fd ffa9 	bl	8001944 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0202 	bic.w	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1a      	ldr	r2, [r3, #32]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_COMP_Start+0x26>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
 8003aca:	e0c4      	b.n	8003c56 <HAL_COMP_Start+0x1b6>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	f040 80bc 	bne.w	8003c52 <HAL_COMP_Start+0x1b2>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a61      	ldr	r2, [pc, #388]	; (8003c64 <HAL_COMP_Start+0x1c4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d028      	beq.n	8003b36 <HAL_COMP_Start+0x96>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a5f      	ldr	r2, [pc, #380]	; (8003c68 <HAL_COMP_Start+0x1c8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d020      	beq.n	8003b30 <HAL_COMP_Start+0x90>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5e      	ldr	r2, [pc, #376]	; (8003c6c <HAL_COMP_Start+0x1cc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d018      	beq.n	8003b2a <HAL_COMP_Start+0x8a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a5c      	ldr	r2, [pc, #368]	; (8003c70 <HAL_COMP_Start+0x1d0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d010      	beq.n	8003b24 <HAL_COMP_Start+0x84>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5b      	ldr	r2, [pc, #364]	; (8003c74 <HAL_COMP_Start+0x1d4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d008      	beq.n	8003b1e <HAL_COMP_Start+0x7e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a59      	ldr	r2, [pc, #356]	; (8003c78 <HAL_COMP_Start+0x1d8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d101      	bne.n	8003b1a <HAL_COMP_Start+0x7a>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e00f      	b.n	8003b3a <HAL_COMP_Start+0x9a>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e00d      	b.n	8003b3a <HAL_COMP_Start+0x9a>
 8003b1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b22:	e00a      	b.n	8003b3a <HAL_COMP_Start+0x9a>
 8003b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b28:	e007      	b.n	8003b3a <HAL_COMP_Start+0x9a>
 8003b2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003b2e:	e004      	b.n	8003b3a <HAL_COMP_Start+0x9a>
 8003b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b34:	e001      	b.n	8003b3a <HAL_COMP_Start+0x9a>
 8003b36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b3a:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d077      	beq.n	8003c38 <HAL_COMP_Start+0x198>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d012      	beq.n	8003b7a <HAL_COMP_Start+0xda>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <HAL_COMP_Start+0xcc>
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b62:	4946      	ldr	r1, [pc, #280]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	628b      	str	r3, [r1, #40]	; 0x28
 8003b6a:	e01a      	b.n	8003ba2 <HAL_COMP_Start+0x102>
 8003b6c:	4b43      	ldr	r3, [pc, #268]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	4942      	ldr	r1, [pc, #264]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	608b      	str	r3, [r1, #8]
 8003b78:	e013      	b.n	8003ba2 <HAL_COMP_Start+0x102>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <HAL_COMP_Start+0xf4>
 8003b84:	4b3d      	ldr	r3, [pc, #244]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	493b      	ldr	r1, [pc, #236]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	628b      	str	r3, [r1, #40]	; 0x28
 8003b92:	e006      	b.n	8003ba2 <HAL_COMP_Start+0x102>
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	4937      	ldr	r1, [pc, #220]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d012      	beq.n	8003bd4 <HAL_COMP_Start+0x134>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d006      	beq.n	8003bc6 <HAL_COMP_Start+0x126>
 8003bb8:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	492f      	ldr	r1, [pc, #188]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003bc4:	e01a      	b.n	8003bfc <HAL_COMP_Start+0x15c>
 8003bc6:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	492c      	ldr	r1, [pc, #176]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60cb      	str	r3, [r1, #12]
 8003bd2:	e013      	b.n	8003bfc <HAL_COMP_Start+0x15c>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_COMP_Start+0x14e>
 8003bde:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	4925      	ldr	r1, [pc, #148]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003bec:	e006      	b.n	8003bfc <HAL_COMP_Start+0x15c>
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	4921      	ldr	r1, [pc, #132]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d006      	beq.n	8003c14 <HAL_COMP_Start+0x174>
 8003c06:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c0a:	491c      	ldr	r1, [pc, #112]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	624b      	str	r3, [r1, #36]	; 0x24
 8003c12:	e005      	b.n	8003c20 <HAL_COMP_Start+0x180>
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4918      	ldr	r1, [pc, #96]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_COMP_Start+0x192>
 8003c2a:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6353      	str	r3, [r2, #52]	; 0x34
 8003c30:	e002      	b.n	8003c38 <HAL_COMP_Start+0x198>
 8003c32:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <HAL_COMP_Start+0x1dc>)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003c50:	e001      	b.n	8003c56 <HAL_COMP_Start+0x1b6>
    }
    else
    {
      status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	4001001c 	.word	0x4001001c
 8003c68:	40010020 	.word	0x40010020
 8003c6c:	40010024 	.word	0x40010024
 8003c70:	40010028 	.word	0x40010028
 8003c74:	4001002c 	.word	0x4001002c
 8003c78:	40010030 	.word	0x40010030
 8003c7c:	40010400 	.word	0x40010400

08003c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cb2:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	60d3      	str	r3, [r2, #12]
}
 8003cb8:	bf00      	nop
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	f003 0307 	and.w	r3, r3, #7
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	e000ed00 	.word	0xe000ed00

08003ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	db0b      	blt.n	8003d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	f003 021f 	and.w	r2, r3, #31
 8003cfc:	4907      	ldr	r1, [pc, #28]	; (8003d1c <__NVIC_EnableIRQ+0x38>)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2001      	movs	r0, #1
 8003d06:	fa00 f202 	lsl.w	r2, r0, r2
 8003d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000e100 	.word	0xe000e100

08003d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	6039      	str	r1, [r7, #0]
 8003d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	db0a      	blt.n	8003d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	490c      	ldr	r1, [pc, #48]	; (8003d6c <__NVIC_SetPriority+0x4c>)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	0112      	lsls	r2, r2, #4
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	440b      	add	r3, r1
 8003d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d48:	e00a      	b.n	8003d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4908      	ldr	r1, [pc, #32]	; (8003d70 <__NVIC_SetPriority+0x50>)
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	3b04      	subs	r3, #4
 8003d58:	0112      	lsls	r2, r2, #4
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	761a      	strb	r2, [r3, #24]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	e000e100 	.word	0xe000e100
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b089      	sub	sp, #36	; 0x24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f1c3 0307 	rsb	r3, r3, #7
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	bf28      	it	cs
 8003d92:	2304      	movcs	r3, #4
 8003d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	2b06      	cmp	r3, #6
 8003d9c:	d902      	bls.n	8003da4 <NVIC_EncodePriority+0x30>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3b03      	subs	r3, #3
 8003da2:	e000      	b.n	8003da6 <NVIC_EncodePriority+0x32>
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43da      	mvns	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	401a      	ands	r2, r3
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc6:	43d9      	mvns	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dcc:	4313      	orrs	r3, r2
         );
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3724      	adds	r7, #36	; 0x24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dec:	d301      	bcc.n	8003df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dee:	2301      	movs	r3, #1
 8003df0:	e00f      	b.n	8003e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <SysTick_Config+0x40>)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dfa:	210f      	movs	r1, #15
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003e00:	f7ff ff8e 	bl	8003d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <SysTick_Config+0x40>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e0a:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <SysTick_Config+0x40>)
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	e000e010 	.word	0xe000e010

08003e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff29 	bl	8003c80 <__NVIC_SetPriorityGrouping>
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b086      	sub	sp, #24
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e48:	f7ff ff3e 	bl	8003cc8 <__NVIC_GetPriorityGrouping>
 8003e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	6978      	ldr	r0, [r7, #20]
 8003e54:	f7ff ff8e 	bl	8003d74 <NVIC_EncodePriority>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff5d 	bl	8003d20 <__NVIC_SetPriority>
}
 8003e66:	bf00      	nop
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	4603      	mov	r3, r0
 8003e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ff31 	bl	8003ce4 <__NVIC_EnableIRQ>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff ffa2 	bl	8003ddc <SysTick_Config>
 8003e98:	4603      	mov	r3, r0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e014      	b.n	8003ede <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	791b      	ldrb	r3, [r3, #4]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d105      	bne.n	8003eca <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7fd fd81 	bl	80019cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003ee6:	b480      	push	{r7}
 8003ee8:	b087      	sub	sp, #28
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d105      	bne.n	8003f10 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	e004      	b.n	8003f1a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	3314      	adds	r3, #20
 8003f18:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	795b      	ldrb	r3, [r3, #5]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_DAC_Start+0x16>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e039      	b.n	8003fba <HAL_DAC_Start+0x8a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6819      	ldr	r1, [r3, #0]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10f      	bne.n	8003f8c <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003f76:	2b3c      	cmp	r3, #60	; 0x3c
 8003f78:	d118      	bne.n	8003fac <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	e00f      	b.n	8003fac <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f96:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8003f9a:	d107      	bne.n	8003fac <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0202 	orr.w	r2, r2, #2
 8003faa:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b087      	sub	sp, #28
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	795b      	ldrb	r3, [r3, #5]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_DAC_ConfigChannel+0x20>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e036      	b.n	8004054 <HAL_DAC_ConfigChannel+0x8e>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ffa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4013      	ands	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	22c0      	movs	r2, #192	; 0xc0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43da      	mvns	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	400a      	ands	r2, r1
 8004044:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e037      	b.n	80040e6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800408c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004090:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800409a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f9b7 	bl	800443c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}  
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_DMA_Start_IT+0x20>
 800410a:	2302      	movs	r3, #2
 800410c:	e04a      	b.n	80041a4 <HAL_DMA_Start_IT+0xb6>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800411c:	2b01      	cmp	r3, #1
 800411e:	d13a      	bne.n	8004196 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f94b 	bl	80043e0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 020e 	orr.w	r2, r2, #14
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e00f      	b.n	8004184 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 020a 	orr.w	r2, r2, #10
 8004172:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e005      	b.n	80041a2 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800419e:	2302      	movs	r3, #2
 80041a0:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
} 
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d008      	beq.n	80041d0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2204      	movs	r2, #4
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e020      	b.n	8004212 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 020e 	bic.w	r2, r2, #14
 80041de:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f202 	lsl.w	r2, r1, r2
 80041fe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004230:	2b02      	cmp	r3, #2
 8004232:	d005      	beq.n	8004240 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2204      	movs	r2, #4
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
 800423e:	e027      	b.n	8004290 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 020e 	bic.w	r2, r2, #14
 800424e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f202 	lsl.w	r2, r1, r2
 800426e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
    } 
  }
  return status;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2204      	movs	r2, #4
 80042b8:	409a      	lsls	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d024      	beq.n	800430c <HAL_DMA_IRQHandler+0x72>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01f      	beq.n	800430c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d107      	bne.n	80042ea <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0204 	bic.w	r2, r2, #4
 80042e8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	2104      	movs	r1, #4
 80042f4:	fa01 f202 	lsl.w	r2, r1, r2
 80042f8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d06a      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800430a:	e065      	b.n	80043d8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	2202      	movs	r2, #2
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02c      	beq.n	8004376 <HAL_DMA_IRQHandler+0xdc>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d027      	beq.n	8004376 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020a 	bic.w	r2, r2, #10
 8004342:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	2102      	movs	r1, #2
 8004356:	fa01 f202 	lsl.w	r2, r1, r2
 800435a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d035      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004374:	e030      	b.n	80043d8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	2208      	movs	r2, #8
 800437c:	409a      	lsls	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4013      	ands	r3, r2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d028      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x13e>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d023      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 020e 	bic.w	r2, r2, #14
 800439e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	2101      	movs	r1, #1
 80043aa:	fa01 f202 	lsl.w	r2, r1, r2
 80043ae:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
    }
  }
}  
 80043d6:	e7ff      	b.n	80043d8 <HAL_DMA_IRQHandler+0x13e>
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	2101      	movs	r1, #1
 80043f8:	fa01 f202 	lsl.w	r2, r1, r2
 80043fc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b10      	cmp	r3, #16
 800440c:	d108      	bne.n	8004420 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800441e:	e007      	b.n	8004430 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	60da      	str	r2, [r3, #12]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	4b14      	ldr	r3, [pc, #80]	; (800449c <DMA_CalcBaseAndBitshift+0x60>)
 800444c:	429a      	cmp	r2, r3
 800444e:	d80f      	bhi.n	8004470 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <DMA_CalcBaseAndBitshift+0x64>)
 8004458:	4413      	add	r3, r2
 800445a:	4a12      	ldr	r2, [pc, #72]	; (80044a4 <DMA_CalcBaseAndBitshift+0x68>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	009a      	lsls	r2, r3, #2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <DMA_CalcBaseAndBitshift+0x6c>)
 800446c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800446e:	e00e      	b.n	800448e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <DMA_CalcBaseAndBitshift+0x70>)
 8004478:	4413      	add	r3, r2
 800447a:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <DMA_CalcBaseAndBitshift+0x68>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	009a      	lsls	r2, r3, #2
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <DMA_CalcBaseAndBitshift+0x74>)
 800448c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40020407 	.word	0x40020407
 80044a0:	bffdfff8 	.word	0xbffdfff8
 80044a4:	cccccccd 	.word	0xcccccccd
 80044a8:	40020000 	.word	0x40020000
 80044ac:	bffdfbf8 	.word	0xbffdfbf8
 80044b0:	40020400 	.word	0x40020400

080044b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044c2:	e160      	b.n	8004786 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	2101      	movs	r1, #1
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	4013      	ands	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8152 	beq.w	8004780 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d003      	beq.n	80044ec <HAL_GPIO_Init+0x38>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b12      	cmp	r3, #18
 80044ea:	d123      	bne.n	8004534 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	08da      	lsrs	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3208      	adds	r2, #8
 80044f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	220f      	movs	r2, #15
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4013      	ands	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	08da      	lsrs	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3208      	adds	r2, #8
 800452e:	6939      	ldr	r1, [r7, #16]
 8004530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	2203      	movs	r2, #3
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4013      	ands	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0203 	and.w	r2, r3, #3
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d00b      	beq.n	8004588 <HAL_GPIO_Init+0xd4>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d007      	beq.n	8004588 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800457c:	2b11      	cmp	r3, #17
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b12      	cmp	r3, #18
 8004586:	d130      	bne.n	80045ea <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4013      	ands	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045be:	2201      	movs	r2, #1
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	f003 0201 	and.w	r2, r3, #1
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	2203      	movs	r2, #3
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4013      	ands	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80ac 	beq.w	8004780 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004628:	4b5e      	ldr	r3, [pc, #376]	; (80047a4 <HAL_GPIO_Init+0x2f0>)
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	4a5d      	ldr	r2, [pc, #372]	; (80047a4 <HAL_GPIO_Init+0x2f0>)
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6193      	str	r3, [r2, #24]
 8004634:	4b5b      	ldr	r3, [pc, #364]	; (80047a4 <HAL_GPIO_Init+0x2f0>)
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004640:	4a59      	ldr	r2, [pc, #356]	; (80047a8 <HAL_GPIO_Init+0x2f4>)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	3302      	adds	r3, #2
 8004648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	220f      	movs	r2, #15
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800466a:	d025      	beq.n	80046b8 <HAL_GPIO_Init+0x204>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a4f      	ldr	r2, [pc, #316]	; (80047ac <HAL_GPIO_Init+0x2f8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d01f      	beq.n	80046b4 <HAL_GPIO_Init+0x200>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a4e      	ldr	r2, [pc, #312]	; (80047b0 <HAL_GPIO_Init+0x2fc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d019      	beq.n	80046b0 <HAL_GPIO_Init+0x1fc>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a4d      	ldr	r2, [pc, #308]	; (80047b4 <HAL_GPIO_Init+0x300>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_GPIO_Init+0x1f8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a4c      	ldr	r2, [pc, #304]	; (80047b8 <HAL_GPIO_Init+0x304>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00d      	beq.n	80046a8 <HAL_GPIO_Init+0x1f4>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a4b      	ldr	r2, [pc, #300]	; (80047bc <HAL_GPIO_Init+0x308>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <HAL_GPIO_Init+0x1f0>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a4a      	ldr	r2, [pc, #296]	; (80047c0 <HAL_GPIO_Init+0x30c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <HAL_GPIO_Init+0x1ec>
 800469c:	2306      	movs	r3, #6
 800469e:	e00c      	b.n	80046ba <HAL_GPIO_Init+0x206>
 80046a0:	2307      	movs	r3, #7
 80046a2:	e00a      	b.n	80046ba <HAL_GPIO_Init+0x206>
 80046a4:	2305      	movs	r3, #5
 80046a6:	e008      	b.n	80046ba <HAL_GPIO_Init+0x206>
 80046a8:	2304      	movs	r3, #4
 80046aa:	e006      	b.n	80046ba <HAL_GPIO_Init+0x206>
 80046ac:	2303      	movs	r3, #3
 80046ae:	e004      	b.n	80046ba <HAL_GPIO_Init+0x206>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e002      	b.n	80046ba <HAL_GPIO_Init+0x206>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_GPIO_Init+0x206>
 80046b8:	2300      	movs	r3, #0
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	f002 0203 	and.w	r2, r2, #3
 80046c0:	0092      	lsls	r2, r2, #2
 80046c2:	4093      	lsls	r3, r2
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046ca:	4937      	ldr	r1, [pc, #220]	; (80047a8 <HAL_GPIO_Init+0x2f4>)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	089b      	lsrs	r3, r3, #2
 80046d0:	3302      	adds	r3, #2
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046d8:	4b3a      	ldr	r3, [pc, #232]	; (80047c4 <HAL_GPIO_Init+0x310>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	43db      	mvns	r3, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80046fc:	4a31      	ldr	r2, [pc, #196]	; (80047c4 <HAL_GPIO_Init+0x310>)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004702:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <HAL_GPIO_Init+0x310>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	43db      	mvns	r3, r3
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4013      	ands	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004726:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <HAL_GPIO_Init+0x310>)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <HAL_GPIO_Init+0x310>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	43db      	mvns	r3, r3
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4013      	ands	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004750:	4a1c      	ldr	r2, [pc, #112]	; (80047c4 <HAL_GPIO_Init+0x310>)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004756:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <HAL_GPIO_Init+0x310>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	43db      	mvns	r3, r3
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4013      	ands	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800477a:	4a12      	ldr	r2, [pc, #72]	; (80047c4 <HAL_GPIO_Init+0x310>)
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	3301      	adds	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	f47f ae97 	bne.w	80044c4 <HAL_GPIO_Init+0x10>
  }
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40010000 	.word	0x40010000
 80047ac:	48000400 	.word	0x48000400
 80047b0:	48000800 	.word	0x48000800
 80047b4:	48000c00 	.word	0x48000c00
 80047b8:	48001000 	.word	0x48001000
 80047bc:	48001400 	.word	0x48001400
 80047c0:	48001800 	.word	0x48001800
 80047c4:	40010400 	.word	0x40010400

080047c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	1d3b      	adds	r3, r7, #4
 80047d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047d4:	1d3b      	adds	r3, r7, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f000 bf01 	b.w	80055e4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8160 	beq.w	8004ab2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047f2:	4bae      	ldr	r3, [pc, #696]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d00c      	beq.n	8004818 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047fe:	4bab      	ldr	r3, [pc, #684]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b08      	cmp	r3, #8
 8004808:	d159      	bne.n	80048be <HAL_RCC_OscConfig+0xf6>
 800480a:	4ba8      	ldr	r3, [pc, #672]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004816:	d152      	bne.n	80048be <HAL_RCC_OscConfig+0xf6>
 8004818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800482c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	b2db      	uxtb	r3, r3
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <HAL_RCC_OscConfig+0x82>
 8004844:	4b99      	ldr	r3, [pc, #612]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0xae>
 800484a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800484e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800485e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004862:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004866:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004872:	4b8e      	ldr	r3, [pc, #568]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800487a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800487e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004882:	fa92 f2a2 	rbit	r2, r2
 8004886:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800488a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800488e:	fab2 f282 	clz	r2, r2
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	f042 0220 	orr.w	r2, r2, #32
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	f002 021f 	and.w	r2, r2, #31
 800489e:	2101      	movs	r1, #1
 80048a0:	fa01 f202 	lsl.w	r2, r1, r2
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8102 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x2e8>
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f040 80fc 	bne.w	8004ab0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	f000 be93 	b.w	80055e4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_OscConfig+0x110>
 80048ca:	4b78      	ldr	r3, [pc, #480]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a77      	ldr	r2, [pc, #476]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e030      	b.n	800493a <HAL_RCC_OscConfig+0x172>
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x134>
 80048e2:	4b72      	ldr	r3, [pc, #456]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a71      	ldr	r2, [pc, #452]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 80048e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b6f      	ldr	r3, [pc, #444]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a6e      	ldr	r2, [pc, #440]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 80048f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e01e      	b.n	800493a <HAL_RCC_OscConfig+0x172>
 80048fc:	1d3b      	adds	r3, r7, #4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004906:	d10c      	bne.n	8004922 <HAL_RCC_OscConfig+0x15a>
 8004908:	4b68      	ldr	r3, [pc, #416]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a67      	ldr	r2, [pc, #412]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 800490e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b65      	ldr	r3, [pc, #404]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a64      	ldr	r2, [pc, #400]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 800491a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e00b      	b.n	800493a <HAL_RCC_OscConfig+0x172>
 8004922:	4b62      	ldr	r3, [pc, #392]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a61      	ldr	r2, [pc, #388]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b5f      	ldr	r3, [pc, #380]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5e      	ldr	r2, [pc, #376]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004938:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d059      	beq.n	80049f8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fd fb90 	bl	8002068 <HAL_GetTick>
 8004948:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494c:	e00a      	b.n	8004964 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494e:	f7fd fb8b 	bl	8002068 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d902      	bls.n	8004964 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	f000 be40 	b.w	80055e4 <HAL_RCC_OscConfig+0xe1c>
 8004964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004968:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004970:	fa93 f3a3 	rbit	r3, r3
 8004974:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004978:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	b2db      	uxtb	r3, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d102      	bne.n	8004996 <HAL_RCC_OscConfig+0x1ce>
 8004990:	4b46      	ldr	r3, [pc, #280]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	e015      	b.n	80049c2 <HAL_RCC_OscConfig+0x1fa>
 8004996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800499a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80049aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80049b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80049b6:	fa93 f3a3 	rbit	r3, r3
 80049ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80049be:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80049ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80049ce:	fa92 f2a2 	rbit	r2, r2
 80049d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80049d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80049da:	fab2 f282 	clz	r2, r2
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	f042 0220 	orr.w	r2, r2, #32
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	f002 021f 	and.w	r2, r2, #31
 80049ea:	2101      	movs	r1, #1
 80049ec:	fa01 f202 	lsl.w	r2, r1, r2
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0ab      	beq.n	800494e <HAL_RCC_OscConfig+0x186>
 80049f6:	e05c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fd fb36 	bl	8002068 <HAL_GetTick>
 80049fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a00:	e00a      	b.n	8004a18 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a02:	f7fd fb31 	bl	8002068 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b64      	cmp	r3, #100	; 0x64
 8004a10:	d902      	bls.n	8004a18 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	f000 bde6 	b.w	80055e4 <HAL_RCC_OscConfig+0xe1c>
 8004a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a1c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004a24:	fa93 f3a3 	rbit	r3, r3
 8004a28:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004a2c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a30:	fab3 f383 	clz	r3, r3
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d102      	bne.n	8004a4a <HAL_RCC_OscConfig+0x282>
 8004a44:	4b19      	ldr	r3, [pc, #100]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	e015      	b.n	8004a76 <HAL_RCC_OscConfig+0x2ae>
 8004a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004a56:	fa93 f3a3 	rbit	r3, r3
 8004a5a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a62:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a66:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004a6a:	fa93 f3a3 	rbit	r3, r3
 8004a6e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a72:	4b0e      	ldr	r3, [pc, #56]	; (8004aac <HAL_RCC_OscConfig+0x2e4>)
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a7a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004a7e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004a82:	fa92 f2a2 	rbit	r2, r2
 8004a86:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004a8a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a8e:	fab2 f282 	clz	r2, r2
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	f042 0220 	orr.w	r2, r2, #32
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	f002 021f 	and.w	r2, r2, #31
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ab      	bne.n	8004a02 <HAL_RCC_OscConfig+0x23a>
 8004aaa:	e002      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2ea>
 8004aac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8170 	beq.w	8004da2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ac2:	4bd0      	ldr	r3, [pc, #832]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00c      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ace:	4bcd      	ldr	r3, [pc, #820]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d16d      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x3ee>
 8004ada:	4bca      	ldr	r3, [pc, #808]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae6:	d166      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x3ee>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004af2:	fa93 f3a3 	rbit	r3, r3
 8004af6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004afa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d102      	bne.n	8004b18 <HAL_RCC_OscConfig+0x350>
 8004b12:	4bbc      	ldr	r3, [pc, #752]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	e013      	b.n	8004b40 <HAL_RCC_OscConfig+0x378>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004b22:	fa93 f3a3 	rbit	r3, r3
 8004b26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004b30:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b3c:	4bb1      	ldr	r3, [pc, #708]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2202      	movs	r2, #2
 8004b42:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004b46:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004b4a:	fa92 f2a2 	rbit	r2, r2
 8004b4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004b52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b56:	fab2 f282 	clz	r2, r2
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	f042 0220 	orr.w	r2, r2, #32
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	f002 021f 	and.w	r2, r2, #31
 8004b66:	2101      	movs	r1, #1
 8004b68:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <HAL_RCC_OscConfig+0x3ba>
 8004b72:	1d3b      	adds	r3, r7, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d002      	beq.n	8004b82 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f000 bd31 	b.w	80055e4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b82:	4ba0      	ldr	r3, [pc, #640]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8a:	1d3b      	adds	r3, r7, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	21f8      	movs	r1, #248	; 0xf8
 8004b92:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004b9a:	fa91 f1a1 	rbit	r1, r1
 8004b9e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004ba2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004ba6:	fab1 f181 	clz	r1, r1
 8004baa:	b2c9      	uxtb	r1, r1
 8004bac:	408b      	lsls	r3, r1
 8004bae:	4995      	ldr	r1, [pc, #596]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb4:	e0f5      	b.n	8004da2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8085 	beq.w	8004ccc <HAL_RCC_OscConfig+0x504>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004bd4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd8:	fab3 f383 	clz	r3, r3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004be2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	461a      	mov	r2, r3
 8004bea:	2301      	movs	r3, #1
 8004bec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bee:	f7fd fa3b 	bl	8002068 <HAL_GetTick>
 8004bf2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf8:	f7fd fa36 	bl	8002068 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d902      	bls.n	8004c0e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	f000 bceb 	b.w	80055e4 <HAL_RCC_OscConfig+0xe1c>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c14:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004c18:	fa93 f3a3 	rbit	r3, r3
 8004c1c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004c20:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c24:	fab3 f383 	clz	r3, r3
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d102      	bne.n	8004c3e <HAL_RCC_OscConfig+0x476>
 8004c38:	4b72      	ldr	r3, [pc, #456]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	e013      	b.n	8004c66 <HAL_RCC_OscConfig+0x49e>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c44:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c48:	fa93 f3a3 	rbit	r3, r3
 8004c4c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004c50:	2302      	movs	r3, #2
 8004c52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c56:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004c5a:	fa93 f3a3 	rbit	r3, r3
 8004c5e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c62:	4b68      	ldr	r3, [pc, #416]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2202      	movs	r2, #2
 8004c68:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004c6c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c70:	fa92 f2a2 	rbit	r2, r2
 8004c74:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004c78:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c7c:	fab2 f282 	clz	r2, r2
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	f042 0220 	orr.w	r2, r2, #32
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	f002 021f 	and.w	r2, r2, #31
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0af      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c98:	4b5a      	ldr	r3, [pc, #360]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca0:	1d3b      	adds	r3, r7, #4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	21f8      	movs	r1, #248	; 0xf8
 8004ca8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cac:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004cb0:	fa91 f1a1 	rbit	r1, r1
 8004cb4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004cb8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004cbc:	fab1 f181 	clz	r1, r1
 8004cc0:	b2c9      	uxtb	r1, r1
 8004cc2:	408b      	lsls	r3, r1
 8004cc4:	494f      	ldr	r1, [pc, #316]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]
 8004cca:	e06a      	b.n	8004da2 <HAL_RCC_OscConfig+0x5da>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004cd6:	fa93 f3a3 	rbit	r3, r3
 8004cda:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004cde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fd f9b6 	bl	8002068 <HAL_GetTick>
 8004cfc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d00:	e00a      	b.n	8004d18 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d02:	f7fd f9b1 	bl	8002068 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d902      	bls.n	8004d18 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	f000 bc66 	b.w	80055e4 <HAL_RCC_OscConfig+0xe1c>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d22:	fa93 f3a3 	rbit	r3, r3
 8004d26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004d2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2e:	fab3 f383 	clz	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d102      	bne.n	8004d48 <HAL_RCC_OscConfig+0x580>
 8004d42:	4b30      	ldr	r3, [pc, #192]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	e013      	b.n	8004d70 <HAL_RCC_OscConfig+0x5a8>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d52:	fa93 f3a3 	rbit	r3, r3
 8004d56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d64:	fa93 f3a3 	rbit	r3, r3
 8004d68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d6c:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <HAL_RCC_OscConfig+0x63c>)
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2202      	movs	r2, #2
 8004d72:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004d76:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004d7a:	fa92 f2a2 	rbit	r2, r2
 8004d7e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004d82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d86:	fab2 f282 	clz	r2, r2
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	f042 0220 	orr.w	r2, r2, #32
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	f002 021f 	and.w	r2, r2, #31
 8004d96:	2101      	movs	r1, #1
 8004d98:	fa01 f202 	lsl.w	r2, r1, r2
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1af      	bne.n	8004d02 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da2:	1d3b      	adds	r3, r7, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80da 	beq.w	8004f66 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004db2:	1d3b      	adds	r3, r7, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d069      	beq.n	8004e90 <HAL_RCC_OscConfig+0x6c8>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004dce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <HAL_RCC_OscConfig+0x640>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	461a      	mov	r2, r3
 8004de2:	2301      	movs	r3, #1
 8004de4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de6:	f7fd f93f 	bl	8002068 <HAL_GetTick>
 8004dea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dee:	e00d      	b.n	8004e0c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df0:	f7fd f93a 	bl	8002068 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d905      	bls.n	8004e0c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e3ef      	b.n	80055e4 <HAL_RCC_OscConfig+0xe1c>
 8004e04:	40021000 	.word	0x40021000
 8004e08:	10908120 	.word	0x10908120
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e16:	fa93 f2a3 	rbit	r2, r3
 8004e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004e24:	2202      	movs	r2, #2
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	fa93 f2a3 	rbit	r2, r3
 8004e32:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	fa93 f2a3 	rbit	r2, r3
 8004e4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004e4e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e50:	4ba4      	ldr	r3, [pc, #656]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8004e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e54:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e58:	2102      	movs	r1, #2
 8004e5a:	6019      	str	r1, [r3, #0]
 8004e5c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	fa93 f1a3 	rbit	r1, r3
 8004e66:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e6a:	6019      	str	r1, [r3, #0]
  return result;
 8004e6c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	fab3 f383 	clz	r3, r3
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	2101      	movs	r1, #1
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0b0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x628>
 8004e8e:	e06a      	b.n	8004f66 <HAL_RCC_OscConfig+0x79e>
 8004e90:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	fa93 f2a3 	rbit	r2, r3
 8004ea2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004ea6:	601a      	str	r2, [r3, #0]
  return result;
 8004ea8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004eac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4b8c      	ldr	r3, [pc, #560]	; (80050e8 <HAL_RCC_OscConfig+0x920>)
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec2:	f7fd f8d1 	bl	8002068 <HAL_GetTick>
 8004ec6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eca:	e009      	b.n	8004ee0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ecc:	f7fd f8cc 	bl	8002068 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e381      	b.n	80055e4 <HAL_RCC_OscConfig+0xe1c>
 8004ee0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	fa93 f2a3 	rbit	r2, r3
 8004ef2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004efc:	2202      	movs	r2, #2
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	fa93 f2a3 	rbit	r2, r3
 8004f0a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004f14:	2202      	movs	r2, #2
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	fa93 f2a3 	rbit	r2, r3
 8004f22:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004f26:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f28:	4b6e      	ldr	r3, [pc, #440]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8004f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f30:	2102      	movs	r1, #2
 8004f32:	6019      	str	r1, [r3, #0]
 8004f34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	fa93 f1a3 	rbit	r1, r3
 8004f3e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f42:	6019      	str	r1, [r3, #0]
  return result;
 8004f44:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1b2      	bne.n	8004ecc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f66:	1d3b      	adds	r3, r7, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8157 	beq.w	8005224 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f76:	2300      	movs	r3, #0
 8004f78:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7c:	4b59      	ldr	r3, [pc, #356]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d112      	bne.n	8004fae <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f88:	4b56      	ldr	r3, [pc, #344]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	4a55      	ldr	r2, [pc, #340]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8004f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f92:	61d3      	str	r3, [r2, #28]
 8004f94:	4b53      	ldr	r3, [pc, #332]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004f9c:	f107 030c 	add.w	r3, r7, #12
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	f107 030c 	add.w	r3, r7, #12
 8004fa6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fae:	4b4f      	ldr	r3, [pc, #316]	; (80050ec <HAL_RCC_OscConfig+0x924>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d11a      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fba:	4b4c      	ldr	r3, [pc, #304]	; (80050ec <HAL_RCC_OscConfig+0x924>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a4b      	ldr	r2, [pc, #300]	; (80050ec <HAL_RCC_OscConfig+0x924>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc6:	f7fd f84f 	bl	8002068 <HAL_GetTick>
 8004fca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fce:	e009      	b.n	8004fe4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd0:	f7fd f84a 	bl	8002068 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b64      	cmp	r3, #100	; 0x64
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e2ff      	b.n	80055e4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	4b41      	ldr	r3, [pc, #260]	; (80050ec <HAL_RCC_OscConfig+0x924>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ef      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d106      	bne.n	8005008 <HAL_RCC_OscConfig+0x840>
 8004ffa:	4b3a      	ldr	r3, [pc, #232]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	4a39      	ldr	r2, [pc, #228]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6213      	str	r3, [r2, #32]
 8005006:	e02f      	b.n	8005068 <HAL_RCC_OscConfig+0x8a0>
 8005008:	1d3b      	adds	r3, r7, #4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10c      	bne.n	800502c <HAL_RCC_OscConfig+0x864>
 8005012:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	4a33      	ldr	r2, [pc, #204]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	6213      	str	r3, [r2, #32]
 800501e:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	4a30      	ldr	r2, [pc, #192]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	6213      	str	r3, [r2, #32]
 800502a:	e01d      	b.n	8005068 <HAL_RCC_OscConfig+0x8a0>
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b05      	cmp	r3, #5
 8005034:	d10c      	bne.n	8005050 <HAL_RCC_OscConfig+0x888>
 8005036:	4b2b      	ldr	r3, [pc, #172]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	4a2a      	ldr	r2, [pc, #168]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 800503c:	f043 0304 	orr.w	r3, r3, #4
 8005040:	6213      	str	r3, [r2, #32]
 8005042:	4b28      	ldr	r3, [pc, #160]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	4a27      	ldr	r2, [pc, #156]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	6213      	str	r3, [r2, #32]
 800504e:	e00b      	b.n	8005068 <HAL_RCC_OscConfig+0x8a0>
 8005050:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	6213      	str	r3, [r2, #32]
 800505c:	4b21      	ldr	r3, [pc, #132]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	4a20      	ldr	r2, [pc, #128]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 8005062:	f023 0304 	bic.w	r3, r3, #4
 8005066:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005068:	1d3b      	adds	r3, r7, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d06a      	beq.n	8005148 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005072:	f7fc fff9 	bl	8002068 <HAL_GetTick>
 8005076:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507a:	e00b      	b.n	8005094 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fc fff4 	bl	8002068 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	f241 3288 	movw	r2, #5000	; 0x1388
 800508c:	4293      	cmp	r3, r2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e2a7      	b.n	80055e4 <HAL_RCC_OscConfig+0xe1c>
 8005094:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005098:	2202      	movs	r2, #2
 800509a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	fa93 f2a3 	rbit	r2, r3
 80050a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80050b0:	2202      	movs	r2, #2
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	fa93 f2a3 	rbit	r2, r3
 80050be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050c2:	601a      	str	r2, [r3, #0]
  return result;
 80050c4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ca:	fab3 f383 	clz	r3, r3
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f043 0302 	orr.w	r3, r3, #2
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d108      	bne.n	80050f0 <HAL_RCC_OscConfig+0x928>
 80050de:	4b01      	ldr	r3, [pc, #4]	; (80050e4 <HAL_RCC_OscConfig+0x91c>)
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	e013      	b.n	800510c <HAL_RCC_OscConfig+0x944>
 80050e4:	40021000 	.word	0x40021000
 80050e8:	10908120 	.word	0x10908120
 80050ec:	40007000 	.word	0x40007000
 80050f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050f4:	2202      	movs	r2, #2
 80050f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	fa93 f2a3 	rbit	r2, r3
 8005102:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	4bc0      	ldr	r3, [pc, #768]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005110:	2102      	movs	r1, #2
 8005112:	6011      	str	r1, [r2, #0]
 8005114:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	fa92 f1a2 	rbit	r1, r2
 800511e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005122:	6011      	str	r1, [r2, #0]
  return result;
 8005124:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	fab2 f282 	clz	r2, r2
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	f002 021f 	and.w	r2, r2, #31
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f202 	lsl.w	r2, r1, r2
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d09a      	beq.n	800507c <HAL_RCC_OscConfig+0x8b4>
 8005146:	e063      	b.n	8005210 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005148:	f7fc ff8e 	bl	8002068 <HAL_GetTick>
 800514c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005150:	e00b      	b.n	800516a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fc ff89 	bl	8002068 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e23c      	b.n	80055e4 <HAL_RCC_OscConfig+0xe1c>
 800516a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800516e:	2202      	movs	r2, #2
 8005170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005172:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	fa93 f2a3 	rbit	r2, r3
 800517c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005186:	2202      	movs	r2, #2
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	fa93 f2a3 	rbit	r2, r3
 8005194:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005198:	601a      	str	r2, [r3, #0]
  return result;
 800519a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800519e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a0:	fab3 f383 	clz	r3, r3
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f043 0302 	orr.w	r3, r3, #2
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d102      	bne.n	80051ba <HAL_RCC_OscConfig+0x9f2>
 80051b4:	4b95      	ldr	r3, [pc, #596]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	e00d      	b.n	80051d6 <HAL_RCC_OscConfig+0xa0e>
 80051ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80051be:	2202      	movs	r2, #2
 80051c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	fa93 f2a3 	rbit	r2, r3
 80051cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	4b8e      	ldr	r3, [pc, #568]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80051da:	2102      	movs	r1, #2
 80051dc:	6011      	str	r1, [r2, #0]
 80051de:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	fa92 f1a2 	rbit	r1, r2
 80051e8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80051ec:	6011      	str	r1, [r2, #0]
  return result;
 80051ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	fab2 f282 	clz	r2, r2
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	f002 021f 	and.w	r2, r2, #31
 8005204:	2101      	movs	r1, #1
 8005206:	fa01 f202 	lsl.w	r2, r1, r2
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1a0      	bne.n	8005152 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005210:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005214:	2b01      	cmp	r3, #1
 8005216:	d105      	bne.n	8005224 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005218:	4b7c      	ldr	r3, [pc, #496]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	4a7b      	ldr	r2, [pc, #492]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 800521e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005222:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 81d9 	beq.w	80055e2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005230:	4b76      	ldr	r3, [pc, #472]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f003 030c 	and.w	r3, r3, #12
 8005238:	2b08      	cmp	r3, #8
 800523a:	f000 81a6 	beq.w	800558a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	2b02      	cmp	r3, #2
 8005246:	f040 811e 	bne.w	8005486 <HAL_RCC_OscConfig+0xcbe>
 800524a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800524e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005254:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	fa93 f2a3 	rbit	r2, r3
 800525e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005262:	601a      	str	r2, [r3, #0]
  return result;
 8005264:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005268:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005274:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	461a      	mov	r2, r3
 800527c:	2300      	movs	r3, #0
 800527e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005280:	f7fc fef2 	bl	8002068 <HAL_GetTick>
 8005284:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005288:	e009      	b.n	800529e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528a:	f7fc feed 	bl	8002068 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e1a2      	b.n	80055e4 <HAL_RCC_OscConfig+0xe1c>
 800529e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80052a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	fa93 f2a3 	rbit	r2, r3
 80052b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80052b6:	601a      	str	r2, [r3, #0]
  return result;
 80052b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80052bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052be:	fab3 f383 	clz	r3, r3
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d102      	bne.n	80052d8 <HAL_RCC_OscConfig+0xb10>
 80052d2:	4b4e      	ldr	r3, [pc, #312]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	e01b      	b.n	8005310 <HAL_RCC_OscConfig+0xb48>
 80052d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	fa93 f2a3 	rbit	r2, r3
 80052ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80052f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	fa93 f2a3 	rbit	r2, r3
 8005306:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	4b3f      	ldr	r3, [pc, #252]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005314:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005318:	6011      	str	r1, [r2, #0]
 800531a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	fa92 f1a2 	rbit	r1, r2
 8005324:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005328:	6011      	str	r1, [r2, #0]
  return result;
 800532a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	fab2 f282 	clz	r2, r2
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	f042 0220 	orr.w	r2, r2, #32
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	f002 021f 	and.w	r2, r2, #31
 8005340:	2101      	movs	r1, #1
 8005342:	fa01 f202 	lsl.w	r2, r1, r2
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d19e      	bne.n	800528a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800534c:	4b2f      	ldr	r3, [pc, #188]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	f023 020f 	bic.w	r2, r3, #15
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	492c      	ldr	r1, [pc, #176]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 800535c:	4313      	orrs	r3, r2
 800535e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005360:	4b2a      	ldr	r3, [pc, #168]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005368:	1d3b      	adds	r3, r7, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6a19      	ldr	r1, [r3, #32]
 800536e:	1d3b      	adds	r3, r7, #4
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	430b      	orrs	r3, r1
 8005376:	4925      	ldr	r1, [pc, #148]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 8005378:	4313      	orrs	r3, r2
 800537a:	604b      	str	r3, [r1, #4]
 800537c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005386:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	fa93 f2a3 	rbit	r2, r3
 8005390:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005394:	601a      	str	r2, [r3, #0]
  return result;
 8005396:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800539a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800539c:	fab3 f383 	clz	r3, r3
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	461a      	mov	r2, r3
 80053ae:	2301      	movs	r3, #1
 80053b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b2:	f7fc fe59 	bl	8002068 <HAL_GetTick>
 80053b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053ba:	e009      	b.n	80053d0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fc fe54 	bl	8002068 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e109      	b.n	80055e4 <HAL_RCC_OscConfig+0xe1c>
 80053d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80053d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	fa93 f2a3 	rbit	r2, r3
 80053e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053e8:	601a      	str	r2, [r3, #0]
  return result;
 80053ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053f0:	fab3 f383 	clz	r3, r3
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d105      	bne.n	8005410 <HAL_RCC_OscConfig+0xc48>
 8005404:	4b01      	ldr	r3, [pc, #4]	; (800540c <HAL_RCC_OscConfig+0xc44>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	e01e      	b.n	8005448 <HAL_RCC_OscConfig+0xc80>
 800540a:	bf00      	nop
 800540c:	40021000 	.word	0x40021000
 8005410:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	fa93 f2a3 	rbit	r2, r3
 8005424:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800542e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	fa93 f2a3 	rbit	r2, r3
 800543e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	4b6a      	ldr	r3, [pc, #424]	; (80055f0 <HAL_RCC_OscConfig+0xe28>)
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800544c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005450:	6011      	str	r1, [r2, #0]
 8005452:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	fa92 f1a2 	rbit	r1, r2
 800545c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005460:	6011      	str	r1, [r2, #0]
  return result;
 8005462:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	fab2 f282 	clz	r2, r2
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	f042 0220 	orr.w	r2, r2, #32
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	f002 021f 	and.w	r2, r2, #31
 8005478:	2101      	movs	r1, #1
 800547a:	fa01 f202 	lsl.w	r2, r1, r2
 800547e:	4013      	ands	r3, r2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d09b      	beq.n	80053bc <HAL_RCC_OscConfig+0xbf4>
 8005484:	e0ad      	b.n	80055e2 <HAL_RCC_OscConfig+0xe1a>
 8005486:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800548a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800548e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005490:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	fa93 f2a3 	rbit	r2, r3
 800549a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800549e:	601a      	str	r2, [r3, #0]
  return result;
 80054a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a6:	fab3 f383 	clz	r3, r3
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	461a      	mov	r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fc fdd4 	bl	8002068 <HAL_GetTick>
 80054c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054c4:	e009      	b.n	80054da <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c6:	f7fc fdcf 	bl	8002068 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e084      	b.n	80055e4 <HAL_RCC_OscConfig+0xe1c>
 80054da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	fa93 f2a3 	rbit	r2, r3
 80054ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054f2:	601a      	str	r2, [r3, #0]
  return result;
 80054f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d102      	bne.n	8005514 <HAL_RCC_OscConfig+0xd4c>
 800550e:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <HAL_RCC_OscConfig+0xe28>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	e01b      	b.n	800554c <HAL_RCC_OscConfig+0xd84>
 8005514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800551c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	fa93 f2a3 	rbit	r2, r3
 8005528:	f107 0320 	add.w	r3, r7, #32
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	f107 031c 	add.w	r3, r7, #28
 8005532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f107 031c 	add.w	r3, r7, #28
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	fa93 f2a3 	rbit	r2, r3
 8005542:	f107 0318 	add.w	r3, r7, #24
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	4b29      	ldr	r3, [pc, #164]	; (80055f0 <HAL_RCC_OscConfig+0xe28>)
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f107 0214 	add.w	r2, r7, #20
 8005550:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005554:	6011      	str	r1, [r2, #0]
 8005556:	f107 0214 	add.w	r2, r7, #20
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	fa92 f1a2 	rbit	r1, r2
 8005560:	f107 0210 	add.w	r2, r7, #16
 8005564:	6011      	str	r1, [r2, #0]
  return result;
 8005566:	f107 0210 	add.w	r2, r7, #16
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	fab2 f282 	clz	r2, r2
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	f042 0220 	orr.w	r2, r2, #32
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	f002 021f 	and.w	r2, r2, #31
 800557c:	2101      	movs	r1, #1
 800557e:	fa01 f202 	lsl.w	r2, r1, r2
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d19e      	bne.n	80054c6 <HAL_RCC_OscConfig+0xcfe>
 8005588:	e02b      	b.n	80055e2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800558a:	1d3b      	adds	r3, r7, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e025      	b.n	80055e4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <HAL_RCC_OscConfig+0xe28>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <HAL_RCC_OscConfig+0xe28>)
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055ac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80055b0:	1d3b      	adds	r3, r7, #4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d111      	bne.n	80055de <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80055ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d108      	bne.n	80055de <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80055cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055d0:	f003 020f 	and.w	r2, r3, #15
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80055da:	429a      	cmp	r2, r3
 80055dc:	d001      	beq.n	80055e2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000

080055f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b09e      	sub	sp, #120	; 0x78
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e162      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800560c:	4b90      	ldr	r3, [pc, #576]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d910      	bls.n	800563c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b8d      	ldr	r3, [pc, #564]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 0207 	bic.w	r2, r3, #7
 8005622:	498b      	ldr	r1, [pc, #556]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b89      	ldr	r3, [pc, #548]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e14a      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005648:	4b82      	ldr	r3, [pc, #520]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	497f      	ldr	r1, [pc, #508]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80dc 	beq.w	8005820 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d13c      	bne.n	80056ea <HAL_RCC_ClockConfig+0xf6>
 8005670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005674:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005678:	fa93 f3a3 	rbit	r3, r3
 800567c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800567e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005680:	fab3 f383 	clz	r3, r3
 8005684:	b2db      	uxtb	r3, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d102      	bne.n	800569a <HAL_RCC_ClockConfig+0xa6>
 8005694:	4b6f      	ldr	r3, [pc, #444]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	e00f      	b.n	80056ba <HAL_RCC_ClockConfig+0xc6>
 800569a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800569e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056a2:	fa93 f3a3 	rbit	r3, r3
 80056a6:	667b      	str	r3, [r7, #100]	; 0x64
 80056a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ac:	663b      	str	r3, [r7, #96]	; 0x60
 80056ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b0:	fa93 f3a3 	rbit	r3, r3
 80056b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056b6:	4b67      	ldr	r3, [pc, #412]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056be:	65ba      	str	r2, [r7, #88]	; 0x58
 80056c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056c2:	fa92 f2a2 	rbit	r2, r2
 80056c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80056c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056ca:	fab2 f282 	clz	r2, r2
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	f042 0220 	orr.w	r2, r2, #32
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	f002 021f 	and.w	r2, r2, #31
 80056da:	2101      	movs	r1, #1
 80056dc:	fa01 f202 	lsl.w	r2, r1, r2
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d17b      	bne.n	80057de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e0f3      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d13c      	bne.n	800576c <HAL_RCC_ClockConfig+0x178>
 80056f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056fa:	fa93 f3a3 	rbit	r3, r3
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005702:	fab3 f383 	clz	r3, r3
 8005706:	b2db      	uxtb	r3, r3
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	d102      	bne.n	800571c <HAL_RCC_ClockConfig+0x128>
 8005716:	4b4f      	ldr	r3, [pc, #316]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	e00f      	b.n	800573c <HAL_RCC_ClockConfig+0x148>
 800571c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005720:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	647b      	str	r3, [r7, #68]	; 0x44
 800572a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800572e:	643b      	str	r3, [r7, #64]	; 0x40
 8005730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005732:	fa93 f3a3 	rbit	r3, r3
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005738:	4b46      	ldr	r3, [pc, #280]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005740:	63ba      	str	r2, [r7, #56]	; 0x38
 8005742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005744:	fa92 f2a2 	rbit	r2, r2
 8005748:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800574a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800574c:	fab2 f282 	clz	r2, r2
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	f042 0220 	orr.w	r2, r2, #32
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	f002 021f 	and.w	r2, r2, #31
 800575c:	2101      	movs	r1, #1
 800575e:	fa01 f202 	lsl.w	r2, r1, r2
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d13a      	bne.n	80057de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0b2      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
 800576c:	2302      	movs	r3, #2
 800576e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	fa93 f3a3 	rbit	r3, r3
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577a:	fab3 f383 	clz	r3, r3
 800577e:	b2db      	uxtb	r3, r3
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b01      	cmp	r3, #1
 800578c:	d102      	bne.n	8005794 <HAL_RCC_ClockConfig+0x1a0>
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	e00d      	b.n	80057b0 <HAL_RCC_ClockConfig+0x1bc>
 8005794:	2302      	movs	r3, #2
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	fa93 f3a3 	rbit	r3, r3
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
 80057a0:	2302      	movs	r3, #2
 80057a2:	623b      	str	r3, [r7, #32]
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	fa93 f3a3 	rbit	r3, r3
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	4b29      	ldr	r3, [pc, #164]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2202      	movs	r2, #2
 80057b2:	61ba      	str	r2, [r7, #24]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	fa92 f2a2 	rbit	r2, r2
 80057ba:	617a      	str	r2, [r7, #20]
  return result;
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	fab2 f282 	clz	r2, r2
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	f042 0220 	orr.w	r2, r2, #32
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	f002 021f 	and.w	r2, r2, #31
 80057ce:	2101      	movs	r1, #1
 80057d0:	fa01 f202 	lsl.w	r2, r1, r2
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e079      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057de:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f023 0203 	bic.w	r2, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	491a      	ldr	r1, [pc, #104]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f0:	f7fc fc3a 	bl	8002068 <HAL_GetTick>
 80057f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f6:	e00a      	b.n	800580e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f8:	f7fc fc36 	bl	8002068 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	f241 3288 	movw	r2, #5000	; 0x1388
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e061      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <HAL_RCC_ClockConfig+0x260>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f003 020c 	and.w	r2, r3, #12
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	429a      	cmp	r2, r3
 800581e:	d1eb      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d214      	bcs.n	8005858 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b08      	ldr	r3, [pc, #32]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 0207 	bic.w	r2, r3, #7
 8005836:	4906      	ldr	r1, [pc, #24]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b04      	ldr	r3, [pc, #16]	; (8005850 <HAL_RCC_ClockConfig+0x25c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d005      	beq.n	8005858 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e040      	b.n	80058d2 <HAL_RCC_ClockConfig+0x2de>
 8005850:	40022000 	.word	0x40022000
 8005854:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005864:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_RCC_ClockConfig+0x2e8>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	491a      	ldr	r1, [pc, #104]	; (80058dc <HAL_RCC_ClockConfig+0x2e8>)
 8005872:	4313      	orrs	r3, r2
 8005874:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005882:	4b16      	ldr	r3, [pc, #88]	; (80058dc <HAL_RCC_ClockConfig+0x2e8>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4912      	ldr	r1, [pc, #72]	; (80058dc <HAL_RCC_ClockConfig+0x2e8>)
 8005892:	4313      	orrs	r3, r2
 8005894:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005896:	f000 f829 	bl	80058ec <HAL_RCC_GetSysClockFreq>
 800589a:	4601      	mov	r1, r0
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <HAL_RCC_ClockConfig+0x2e8>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058a4:	22f0      	movs	r2, #240	; 0xf0
 80058a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	fa92 f2a2 	rbit	r2, r2
 80058ae:	60fa      	str	r2, [r7, #12]
  return result;
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	fab2 f282 	clz	r2, r2
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	40d3      	lsrs	r3, r2
 80058ba:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <HAL_RCC_ClockConfig+0x2ec>)
 80058bc:	5cd3      	ldrb	r3, [r2, r3]
 80058be:	fa21 f303 	lsr.w	r3, r1, r3
 80058c2:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <HAL_RCC_ClockConfig+0x2f0>)
 80058c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80058c6:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <HAL_RCC_ClockConfig+0x2f4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fc fb88 	bl	8001fe0 <HAL_InitTick>
  
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3778      	adds	r7, #120	; 0x78
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	0800a04c 	.word	0x0800a04c
 80058e4:	20000014 	.word	0x20000014
 80058e8:	20000018 	.word	0x20000018

080058ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b08b      	sub	sp, #44	; 0x2c
 80058f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	2300      	movs	r3, #0
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	2300      	movs	r3, #0
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005906:	4b2a      	ldr	r3, [pc, #168]	; (80059b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b04      	cmp	r3, #4
 8005914:	d002      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0x30>
 8005916:	2b08      	cmp	r3, #8
 8005918:	d003      	beq.n	8005922 <HAL_RCC_GetSysClockFreq+0x36>
 800591a:	e03f      	b.n	800599c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800591e:	623b      	str	r3, [r7, #32]
      break;
 8005920:	e03f      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005928:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800592c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	fa92 f2a2 	rbit	r2, r2
 8005934:	607a      	str	r2, [r7, #4]
  return result;
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	fab2 f282 	clz	r2, r2
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	40d3      	lsrs	r3, r2
 8005940:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005942:	5cd3      	ldrb	r3, [r2, r3]
 8005944:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005946:	4b1a      	ldr	r3, [pc, #104]	; (80059b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	220f      	movs	r2, #15
 8005950:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	fa92 f2a2 	rbit	r2, r2
 8005958:	60fa      	str	r2, [r7, #12]
  return result;
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	fab2 f282 	clz	r2, r2
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	40d3      	lsrs	r3, r2
 8005964:	4a15      	ldr	r2, [pc, #84]	; (80059bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005966:	5cd3      	ldrb	r3, [r2, r3]
 8005968:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005974:	4a0f      	ldr	r2, [pc, #60]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	fbb2 f2f3 	udiv	r2, r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
 8005984:	e007      	b.n	8005996 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005986:	4a0b      	ldr	r2, [pc, #44]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	fbb2 f2f3 	udiv	r2, r2, r3
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	fb02 f303 	mul.w	r3, r2, r3
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	623b      	str	r3, [r7, #32]
      break;
 800599a:	e002      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800599e:	623b      	str	r3, [r7, #32]
      break;
 80059a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059a2:	6a3b      	ldr	r3, [r7, #32]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	372c      	adds	r7, #44	; 0x2c
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40021000 	.word	0x40021000
 80059b4:	007a1200 	.word	0x007a1200
 80059b8:	0800a064 	.word	0x0800a064
 80059bc:	0800a074 	.word	0x0800a074

080059c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059c4:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059c6:	681b      	ldr	r3, [r3, #0]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000014 	.word	0x20000014

080059d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80059de:	f7ff ffef 	bl	80059c0 <HAL_RCC_GetHCLKFreq>
 80059e2:	4601      	mov	r1, r0
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80059f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	fa92 f2a2 	rbit	r2, r2
 80059f8:	603a      	str	r2, [r7, #0]
  return result;
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	fab2 f282 	clz	r2, r2
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	40d3      	lsrs	r3, r2
 8005a04:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005a06:	5cd3      	ldrb	r3, [r2, r3]
 8005a08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40021000 	.word	0x40021000
 8005a18:	0800a05c 	.word	0x0800a05c

08005a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005a22:	f7ff ffcd 	bl	80059c0 <HAL_RCC_GetHCLKFreq>
 8005a26:	4601      	mov	r1, r0
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005a30:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005a34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	fa92 f2a2 	rbit	r2, r2
 8005a3c:	603a      	str	r2, [r7, #0]
  return result;
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	fab2 f282 	clz	r2, r2
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	40d3      	lsrs	r3, r2
 8005a48:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005a4a:	5cd3      	ldrb	r3, [r2, r3]
 8005a4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	0800a05c 	.word	0x0800a05c

08005a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b092      	sub	sp, #72	; 0x48
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80d7 	beq.w	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a84:	4b4e      	ldr	r3, [pc, #312]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10e      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a90:	4b4b      	ldr	r3, [pc, #300]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	4a4a      	ldr	r2, [pc, #296]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	61d3      	str	r3, [r2, #28]
 8005a9c:	4b48      	ldr	r3, [pc, #288]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aae:	4b45      	ldr	r3, [pc, #276]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d118      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aba:	4b42      	ldr	r3, [pc, #264]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a41      	ldr	r2, [pc, #260]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac6:	f7fc facf 	bl	8002068 <HAL_GetTick>
 8005aca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005acc:	e008      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ace:	f7fc facb 	bl	8002068 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b64      	cmp	r3, #100	; 0x64
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e1d6      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae0:	4b38      	ldr	r3, [pc, #224]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0f0      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005aec:	4b34      	ldr	r3, [pc, #208]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8084 	beq.w	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d07c      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b0c:	4b2c      	ldr	r3, [pc, #176]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	fa93 f3a3 	rbit	r3, r3
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b26:	fab3 f383 	clz	r3, r3
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4b26      	ldr	r3, [pc, #152]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	461a      	mov	r2, r3
 8005b36:	2301      	movs	r3, #1
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	fa93 f3a3 	rbit	r3, r3
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b4a:	fab3 f383 	clz	r3, r3
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b5e:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d04b      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6e:	f7fc fa7b 	bl	8002068 <HAL_GetTick>
 8005b72:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b74:	e00a      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fc fa77 	bl	8002068 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e180      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	fa93 f3a3 	rbit	r3, r3
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
 8005b98:	2302      	movs	r3, #2
 8005b9a:	623b      	str	r3, [r7, #32]
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	fa93 f3a3 	rbit	r3, r3
 8005ba2:	61fb      	str	r3, [r7, #28]
  return result;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba6:	fab3 f383 	clz	r3, r3
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f043 0302 	orr.w	r3, r3, #2
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d108      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005bba:	4b01      	ldr	r3, [pc, #4]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	e00d      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40007000 	.word	0x40007000
 8005bc8:	10908100 	.word	0x10908100
 8005bcc:	2302      	movs	r3, #2
 8005bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	fa93 f3a3 	rbit	r3, r3
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	4ba0      	ldr	r3, [pc, #640]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	2202      	movs	r2, #2
 8005bde:	613a      	str	r2, [r7, #16]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	fa92 f2a2 	rbit	r2, r2
 8005be6:	60fa      	str	r2, [r7, #12]
  return result;
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	fab2 f282 	clz	r2, r2
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	f002 021f 	and.w	r2, r2, #31
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0b7      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005c06:	4b95      	ldr	r3, [pc, #596]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4992      	ldr	r1, [pc, #584]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d105      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c20:	4b8e      	ldr	r3, [pc, #568]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	4a8d      	ldr	r2, [pc, #564]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c38:	4b88      	ldr	r3, [pc, #544]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	f023 0203 	bic.w	r2, r3, #3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	4985      	ldr	r1, [pc, #532]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c56:	4b81      	ldr	r3, [pc, #516]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	497e      	ldr	r1, [pc, #504]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c74:	4b79      	ldr	r3, [pc, #484]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	4976      	ldr	r1, [pc, #472]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c92:	4b72      	ldr	r3, [pc, #456]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	f023 0210 	bic.w	r2, r3, #16
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	496f      	ldr	r1, [pc, #444]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005cb0:	4b6a      	ldr	r3, [pc, #424]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbc:	4967      	ldr	r1, [pc, #412]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cce:	4b63      	ldr	r3, [pc, #396]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	f023 0220 	bic.w	r2, r3, #32
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	4960      	ldr	r1, [pc, #384]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cec:	4b5b      	ldr	r3, [pc, #364]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	4958      	ldr	r1, [pc, #352]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d008      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d0a:	4b54      	ldr	r3, [pc, #336]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	4951      	ldr	r1, [pc, #324]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0310 	and.w	r3, r3, #16
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d008      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d28:	4b4c      	ldr	r3, [pc, #304]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	4949      	ldr	r1, [pc, #292]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d46:	4b45      	ldr	r3, [pc, #276]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	4942      	ldr	r1, [pc, #264]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d64:	4b3d      	ldr	r3, [pc, #244]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	493a      	ldr	r1, [pc, #232]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d008      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005d82:	4b36      	ldr	r3, [pc, #216]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	4933      	ldr	r1, [pc, #204]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005da0:	4b2e      	ldr	r3, [pc, #184]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	492b      	ldr	r1, [pc, #172]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d008      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005dbe:	4b27      	ldr	r3, [pc, #156]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	4924      	ldr	r1, [pc, #144]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005ddc:	4b1f      	ldr	r3, [pc, #124]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	491c      	ldr	r1, [pc, #112]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005dfa:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	4915      	ldr	r1, [pc, #84]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005e18:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e24:	490d      	ldr	r1, [pc, #52]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005e36:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e42:	4906      	ldr	r1, [pc, #24]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00c      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005e54:	4b01      	ldr	r3, [pc, #4]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	e002      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e68:	490b      	ldr	r1, [pc, #44]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005e7a:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e86:	4904      	ldr	r1, [pc, #16]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3748      	adds	r7, #72	; 0x48
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000

08005e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e01d      	b.n	8005eea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fb fdc0 	bl	8001a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f001 f8b6 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <HAL_TIM_Base_Start+0x50>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	d00b      	beq.n	8005f2e <HAL_TIM_Base_Start+0x3a>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1c:	d007      	beq.n	8005f2e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	00010007 	.word	0x00010007

08005f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <HAL_TIM_Base_Start_IT+0x50>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b06      	cmp	r3, #6
 8005f70:	d00b      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0x42>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d007      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	00010007 	.word	0x00010007

08005f9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e01d      	b.n	8005fea <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f815 	bl	8005ff2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f001 f836 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2201      	movs	r2, #1
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f001 fe00 	bl	8007c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a21      	ldr	r2, [pc, #132]	; (80060ac <HAL_TIM_OC_Start+0xa4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d018      	beq.n	800605c <HAL_TIM_OC_Start+0x54>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a20      	ldr	r2, [pc, #128]	; (80060b0 <HAL_TIM_OC_Start+0xa8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d013      	beq.n	800605c <HAL_TIM_OC_Start+0x54>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <HAL_TIM_OC_Start+0xac>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00e      	beq.n	800605c <HAL_TIM_OC_Start+0x54>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1d      	ldr	r2, [pc, #116]	; (80060b8 <HAL_TIM_OC_Start+0xb0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d009      	beq.n	800605c <HAL_TIM_OC_Start+0x54>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1b      	ldr	r2, [pc, #108]	; (80060bc <HAL_TIM_OC_Start+0xb4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_TIM_OC_Start+0x54>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1a      	ldr	r2, [pc, #104]	; (80060c0 <HAL_TIM_OC_Start+0xb8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d101      	bne.n	8006060 <HAL_TIM_OC_Start+0x58>
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <HAL_TIM_OC_Start+0x5a>
 8006060:	2300      	movs	r3, #0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <HAL_TIM_OC_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006074:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <HAL_TIM_OC_Start+0xbc>)
 800607e:	4013      	ands	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b06      	cmp	r3, #6
 8006086:	d00b      	beq.n	80060a0 <HAL_TIM_OC_Start+0x98>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608e:	d007      	beq.n	80060a0 <HAL_TIM_OC_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40013400 	.word	0x40013400
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40014400 	.word	0x40014400
 80060bc:	40014800 	.word	0x40014800
 80060c0:	40015000 	.word	0x40015000
 80060c4:	00010007 	.word	0x00010007

080060c8 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2200      	movs	r2, #0
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 fda0 	bl	8007c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2a      	ldr	r2, [pc, #168]	; (8006190 <HAL_TIM_OC_Stop+0xc8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d018      	beq.n	800611c <HAL_TIM_OC_Stop+0x54>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a29      	ldr	r2, [pc, #164]	; (8006194 <HAL_TIM_OC_Stop+0xcc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d013      	beq.n	800611c <HAL_TIM_OC_Stop+0x54>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a27      	ldr	r2, [pc, #156]	; (8006198 <HAL_TIM_OC_Stop+0xd0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00e      	beq.n	800611c <HAL_TIM_OC_Stop+0x54>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a26      	ldr	r2, [pc, #152]	; (800619c <HAL_TIM_OC_Stop+0xd4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d009      	beq.n	800611c <HAL_TIM_OC_Stop+0x54>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a24      	ldr	r2, [pc, #144]	; (80061a0 <HAL_TIM_OC_Stop+0xd8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <HAL_TIM_OC_Stop+0x54>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a23      	ldr	r2, [pc, #140]	; (80061a4 <HAL_TIM_OC_Stop+0xdc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d101      	bne.n	8006120 <HAL_TIM_OC_Stop+0x58>
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <HAL_TIM_OC_Stop+0x5a>
 8006120:	2300      	movs	r3, #0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d017      	beq.n	8006156 <HAL_TIM_OC_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10f      	bne.n	8006156 <HAL_TIM_OC_Stop+0x8e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	f240 4344 	movw	r3, #1092	; 0x444
 8006140:	4013      	ands	r3, r2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d107      	bne.n	8006156 <HAL_TIM_OC_Stop+0x8e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6a1a      	ldr	r2, [r3, #32]
 800615c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006160:	4013      	ands	r3, r2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10f      	bne.n	8006186 <HAL_TIM_OC_Stop+0xbe>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	f240 4344 	movw	r3, #1092	; 0x444
 8006170:	4013      	ands	r3, r2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d107      	bne.n	8006186 <HAL_TIM_OC_Stop+0xbe>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0201 	bic.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40013400 	.word	0x40013400
 8006198:	40014000 	.word	0x40014000
 800619c:	40014400 	.word	0x40014400
 80061a0:	40014800 	.word	0x40014800
 80061a4:	40015000 	.word	0x40015000

080061a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e01d      	b.n	80061f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f815 	bl	80061fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4619      	mov	r1, r3
 80061e6:	4610      	mov	r0, r2
 80061e8:	f000 ff30 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
	...

08006214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2201      	movs	r2, #1
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f001 fcfa 	bl	8007c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <HAL_TIM_PWM_Start+0xa4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d018      	beq.n	8006268 <HAL_TIM_PWM_Start+0x54>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a20      	ldr	r2, [pc, #128]	; (80062bc <HAL_TIM_PWM_Start+0xa8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d013      	beq.n	8006268 <HAL_TIM_PWM_Start+0x54>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1e      	ldr	r2, [pc, #120]	; (80062c0 <HAL_TIM_PWM_Start+0xac>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00e      	beq.n	8006268 <HAL_TIM_PWM_Start+0x54>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1d      	ldr	r2, [pc, #116]	; (80062c4 <HAL_TIM_PWM_Start+0xb0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d009      	beq.n	8006268 <HAL_TIM_PWM_Start+0x54>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1b      	ldr	r2, [pc, #108]	; (80062c8 <HAL_TIM_PWM_Start+0xb4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d004      	beq.n	8006268 <HAL_TIM_PWM_Start+0x54>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1a      	ldr	r2, [pc, #104]	; (80062cc <HAL_TIM_PWM_Start+0xb8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d101      	bne.n	800626c <HAL_TIM_PWM_Start+0x58>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <HAL_TIM_PWM_Start+0x5a>
 800626c:	2300      	movs	r3, #0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006280:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	4b11      	ldr	r3, [pc, #68]	; (80062d0 <HAL_TIM_PWM_Start+0xbc>)
 800628a:	4013      	ands	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b06      	cmp	r3, #6
 8006292:	d00b      	beq.n	80062ac <HAL_TIM_PWM_Start+0x98>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800629a:	d007      	beq.n	80062ac <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40012c00 	.word	0x40012c00
 80062bc:	40013400 	.word	0x40013400
 80062c0:	40014000 	.word	0x40014000
 80062c4:	40014400 	.word	0x40014400
 80062c8:	40014800 	.word	0x40014800
 80062cc:	40015000 	.word	0x40015000
 80062d0:	00010007 	.word	0x00010007

080062d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2200      	movs	r2, #0
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 fc9a 	bl	8007c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <HAL_TIM_PWM_Stop+0xd0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d018      	beq.n	8006328 <HAL_TIM_PWM_Stop+0x54>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a2b      	ldr	r2, [pc, #172]	; (80063a8 <HAL_TIM_PWM_Stop+0xd4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d013      	beq.n	8006328 <HAL_TIM_PWM_Stop+0x54>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a29      	ldr	r2, [pc, #164]	; (80063ac <HAL_TIM_PWM_Stop+0xd8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00e      	beq.n	8006328 <HAL_TIM_PWM_Stop+0x54>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <HAL_TIM_PWM_Stop+0xdc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d009      	beq.n	8006328 <HAL_TIM_PWM_Stop+0x54>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <HAL_TIM_PWM_Stop+0xe0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_TIM_PWM_Stop+0x54>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <HAL_TIM_PWM_Stop+0xe4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d101      	bne.n	800632c <HAL_TIM_PWM_Stop+0x58>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_TIM_PWM_Stop+0x5a>
 800632c:	2300      	movs	r3, #0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d017      	beq.n	8006362 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6a1a      	ldr	r2, [r3, #32]
 8006338:	f241 1311 	movw	r3, #4369	; 0x1111
 800633c:	4013      	ands	r3, r2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10f      	bne.n	8006362 <HAL_TIM_PWM_Stop+0x8e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a1a      	ldr	r2, [r3, #32]
 8006348:	f240 4344 	movw	r3, #1092	; 0x444
 800634c:	4013      	ands	r3, r2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d107      	bne.n	8006362 <HAL_TIM_PWM_Stop+0x8e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006360:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	f241 1311 	movw	r3, #4369	; 0x1111
 800636c:	4013      	ands	r3, r2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10f      	bne.n	8006392 <HAL_TIM_PWM_Stop+0xbe>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	f240 4344 	movw	r3, #1092	; 0x444
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <HAL_TIM_PWM_Stop+0xbe>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0201 	bic.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40012c00 	.word	0x40012c00
 80063a8:	40013400 	.word	0x40013400
 80063ac:	40014000 	.word	0x40014000
 80063b0:	40014400 	.word	0x40014400
 80063b4:	40014800 	.word	0x40014800
 80063b8:	40015000 	.word	0x40015000

080063bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e01d      	b.n	800640a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f815 	bl	8006412 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f000 fe26 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d101      	bne.n	8006446 <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8006442:	2302      	movs	r3, #2
 8006444:	e0e0      	b.n	8006608 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	d10b      	bne.n	800646a <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <HAL_TIM_IC_Start_DMA+0x3a>
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e0d2      	b.n	8006608 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2202      	movs	r2, #2
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b0c      	cmp	r3, #12
 800646e:	f200 80ad 	bhi.w	80065cc <HAL_TIM_IC_Start_DMA+0x1a4>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <HAL_TIM_IC_Start_DMA+0x50>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	080064ad 	.word	0x080064ad
 800647c:	080065cd 	.word	0x080065cd
 8006480:	080065cd 	.word	0x080065cd
 8006484:	080065cd 	.word	0x080065cd
 8006488:	080064f5 	.word	0x080064f5
 800648c:	080065cd 	.word	0x080065cd
 8006490:	080065cd 	.word	0x080065cd
 8006494:	080065cd 	.word	0x080065cd
 8006498:	0800653d 	.word	0x0800653d
 800649c:	080065cd 	.word	0x080065cd
 80064a0:	080065cd 	.word	0x080065cd
 80064a4:	080065cd 	.word	0x080065cd
 80064a8:	08006585 	.word	0x08006585
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	4a57      	ldr	r2, [pc, #348]	; (8006610 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	4a56      	ldr	r2, [pc, #344]	; (8006614 <HAL_TIM_IC_Start_DMA+0x1ec>)
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	4a55      	ldr	r2, [pc, #340]	; (8006618 <HAL_TIM_IC_Start_DMA+0x1f0>)
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3334      	adds	r3, #52	; 0x34
 80064ce:	4619      	mov	r1, r3
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	887b      	ldrh	r3, [r7, #2]
 80064d4:	f7fd fe0b 	bl	80040ee <HAL_DMA_Start_IT>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e092      	b.n	8006608 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f0:	60da      	str	r2, [r3, #12]
      break;
 80064f2:	e06c      	b.n	80065ce <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	4a45      	ldr	r2, [pc, #276]	; (8006610 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	4a44      	ldr	r2, [pc, #272]	; (8006614 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006502:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	4a43      	ldr	r2, [pc, #268]	; (8006618 <HAL_TIM_IC_Start_DMA+0x1f0>)
 800650a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3338      	adds	r3, #56	; 0x38
 8006516:	4619      	mov	r1, r3
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	f7fd fde7 	bl	80040ee <HAL_DMA_Start_IT>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e06e      	b.n	8006608 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006538:	60da      	str	r2, [r3, #12]
      break;
 800653a:	e048      	b.n	80065ce <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	4a33      	ldr	r2, [pc, #204]	; (8006610 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006542:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	4a32      	ldr	r2, [pc, #200]	; (8006614 <HAL_TIM_IC_Start_DMA+0x1ec>)
 800654a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	4a31      	ldr	r2, [pc, #196]	; (8006618 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006552:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	333c      	adds	r3, #60	; 0x3c
 800655e:	4619      	mov	r1, r3
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	887b      	ldrh	r3, [r7, #2]
 8006564:	f7fd fdc3 	bl	80040ee <HAL_DMA_Start_IT>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e04a      	b.n	8006608 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006580:	60da      	str	r2, [r3, #12]
      break;
 8006582:	e024      	b.n	80065ce <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	4a21      	ldr	r2, [pc, #132]	; (8006610 <HAL_TIM_IC_Start_DMA+0x1e8>)
 800658a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	4a20      	ldr	r2, [pc, #128]	; (8006614 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	4a1f      	ldr	r2, [pc, #124]	; (8006618 <HAL_TIM_IC_Start_DMA+0x1f0>)
 800659a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3340      	adds	r3, #64	; 0x40
 80065a6:	4619      	mov	r1, r3
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	887b      	ldrh	r3, [r7, #2]
 80065ac:	f7fd fd9f 	bl	80040ee <HAL_DMA_Start_IT>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e026      	b.n	8006608 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065c8:	60da      	str	r2, [r3, #12]
      break;
 80065ca:	e000      	b.n	80065ce <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 80065cc:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2201      	movs	r2, #1
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f001 fb22 	bl	8007c20 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	4b0e      	ldr	r3, [pc, #56]	; (800661c <HAL_TIM_IC_Start_DMA+0x1f4>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b06      	cmp	r3, #6
 80065ec:	d00b      	beq.n	8006606 <HAL_TIM_IC_Start_DMA+0x1de>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f4:	d007      	beq.n	8006606 <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0201 	orr.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	08006f6b 	.word	0x08006f6b
 8006614:	08006fdb 	.word	0x08006fdb
 8006618:	08006f47 	.word	0x08006f47
 800661c:	00010007 	.word	0x00010007

08006620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b02      	cmp	r3, #2
 8006634:	d122      	bne.n	800667c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b02      	cmp	r3, #2
 8006642:	d11b      	bne.n	800667c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0202 	mvn.w	r2, #2
 800664c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fc3d 	bl	8006ee2 <HAL_TIM_IC_CaptureCallback>
 8006668:	e005      	b.n	8006676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fc2f 	bl	8006ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fc4a 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b04      	cmp	r3, #4
 8006688:	d122      	bne.n	80066d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b04      	cmp	r3, #4
 8006696:	d11b      	bne.n	80066d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0204 	mvn.w	r2, #4
 80066a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fc13 	bl	8006ee2 <HAL_TIM_IC_CaptureCallback>
 80066bc:	e005      	b.n	80066ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fc05 	bl	8006ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fc20 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d122      	bne.n	8006724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d11b      	bne.n	8006724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0208 	mvn.w	r2, #8
 80066f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2204      	movs	r2, #4
 80066fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fbe9 	bl	8006ee2 <HAL_TIM_IC_CaptureCallback>
 8006710:	e005      	b.n	800671e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fbdb 	bl	8006ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fbf6 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b10      	cmp	r3, #16
 8006730:	d122      	bne.n	8006778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b10      	cmp	r3, #16
 800673e:	d11b      	bne.n	8006778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0210 	mvn.w	r2, #16
 8006748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2208      	movs	r2, #8
 800674e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fbbf 	bl	8006ee2 <HAL_TIM_IC_CaptureCallback>
 8006764:	e005      	b.n	8006772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fbb1 	bl	8006ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fbcc 	bl	8006f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b01      	cmp	r3, #1
 8006784:	d10e      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	d107      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f06f 0201 	mvn.w	r2, #1
 800679c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fb8b 	bl	8006eba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ae:	2b80      	cmp	r3, #128	; 0x80
 80067b0:	d10e      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d107      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 fb6a 	bl	8007ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067de:	d10e      	bne.n	80067fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ea:	2b80      	cmp	r3, #128	; 0x80
 80067ec:	d107      	bne.n	80067fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 fb5d 	bl	8007eb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006808:	2b40      	cmp	r3, #64	; 0x40
 800680a:	d10e      	bne.n	800682a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d107      	bne.n	800682a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fb7a 	bl	8006f1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	2b20      	cmp	r3, #32
 8006836:	d10e      	bne.n	8006856 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b20      	cmp	r3, #32
 8006844:	d107      	bne.n	8006856 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f06f 0220 	mvn.w	r2, #32
 800684e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fb1d 	bl	8007e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006856:	bf00      	nop
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006876:	2302      	movs	r3, #2
 8006878:	e06c      	b.n	8006954 <HAL_TIM_OC_ConfigChannel+0xf4>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b14      	cmp	r3, #20
 800688e:	d857      	bhi.n	8006940 <HAL_TIM_OC_ConfigChannel+0xe0>
 8006890:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068ed 	.word	0x080068ed
 800689c:	08006941 	.word	0x08006941
 80068a0:	08006941 	.word	0x08006941
 80068a4:	08006941 	.word	0x08006941
 80068a8:	080068fb 	.word	0x080068fb
 80068ac:	08006941 	.word	0x08006941
 80068b0:	08006941 	.word	0x08006941
 80068b4:	08006941 	.word	0x08006941
 80068b8:	08006909 	.word	0x08006909
 80068bc:	08006941 	.word	0x08006941
 80068c0:	08006941 	.word	0x08006941
 80068c4:	08006941 	.word	0x08006941
 80068c8:	08006917 	.word	0x08006917
 80068cc:	08006941 	.word	0x08006941
 80068d0:	08006941 	.word	0x08006941
 80068d4:	08006941 	.word	0x08006941
 80068d8:	08006925 	.word	0x08006925
 80068dc:	08006941 	.word	0x08006941
 80068e0:	08006941 	.word	0x08006941
 80068e4:	08006941 	.word	0x08006941
 80068e8:	08006933 	.word	0x08006933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fc48 	bl	8007188 <TIM_OC1_SetConfig>
      break;
 80068f8:	e023      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fcdb 	bl	80072bc <TIM_OC2_SetConfig>
      break;
 8006906:	e01c      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fd68 	bl	80073e4 <TIM_OC3_SetConfig>
      break;
 8006914:	e015      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fdf3 	bl	8007508 <TIM_OC4_SetConfig>
      break;
 8006922:	e00e      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fe5c 	bl	80075e8 <TIM_OC5_SetConfig>
      break;
 8006930:	e007      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68b9      	ldr	r1, [r7, #8]
 8006938:	4618      	mov	r0, r3
 800693a:	f000 febf 	bl	80076bc <TIM_OC6_SetConfig>
      break;
 800693e:	e000      	b.n	8006942 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8006940:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006972:	2302      	movs	r3, #2
 8006974:	e08a      	b.n	8006a8c <HAL_TIM_IC_ConfigChannel+0x130>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2202      	movs	r2, #2
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d11b      	bne.n	80069c4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6819      	ldr	r1, [r3, #0]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f000 ff82 	bl	80078a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 020c 	bic.w	r2, r2, #12
 80069ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6999      	ldr	r1, [r3, #24]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	619a      	str	r2, [r3, #24]
 80069c2:	e05a      	b.n	8006a7a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d11c      	bne.n	8006a04 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6819      	ldr	r1, [r3, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f001 f800 	bl	80079de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	699a      	ldr	r2, [r3, #24]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6999      	ldr	r1, [r3, #24]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	021a      	lsls	r2, r3, #8
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	619a      	str	r2, [r3, #24]
 8006a02:	e03a      	b.n	8006a7a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d11b      	bne.n	8006a42 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6819      	ldr	r1, [r3, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f001 f84d 	bl	8007ab8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 020c 	bic.w	r2, r2, #12
 8006a2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69d9      	ldr	r1, [r3, #28]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	61da      	str	r2, [r3, #28]
 8006a40:	e01b      	b.n	8006a7a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6819      	ldr	r1, [r3, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f001 f86d 	bl	8007b30 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69da      	ldr	r2, [r3, #28]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a64:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69d9      	ldr	r1, [r3, #28]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	021a      	lsls	r2, r3, #8
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e105      	b.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x226>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b14      	cmp	r3, #20
 8006ac2:	f200 80f0 	bhi.w	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006ca7 	.word	0x08006ca7
 8006ad4:	08006ca7 	.word	0x08006ca7
 8006ad8:	08006ca7 	.word	0x08006ca7
 8006adc:	08006b61 	.word	0x08006b61
 8006ae0:	08006ca7 	.word	0x08006ca7
 8006ae4:	08006ca7 	.word	0x08006ca7
 8006ae8:	08006ca7 	.word	0x08006ca7
 8006aec:	08006ba3 	.word	0x08006ba3
 8006af0:	08006ca7 	.word	0x08006ca7
 8006af4:	08006ca7 	.word	0x08006ca7
 8006af8:	08006ca7 	.word	0x08006ca7
 8006afc:	08006be3 	.word	0x08006be3
 8006b00:	08006ca7 	.word	0x08006ca7
 8006b04:	08006ca7 	.word	0x08006ca7
 8006b08:	08006ca7 	.word	0x08006ca7
 8006b0c:	08006c25 	.word	0x08006c25
 8006b10:	08006ca7 	.word	0x08006ca7
 8006b14:	08006ca7 	.word	0x08006ca7
 8006b18:	08006ca7 	.word	0x08006ca7
 8006b1c:	08006c65 	.word	0x08006c65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fb2e 	bl	8007188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0208 	orr.w	r2, r2, #8
 8006b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0204 	bic.w	r2, r2, #4
 8006b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6999      	ldr	r1, [r3, #24]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	619a      	str	r2, [r3, #24]
      break;
 8006b5e:	e0a3      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fba8 	bl	80072bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6999      	ldr	r1, [r3, #24]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	021a      	lsls	r2, r3, #8
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	619a      	str	r2, [r3, #24]
      break;
 8006ba0:	e082      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fc1b 	bl	80073e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0208 	orr.w	r2, r2, #8
 8006bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0204 	bic.w	r2, r2, #4
 8006bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69d9      	ldr	r1, [r3, #28]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	61da      	str	r2, [r3, #28]
      break;
 8006be0:	e062      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fc8d 	bl	8007508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69d9      	ldr	r1, [r3, #28]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	021a      	lsls	r2, r3, #8
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	61da      	str	r2, [r3, #28]
      break;
 8006c22:	e041      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fcdc 	bl	80075e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0208 	orr.w	r2, r2, #8
 8006c3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0204 	bic.w	r2, r2, #4
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	691a      	ldr	r2, [r3, #16]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c62:	e021      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fd26 	bl	80076bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	021a      	lsls	r2, r3, #8
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ca4:	e000      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8006ca6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop

08006cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIM_ConfigClockSource+0x18>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e0a8      	b.n	8006e2e <HAL_TIM_ConfigClockSource+0x16a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	d067      	beq.n	8006de8 <HAL_TIM_ConfigClockSource+0x124>
 8006d18:	2b40      	cmp	r3, #64	; 0x40
 8006d1a:	d80b      	bhi.n	8006d34 <HAL_TIM_ConfigClockSource+0x70>
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d073      	beq.n	8006e08 <HAL_TIM_ConfigClockSource+0x144>
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d802      	bhi.n	8006d2a <HAL_TIM_ConfigClockSource+0x66>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d06f      	beq.n	8006e08 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d28:	e078      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	d06c      	beq.n	8006e08 <HAL_TIM_ConfigClockSource+0x144>
 8006d2e:	2b30      	cmp	r3, #48	; 0x30
 8006d30:	d06a      	beq.n	8006e08 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006d32:	e073      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006d34:	2b70      	cmp	r3, #112	; 0x70
 8006d36:	d00d      	beq.n	8006d54 <HAL_TIM_ConfigClockSource+0x90>
 8006d38:	2b70      	cmp	r3, #112	; 0x70
 8006d3a:	d804      	bhi.n	8006d46 <HAL_TIM_ConfigClockSource+0x82>
 8006d3c:	2b50      	cmp	r3, #80	; 0x50
 8006d3e:	d033      	beq.n	8006da8 <HAL_TIM_ConfigClockSource+0xe4>
 8006d40:	2b60      	cmp	r3, #96	; 0x60
 8006d42:	d041      	beq.n	8006dc8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006d44:	e06a      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4a:	d066      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x156>
 8006d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d50:	d017      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006d52:	e063      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6899      	ldr	r1, [r3, #8]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f000 ff3c 	bl	8007be0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	609a      	str	r2, [r3, #8]
      break;
 8006d80:	e04c      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6899      	ldr	r1, [r3, #8]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f000 ff25 	bl	8007be0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006da4:	609a      	str	r2, [r3, #8]
      break;
 8006da6:	e039      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6859      	ldr	r1, [r3, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	461a      	mov	r2, r3
 8006db6:	f000 fde3 	bl	8007980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2150      	movs	r1, #80	; 0x50
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fef2 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 8006dc6:	e029      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6859      	ldr	r1, [r3, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f000 fe3f 	bl	8007a58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2160      	movs	r1, #96	; 0x60
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fee2 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 8006de6:	e019      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	6859      	ldr	r1, [r3, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	461a      	mov	r2, r3
 8006df6:	f000 fdc3 	bl	8007980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2140      	movs	r1, #64	; 0x40
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fed2 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 8006e06:	e009      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f000 fec9 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 8006e18:	e000      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d101      	bne.n	8006e4e <HAL_TIM_SlaveConfigSynchro+0x18>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e031      	b.n	8006eb2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fc97 	bl	8007794 <TIM_SlaveTimer_SetConfig>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d009      	beq.n	8006e80 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e018      	b.n	8006eb2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e8e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e9e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006efe:	bf00      	nop
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7ff ffe8 	bl	8006f32 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006f62:	bf00      	nop
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d103      	bne.n	8006f92 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	771a      	strb	r2, [r3, #28]
 8006f90:	e019      	b.n	8006fc6 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d103      	bne.n	8006fa4 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	771a      	strb	r2, [r3, #28]
 8006fa2:	e010      	b.n	8006fc6 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d103      	bne.n	8006fb6 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	771a      	strb	r2, [r3, #28]
 8006fb4:	e007      	b.n	8006fc6 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d102      	bne.n	8006fc6 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2208      	movs	r2, #8
 8006fc4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff ff8b 	bl	8006ee2 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	771a      	strb	r2, [r3, #28]
}
 8006fd2:	bf00      	nop
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d103      	bne.n	8007002 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	771a      	strb	r2, [r3, #28]
 8007000:	e019      	b.n	8007036 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	429a      	cmp	r2, r3
 800700a:	d103      	bne.n	8007014 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2202      	movs	r2, #2
 8007010:	771a      	strb	r2, [r3, #28]
 8007012:	e010      	b.n	8007036 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	429a      	cmp	r2, r3
 800701c:	d103      	bne.n	8007026 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2204      	movs	r2, #4
 8007022:	771a      	strb	r2, [r3, #28]
 8007024:	e007      	b.n	8007036 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	429a      	cmp	r2, r3
 800702e:	d102      	bne.n	8007036 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2208      	movs	r2, #8
 8007034:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f7ff ff5d 	bl	8006ef6 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	771a      	strb	r2, [r3, #28]
}
 8007042:	bf00      	nop
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a42      	ldr	r2, [pc, #264]	; (8007168 <TIM_Base_SetConfig+0x11c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d013      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706a:	d00f      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a3f      	ldr	r2, [pc, #252]	; (800716c <TIM_Base_SetConfig+0x120>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00b      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a3e      	ldr	r2, [pc, #248]	; (8007170 <TIM_Base_SetConfig+0x124>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d007      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a3d      	ldr	r2, [pc, #244]	; (8007174 <TIM_Base_SetConfig+0x128>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a3c      	ldr	r2, [pc, #240]	; (8007178 <TIM_Base_SetConfig+0x12c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d108      	bne.n	800709e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a31      	ldr	r2, [pc, #196]	; (8007168 <TIM_Base_SetConfig+0x11c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d01f      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ac:	d01b      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a2e      	ldr	r2, [pc, #184]	; (800716c <TIM_Base_SetConfig+0x120>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d017      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a2d      	ldr	r2, [pc, #180]	; (8007170 <TIM_Base_SetConfig+0x124>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a2c      	ldr	r2, [pc, #176]	; (8007174 <TIM_Base_SetConfig+0x128>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00f      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a2c      	ldr	r2, [pc, #176]	; (800717c <TIM_Base_SetConfig+0x130>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00b      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a2b      	ldr	r2, [pc, #172]	; (8007180 <TIM_Base_SetConfig+0x134>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d007      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a2a      	ldr	r2, [pc, #168]	; (8007184 <TIM_Base_SetConfig+0x138>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d003      	beq.n	80070e6 <TIM_Base_SetConfig+0x9a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a25      	ldr	r2, [pc, #148]	; (8007178 <TIM_Base_SetConfig+0x12c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d108      	bne.n	80070f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a12      	ldr	r2, [pc, #72]	; (8007168 <TIM_Base_SetConfig+0x11c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d013      	beq.n	800714c <TIM_Base_SetConfig+0x100>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a13      	ldr	r2, [pc, #76]	; (8007174 <TIM_Base_SetConfig+0x128>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00f      	beq.n	800714c <TIM_Base_SetConfig+0x100>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a13      	ldr	r2, [pc, #76]	; (800717c <TIM_Base_SetConfig+0x130>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00b      	beq.n	800714c <TIM_Base_SetConfig+0x100>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a12      	ldr	r2, [pc, #72]	; (8007180 <TIM_Base_SetConfig+0x134>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <TIM_Base_SetConfig+0x100>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a11      	ldr	r2, [pc, #68]	; (8007184 <TIM_Base_SetConfig+0x138>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_Base_SetConfig+0x100>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a0c      	ldr	r2, [pc, #48]	; (8007178 <TIM_Base_SetConfig+0x12c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d103      	bne.n	8007154 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	615a      	str	r2, [r3, #20]
}
 800715a:	bf00      	nop
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40000400 	.word	0x40000400
 8007170:	40000800 	.word	0x40000800
 8007174:	40013400 	.word	0x40013400
 8007178:	40015000 	.word	0x40015000
 800717c:	40014000 	.word	0x40014000
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800

08007188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f023 0201 	bic.w	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f023 0302 	bic.w	r3, r3, #2
 80071d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a30      	ldr	r2, [pc, #192]	; (80072a4 <TIM_OC1_SetConfig+0x11c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d013      	beq.n	8007210 <TIM_OC1_SetConfig+0x88>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a2f      	ldr	r2, [pc, #188]	; (80072a8 <TIM_OC1_SetConfig+0x120>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00f      	beq.n	8007210 <TIM_OC1_SetConfig+0x88>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a2e      	ldr	r2, [pc, #184]	; (80072ac <TIM_OC1_SetConfig+0x124>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00b      	beq.n	8007210 <TIM_OC1_SetConfig+0x88>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a2d      	ldr	r2, [pc, #180]	; (80072b0 <TIM_OC1_SetConfig+0x128>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d007      	beq.n	8007210 <TIM_OC1_SetConfig+0x88>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a2c      	ldr	r2, [pc, #176]	; (80072b4 <TIM_OC1_SetConfig+0x12c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_OC1_SetConfig+0x88>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a2b      	ldr	r2, [pc, #172]	; (80072b8 <TIM_OC1_SetConfig+0x130>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d10c      	bne.n	800722a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0308 	bic.w	r3, r3, #8
 8007216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f023 0304 	bic.w	r3, r3, #4
 8007228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <TIM_OC1_SetConfig+0x11c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d013      	beq.n	800725a <TIM_OC1_SetConfig+0xd2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a1c      	ldr	r2, [pc, #112]	; (80072a8 <TIM_OC1_SetConfig+0x120>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00f      	beq.n	800725a <TIM_OC1_SetConfig+0xd2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a1b      	ldr	r2, [pc, #108]	; (80072ac <TIM_OC1_SetConfig+0x124>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00b      	beq.n	800725a <TIM_OC1_SetConfig+0xd2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a1a      	ldr	r2, [pc, #104]	; (80072b0 <TIM_OC1_SetConfig+0x128>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d007      	beq.n	800725a <TIM_OC1_SetConfig+0xd2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a19      	ldr	r2, [pc, #100]	; (80072b4 <TIM_OC1_SetConfig+0x12c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d003      	beq.n	800725a <TIM_OC1_SetConfig+0xd2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a18      	ldr	r2, [pc, #96]	; (80072b8 <TIM_OC1_SetConfig+0x130>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d111      	bne.n	800727e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	4313      	orrs	r3, r2
 8007272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	621a      	str	r2, [r3, #32]
}
 8007298:	bf00      	nop
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40013400 	.word	0x40013400
 80072ac:	40014000 	.word	0x40014000
 80072b0:	40014400 	.word	0x40014400
 80072b4:	40014800 	.word	0x40014800
 80072b8:	40015000 	.word	0x40015000

080072bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	f023 0210 	bic.w	r2, r3, #16
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0320 	bic.w	r3, r3, #32
 800730a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a2c      	ldr	r2, [pc, #176]	; (80073cc <TIM_OC2_SetConfig+0x110>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d007      	beq.n	8007330 <TIM_OC2_SetConfig+0x74>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a2b      	ldr	r2, [pc, #172]	; (80073d0 <TIM_OC2_SetConfig+0x114>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_OC2_SetConfig+0x74>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a2a      	ldr	r2, [pc, #168]	; (80073d4 <TIM_OC2_SetConfig+0x118>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d10d      	bne.n	800734c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	011b      	lsls	r3, r3, #4
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a1f      	ldr	r2, [pc, #124]	; (80073cc <TIM_OC2_SetConfig+0x110>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <TIM_OC2_SetConfig+0xc0>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a1e      	ldr	r2, [pc, #120]	; (80073d0 <TIM_OC2_SetConfig+0x114>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00f      	beq.n	800737c <TIM_OC2_SetConfig+0xc0>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <TIM_OC2_SetConfig+0x11c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00b      	beq.n	800737c <TIM_OC2_SetConfig+0xc0>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a1d      	ldr	r2, [pc, #116]	; (80073dc <TIM_OC2_SetConfig+0x120>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d007      	beq.n	800737c <TIM_OC2_SetConfig+0xc0>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a1c      	ldr	r2, [pc, #112]	; (80073e0 <TIM_OC2_SetConfig+0x124>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d003      	beq.n	800737c <TIM_OC2_SetConfig+0xc0>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a17      	ldr	r2, [pc, #92]	; (80073d4 <TIM_OC2_SetConfig+0x118>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d113      	bne.n	80073a4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007382:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800738a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4313      	orrs	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40012c00 	.word	0x40012c00
 80073d0:	40013400 	.word	0x40013400
 80073d4:	40015000 	.word	0x40015000
 80073d8:	40014000 	.word	0x40014000
 80073dc:	40014400 	.word	0x40014400
 80073e0:	40014800 	.word	0x40014800

080073e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a2b      	ldr	r2, [pc, #172]	; (80074f0 <TIM_OC3_SetConfig+0x10c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d007      	beq.n	8007456 <TIM_OC3_SetConfig+0x72>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a2a      	ldr	r2, [pc, #168]	; (80074f4 <TIM_OC3_SetConfig+0x110>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d003      	beq.n	8007456 <TIM_OC3_SetConfig+0x72>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a29      	ldr	r2, [pc, #164]	; (80074f8 <TIM_OC3_SetConfig+0x114>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d10d      	bne.n	8007472 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800745c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007470:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a1e      	ldr	r2, [pc, #120]	; (80074f0 <TIM_OC3_SetConfig+0x10c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d013      	beq.n	80074a2 <TIM_OC3_SetConfig+0xbe>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a1d      	ldr	r2, [pc, #116]	; (80074f4 <TIM_OC3_SetConfig+0x110>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00f      	beq.n	80074a2 <TIM_OC3_SetConfig+0xbe>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a1d      	ldr	r2, [pc, #116]	; (80074fc <TIM_OC3_SetConfig+0x118>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00b      	beq.n	80074a2 <TIM_OC3_SetConfig+0xbe>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a1c      	ldr	r2, [pc, #112]	; (8007500 <TIM_OC3_SetConfig+0x11c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d007      	beq.n	80074a2 <TIM_OC3_SetConfig+0xbe>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <TIM_OC3_SetConfig+0x120>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d003      	beq.n	80074a2 <TIM_OC3_SetConfig+0xbe>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a16      	ldr	r2, [pc, #88]	; (80074f8 <TIM_OC3_SetConfig+0x114>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d113      	bne.n	80074ca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	621a      	str	r2, [r3, #32]
}
 80074e4:	bf00      	nop
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40013400 	.word	0x40013400
 80074f8:	40015000 	.word	0x40015000
 80074fc:	40014000 	.word	0x40014000
 8007500:	40014400 	.word	0x40014400
 8007504:	40014800 	.word	0x40014800

08007508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	031b      	lsls	r3, r3, #12
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a1a      	ldr	r2, [pc, #104]	; (80075d0 <TIM_OC4_SetConfig+0xc8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d013      	beq.n	8007594 <TIM_OC4_SetConfig+0x8c>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a19      	ldr	r2, [pc, #100]	; (80075d4 <TIM_OC4_SetConfig+0xcc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00f      	beq.n	8007594 <TIM_OC4_SetConfig+0x8c>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a18      	ldr	r2, [pc, #96]	; (80075d8 <TIM_OC4_SetConfig+0xd0>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00b      	beq.n	8007594 <TIM_OC4_SetConfig+0x8c>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a17      	ldr	r2, [pc, #92]	; (80075dc <TIM_OC4_SetConfig+0xd4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d007      	beq.n	8007594 <TIM_OC4_SetConfig+0x8c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a16      	ldr	r2, [pc, #88]	; (80075e0 <TIM_OC4_SetConfig+0xd8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d003      	beq.n	8007594 <TIM_OC4_SetConfig+0x8c>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a15      	ldr	r2, [pc, #84]	; (80075e4 <TIM_OC4_SetConfig+0xdc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d109      	bne.n	80075a8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800759a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	019b      	lsls	r3, r3, #6
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	621a      	str	r2, [r3, #32]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40012c00 	.word	0x40012c00
 80075d4:	40013400 	.word	0x40013400
 80075d8:	40014000 	.word	0x40014000
 80075dc:	40014400 	.word	0x40014400
 80075e0:	40014800 	.word	0x40014800
 80075e4:	40015000 	.word	0x40015000

080075e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800762c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	4313      	orrs	r3, r2
 8007638:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a19      	ldr	r2, [pc, #100]	; (80076a4 <TIM_OC5_SetConfig+0xbc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d013      	beq.n	800766a <TIM_OC5_SetConfig+0x82>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a18      	ldr	r2, [pc, #96]	; (80076a8 <TIM_OC5_SetConfig+0xc0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00f      	beq.n	800766a <TIM_OC5_SetConfig+0x82>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a17      	ldr	r2, [pc, #92]	; (80076ac <TIM_OC5_SetConfig+0xc4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00b      	beq.n	800766a <TIM_OC5_SetConfig+0x82>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a16      	ldr	r2, [pc, #88]	; (80076b0 <TIM_OC5_SetConfig+0xc8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d007      	beq.n	800766a <TIM_OC5_SetConfig+0x82>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a15      	ldr	r2, [pc, #84]	; (80076b4 <TIM_OC5_SetConfig+0xcc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d003      	beq.n	800766a <TIM_OC5_SetConfig+0x82>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <TIM_OC5_SetConfig+0xd0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d109      	bne.n	800767e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	621a      	str	r2, [r3, #32]
}
 8007698:	bf00      	nop
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40013400 	.word	0x40013400
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40014400 	.word	0x40014400
 80076b4:	40014800 	.word	0x40014800
 80076b8:	40015000 	.word	0x40015000

080076bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	051b      	lsls	r3, r3, #20
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a1a      	ldr	r2, [pc, #104]	; (800777c <TIM_OC6_SetConfig+0xc0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d013      	beq.n	8007740 <TIM_OC6_SetConfig+0x84>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a19      	ldr	r2, [pc, #100]	; (8007780 <TIM_OC6_SetConfig+0xc4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00f      	beq.n	8007740 <TIM_OC6_SetConfig+0x84>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <TIM_OC6_SetConfig+0xc8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00b      	beq.n	8007740 <TIM_OC6_SetConfig+0x84>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a17      	ldr	r2, [pc, #92]	; (8007788 <TIM_OC6_SetConfig+0xcc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_OC6_SetConfig+0x84>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a16      	ldr	r2, [pc, #88]	; (800778c <TIM_OC6_SetConfig+0xd0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_OC6_SetConfig+0x84>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a15      	ldr	r2, [pc, #84]	; (8007790 <TIM_OC6_SetConfig+0xd4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d109      	bne.n	8007754 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	029b      	lsls	r3, r3, #10
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	621a      	str	r2, [r3, #32]
}
 800776e:	bf00      	nop
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40012c00 	.word	0x40012c00
 8007780:	40013400 	.word	0x40013400
 8007784:	40014000 	.word	0x40014000
 8007788:	40014400 	.word	0x40014400
 800778c:	40014800 	.word	0x40014800
 8007790:	40015000 	.word	0x40015000

08007794 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ac:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077be:	f023 0307 	bic.w	r3, r3, #7
 80077c2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b30      	cmp	r3, #48	; 0x30
 80077dc:	d05c      	beq.n	8007898 <TIM_SlaveTimer_SetConfig+0x104>
 80077de:	2b30      	cmp	r3, #48	; 0x30
 80077e0:	d806      	bhi.n	80077f0 <TIM_SlaveTimer_SetConfig+0x5c>
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d058      	beq.n	8007898 <TIM_SlaveTimer_SetConfig+0x104>
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d056      	beq.n	8007898 <TIM_SlaveTimer_SetConfig+0x104>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d054      	beq.n	8007898 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80077ee:	e054      	b.n	800789a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80077f0:	2b50      	cmp	r3, #80	; 0x50
 80077f2:	d03d      	beq.n	8007870 <TIM_SlaveTimer_SetConfig+0xdc>
 80077f4:	2b50      	cmp	r3, #80	; 0x50
 80077f6:	d802      	bhi.n	80077fe <TIM_SlaveTimer_SetConfig+0x6a>
 80077f8:	2b40      	cmp	r3, #64	; 0x40
 80077fa:	d010      	beq.n	800781e <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 80077fc:	e04d      	b.n	800789a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80077fe:	2b60      	cmp	r3, #96	; 0x60
 8007800:	d040      	beq.n	8007884 <TIM_SlaveTimer_SetConfig+0xf0>
 8007802:	2b70      	cmp	r3, #112	; 0x70
 8007804:	d000      	beq.n	8007808 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8007806:	e048      	b.n	800789a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6818      	ldr	r0, [r3, #0]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	68d9      	ldr	r1, [r3, #12]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f000 f9e2 	bl	8007be0 <TIM_ETR_SetConfig>
      break;
 800781c:	e03d      	b.n	800789a <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b05      	cmp	r3, #5
 8007824:	d101      	bne.n	800782a <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e038      	b.n	800789c <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6a1a      	ldr	r2, [r3, #32]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0201 	bic.w	r2, r2, #1
 8007840:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007850:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	621a      	str	r2, [r3, #32]
      break;
 800786e:	e014      	b.n	800789a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	6899      	ldr	r1, [r3, #8]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	461a      	mov	r2, r3
 800787e:	f000 f87f 	bl	8007980 <TIM_TI1_ConfigInputStage>
      break;
 8007882:	e00a      	b.n	800789a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6818      	ldr	r0, [r3, #0]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	6899      	ldr	r1, [r3, #8]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	461a      	mov	r2, r3
 8007892:	f000 f8e1 	bl	8007a58 <TIM_TI2_ConfigInputStage>
      break;
 8007896:	e000      	b.n	800789a <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8007898:	bf00      	nop
  }
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f023 0201 	bic.w	r2, r3, #1
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4a26      	ldr	r2, [pc, #152]	; (8007968 <TIM_TI1_SetConfig+0xc4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d017      	beq.n	8007902 <TIM_TI1_SetConfig+0x5e>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d8:	d013      	beq.n	8007902 <TIM_TI1_SetConfig+0x5e>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4a23      	ldr	r2, [pc, #140]	; (800796c <TIM_TI1_SetConfig+0xc8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_TI1_SetConfig+0x5e>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4a22      	ldr	r2, [pc, #136]	; (8007970 <TIM_TI1_SetConfig+0xcc>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_TI1_SetConfig+0x5e>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4a21      	ldr	r2, [pc, #132]	; (8007974 <TIM_TI1_SetConfig+0xd0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_TI1_SetConfig+0x5e>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4a20      	ldr	r2, [pc, #128]	; (8007978 <TIM_TI1_SetConfig+0xd4>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_TI1_SetConfig+0x5e>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4a1f      	ldr	r2, [pc, #124]	; (800797c <TIM_TI1_SetConfig+0xd8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d101      	bne.n	8007906 <TIM_TI1_SetConfig+0x62>
 8007902:	2301      	movs	r3, #1
 8007904:	e000      	b.n	8007908 <TIM_TI1_SetConfig+0x64>
 8007906:	2300      	movs	r3, #0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d008      	beq.n	800791e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f023 0303 	bic.w	r3, r3, #3
 8007912:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4313      	orrs	r3, r2
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	e003      	b.n	8007926 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f043 0301 	orr.w	r3, r3, #1
 8007924:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800792c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	b2db      	uxtb	r3, r3
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f023 030a 	bic.w	r3, r3, #10
 8007940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f003 030a 	and.w	r3, r3, #10
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	621a      	str	r2, [r3, #32]
}
 800795a:	bf00      	nop
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40012c00 	.word	0x40012c00
 800796c:	40000400 	.word	0x40000400
 8007970:	40000800 	.word	0x40000800
 8007974:	40013400 	.word	0x40013400
 8007978:	40014000 	.word	0x40014000
 800797c:	40015000 	.word	0x40015000

08007980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	f023 0201 	bic.w	r2, r3, #1
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f023 030a 	bic.w	r3, r3, #10
 80079bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079de:	b480      	push	{r7}
 80079e0:	b087      	sub	sp, #28
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	f023 0210 	bic.w	r2, r3, #16
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	031b      	lsls	r3, r3, #12
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	621a      	str	r2, [r3, #32]
}
 8007a4c:	bf00      	nop
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	f023 0210 	bic.w	r2, r3, #16
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	031b      	lsls	r3, r3, #12
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	011b      	lsls	r3, r3, #4
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	621a      	str	r2, [r3, #32]
}
 8007aac:	bf00      	nop
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f023 0303 	bic.w	r3, r3, #3
 8007ae4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007af4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007b08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	621a      	str	r2, [r3, #32]
}
 8007b24:	bf00      	nop
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	031b      	lsls	r3, r3, #12
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007b82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	031b      	lsls	r3, r3, #12
 8007b88:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	621a      	str	r2, [r3, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	f043 0307 	orr.w	r3, r3, #7
 8007bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	609a      	str	r2, [r3, #8]
}
 8007bd4:	bf00      	nop
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	021a      	lsls	r2, r3, #8
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	609a      	str	r2, [r3, #8]
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	2201      	movs	r2, #1
 8007c34:	fa02 f303 	lsl.w	r3, r2, r3
 8007c38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a1a      	ldr	r2, [r3, #32]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a1a      	ldr	r2, [r3, #32]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f003 031f 	and.w	r3, r3, #31
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	fa01 f303 	lsl.w	r3, r1, r3
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	621a      	str	r2, [r3, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
	...

08007c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e06d      	b.n	8007d60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a30      	ldr	r2, [pc, #192]	; (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d009      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a2f      	ldr	r2, [pc, #188]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d004      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a2d      	ldr	r2, [pc, #180]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d108      	bne.n	8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d01d      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d00:	d018      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a1c      	ldr	r2, [pc, #112]	; (8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d013      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a1a      	ldr	r2, [pc, #104]	; (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d00e      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a15      	ldr	r2, [pc, #84]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d009      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a16      	ldr	r2, [pc, #88]	; (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d004      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a11      	ldr	r2, [pc, #68]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d10c      	bne.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	40012c00 	.word	0x40012c00
 8007d70:	40013400 	.word	0x40013400
 8007d74:	40015000 	.word	0x40015000
 8007d78:	40000400 	.word	0x40000400
 8007d7c:	40000800 	.word	0x40000800
 8007d80:	40014000 	.word	0x40014000

08007d84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d101      	bne.n	8007da0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e06a      	b.n	8007e76 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	041b      	lsls	r3, r3, #16
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a19      	ldr	r2, [pc, #100]	; (8007e84 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d009      	beq.n	8007e38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a17      	ldr	r2, [pc, #92]	; (8007e88 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d004      	beq.n	8007e38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a16      	ldr	r2, [pc, #88]	; (8007e8c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d115      	bne.n	8007e64 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	051b      	lsls	r3, r3, #20
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	40012c00 	.word	0x40012c00
 8007e88:	40013400 	.word	0x40013400
 8007e8c:	40015000 	.word	0x40015000

08007e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e040      	b.n	8007f60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7f9 feba 	bl	8001c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2224      	movs	r2, #36	; 0x24
 8007ef8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0201 	bic.w	r2, r2, #1
 8007f08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fb7c 	bl	8008608 <UART_SetConfig>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d101      	bne.n	8007f1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e022      	b.n	8007f60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fd8a 	bl	8008a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689a      	ldr	r2, [r3, #8]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0201 	orr.w	r2, r2, #1
 8007f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fe11 	bl	8008b80 <UART_CheckIdleState>
 8007f5e:	4603      	mov	r3, r0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08a      	sub	sp, #40	; 0x28
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	4613      	mov	r3, r2
 8007f76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	f040 8081 	bne.w	8008084 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <HAL_UART_Transmit+0x26>
 8007f88:	88fb      	ldrh	r3, [r7, #6]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e079      	b.n	8008086 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_UART_Transmit+0x38>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e072      	b.n	8008086 <HAL_UART_Transmit+0x11e>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2221      	movs	r2, #33	; 0x21
 8007fb2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007fb4:	f7fa f858 	bl	8002068 <HAL_GetTick>
 8007fb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	88fa      	ldrh	r2, [r7, #6]
 8007fbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	88fa      	ldrh	r2, [r7, #6]
 8007fc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd2:	d108      	bne.n	8007fe6 <HAL_UART_Transmit+0x7e>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d104      	bne.n	8007fe6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	61bb      	str	r3, [r7, #24]
 8007fe4:	e003      	b.n	8007fee <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007fee:	e02d      	b.n	800804c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2180      	movs	r1, #128	; 0x80
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fe05 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e03d      	b.n	8008086 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10b      	bne.n	8008028 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	881a      	ldrh	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800801c:	b292      	uxth	r2, r2
 800801e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	3302      	adds	r3, #2
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	e008      	b.n	800803a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	781a      	ldrb	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	b292      	uxth	r2, r2
 8008032:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	3301      	adds	r3, #1
 8008038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1cb      	bne.n	8007ff0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2200      	movs	r2, #0
 8008060:	2140      	movs	r1, #64	; 0x40
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fdd1 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e009      	b.n	8008086 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2220      	movs	r2, #32
 8008076:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	e000      	b.n	8008086 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008084:	2302      	movs	r3, #2
  }
}
 8008086:	4618      	mov	r0, r3
 8008088:	3720      	adds	r7, #32
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	4613      	mov	r3, r2
 800809c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080a2:	2b20      	cmp	r3, #32
 80080a4:	f040 808a 	bne.w	80081bc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <HAL_UART_Receive_IT+0x24>
 80080ae:	88fb      	ldrh	r3, [r7, #6]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e082      	b.n	80081be <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_UART_Receive_IT+0x36>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e07b      	b.n	80081be <HAL_UART_Receive_IT+0x12e>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	88fa      	ldrh	r2, [r7, #6]
 80080d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	88fa      	ldrh	r2, [r7, #6]
 80080e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f2:	d10e      	bne.n	8008112 <HAL_UART_Receive_IT+0x82>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d105      	bne.n	8008108 <HAL_UART_Receive_IT+0x78>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008102:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008106:	e02d      	b.n	8008164 <HAL_UART_Receive_IT+0xd4>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	22ff      	movs	r2, #255	; 0xff
 800810c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008110:	e028      	b.n	8008164 <HAL_UART_Receive_IT+0xd4>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10d      	bne.n	8008136 <HAL_UART_Receive_IT+0xa6>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d104      	bne.n	800812c <HAL_UART_Receive_IT+0x9c>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800812a:	e01b      	b.n	8008164 <HAL_UART_Receive_IT+0xd4>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	227f      	movs	r2, #127	; 0x7f
 8008130:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008134:	e016      	b.n	8008164 <HAL_UART_Receive_IT+0xd4>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800813e:	d10d      	bne.n	800815c <HAL_UART_Receive_IT+0xcc>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <HAL_UART_Receive_IT+0xc2>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	227f      	movs	r2, #127	; 0x7f
 800814c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008150:	e008      	b.n	8008164 <HAL_UART_Receive_IT+0xd4>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	223f      	movs	r2, #63	; 0x3f
 8008156:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800815a:	e003      	b.n	8008164 <HAL_UART_Receive_IT+0xd4>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2222      	movs	r2, #34	; 0x22
 800816e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0201 	orr.w	r2, r2, #1
 800817e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008188:	d107      	bne.n	800819a <HAL_UART_Receive_IT+0x10a>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d103      	bne.n	800819a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4a0d      	ldr	r2, [pc, #52]	; (80081cc <HAL_UART_Receive_IT+0x13c>)
 8008196:	661a      	str	r2, [r3, #96]	; 0x60
 8008198:	e002      	b.n	80081a0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4a0c      	ldr	r2, [pc, #48]	; (80081d0 <HAL_UART_Receive_IT+0x140>)
 800819e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80081b6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e000      	b.n	80081be <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80081bc:	2302      	movs	r3, #2
  }
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	08008f19 	.word	0x08008f19
 80081d0:	08008e73 	.word	0x08008e73

080081d4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 80081dc:	2301      	movs	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]

  /* Disable interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80081ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0201 	bic.w	r2, r2, #1
 80081fe:	609a      	str	r2, [r3, #8]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00f      	beq.n	8008228 <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008212:	2b80      	cmp	r3, #128	; 0x80
 8008214:	d104      	bne.n	8008220 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800821a:	4a47      	ldr	r2, [pc, #284]	; (8008338 <HAL_UART_Abort_IT+0x164>)
 800821c:	635a      	str	r2, [r3, #52]	; 0x34
 800821e:	e003      	b.n	8008228 <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008224:	2200      	movs	r2, #0
 8008226:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00f      	beq.n	8008250 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823a:	2b40      	cmp	r3, #64	; 0x40
 800823c:	d104      	bne.n	8008248 <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008242:	4a3e      	ldr	r2, [pc, #248]	; (800833c <HAL_UART_Abort_IT+0x168>)
 8008244:	635a      	str	r2, [r3, #52]	; 0x34
 8008246:	e003      	b.n	8008250 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800824c:	2200      	movs	r2, #0
 800824e:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825a:	2b80      	cmp	r3, #128	; 0x80
 800825c:	d11a      	bne.n	8008294 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800826c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00e      	beq.n	8008294 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800827a:	4618      	mov	r0, r3
 800827c:	f7fb ffcf 	bl	800421e <HAL_DMA_Abort_IT>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d004      	beq.n	8008290 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800828a:	2200      	movs	r2, #0
 800828c:	635a      	str	r2, [r3, #52]	; 0x34
 800828e:	e001      	b.n	8008294 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        abortcplt = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829e:	2b40      	cmp	r3, #64	; 0x40
 80082a0:	d11c      	bne.n	80082dc <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d010      	beq.n	80082dc <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fb ffad 	bl	800421e <HAL_DMA_Abort_IT>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ce:	2200      	movs	r2, #0
 80082d0:	635a      	str	r2, [r3, #52]	; 0x34
        abortcplt = 1U;
 80082d2:	2301      	movs	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	e001      	b.n	80082dc <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        abortcplt = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d125      	bne.n	800832e <HAL_UART_Abort_IT+0x15a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	661a      	str	r2, [r3, #96]	; 0x60
    huart->TxISR = NULL;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	665a      	str	r2, [r3, #100]	; 0x64

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	220f      	movs	r2, #15
 800830a:	621a      	str	r2, [r3, #32]


    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	699a      	ldr	r2, [r3, #24]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0208 	orr.w	r2, r2, #8
 800831a:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f963 	bl	80085f4 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	08008d6d 	.word	0x08008d6d
 800833c:	08008dcf 	.word	0x08008dcf

08008340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	f640 030f 	movw	r3, #2063	; 0x80f
 8008366:	4013      	ands	r3, r2
 8008368:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d113      	bne.n	8008398 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00e      	beq.n	8008398 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8114 	beq.w	80085b6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
      }
      return;
 8008396:	e10e      	b.n	80085b6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 80d6 	beq.w	800854c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d105      	bne.n	80083b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 80cb 	beq.w	800854c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00e      	beq.n	80083de <HAL_UART_IRQHandler+0x9e>
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d009      	beq.n	80083de <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2201      	movs	r2, #1
 80083d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083d6:	f043 0201 	orr.w	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00e      	beq.n	8008406 <HAL_UART_IRQHandler+0xc6>
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d009      	beq.n	8008406 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2202      	movs	r2, #2
 80083f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fe:	f043 0204 	orr.w	r2, r3, #4
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <HAL_UART_IRQHandler+0xee>
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2204      	movs	r2, #4
 8008420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008426:	f043 0202 	orr.w	r2, r3, #2
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b00      	cmp	r3, #0
 8008436:	d013      	beq.n	8008460 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f003 0320 	and.w	r3, r3, #32
 800843e:	2b00      	cmp	r3, #0
 8008440:	d104      	bne.n	800844c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008448:	2b00      	cmp	r3, #0
 800844a:	d009      	beq.n	8008460 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2208      	movs	r2, #8
 8008452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008458:	f043 0208 	orr.w	r2, r3, #8
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00f      	beq.n	800848a <HAL_UART_IRQHandler+0x14a>
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00a      	beq.n	800848a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800847c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008482:	f043 0220 	orr.w	r2, r3, #32
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 8093 	beq.w	80085ba <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f003 0320 	and.w	r3, r3, #32
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00c      	beq.n	80084b8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d007      	beq.n	80084b8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c8:	2b40      	cmp	r3, #64	; 0x40
 80084ca:	d004      	beq.n	80084d6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d031      	beq.n	800853a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fc12 	bl	8008d00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d123      	bne.n	8008532 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d013      	beq.n	800852a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008506:	4a30      	ldr	r2, [pc, #192]	; (80085c8 <HAL_UART_IRQHandler+0x288>)
 8008508:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800850e:	4618      	mov	r0, r3
 8008510:	f7fb fe85 	bl	800421e <HAL_DMA_Abort_IT>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d016      	beq.n	8008548 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800851e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008528:	e00e      	b.n	8008548 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f858 	bl	80085e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008530:	e00a      	b.n	8008548 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f854 	bl	80085e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008538:	e006      	b.n	8008548 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f850 	bl	80085e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008546:	e038      	b.n	80085ba <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008548:	bf00      	nop
    return;
 800854a:	e036      	b.n	80085ba <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00d      	beq.n	8008572 <HAL_UART_IRQHandler+0x232>
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d008      	beq.n	8008572 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008568:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fd27 	bl	8008fbe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008570:	e026      	b.n	80085c0 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00d      	beq.n	8008598 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008582:	2b00      	cmp	r3, #0
 8008584:	d008      	beq.n	8008598 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800858a:	2b00      	cmp	r3, #0
 800858c:	d017      	beq.n	80085be <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
    }
    return;
 8008596:	e012      	b.n	80085be <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00e      	beq.n	80085c0 <HAL_UART_IRQHandler+0x280>
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d009      	beq.n	80085c0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fc47 	bl	8008e40 <UART_EndTransmit_IT>
    return;
 80085b2:	bf00      	nop
 80085b4:	e004      	b.n	80085c0 <HAL_UART_IRQHandler+0x280>
      return;
 80085b6:	bf00      	nop
 80085b8:	e002      	b.n	80085c0 <HAL_UART_IRQHandler+0x280>
    return;
 80085ba:	bf00      	nop
 80085bc:	e000      	b.n	80085c0 <HAL_UART_IRQHandler+0x280>
    return;
 80085be:	bf00      	nop
  }

}
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	08008d41 	.word	0x08008d41

080085cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008610:	2300      	movs	r3, #0
 8008612:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	431a      	orrs	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	431a      	orrs	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	4313      	orrs	r3, r2
 800862e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	4bac      	ldr	r3, [pc, #688]	; (80088e8 <UART_SetConfig+0x2e0>)
 8008638:	4013      	ands	r3, r2
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	6939      	ldr	r1, [r7, #16]
 8008640:	430b      	orrs	r3, r1
 8008642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	430a      	orrs	r2, r1
 800867c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a9a      	ldr	r2, [pc, #616]	; (80088ec <UART_SetConfig+0x2e4>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d121      	bne.n	80086cc <UART_SetConfig+0xc4>
 8008688:	4b99      	ldr	r3, [pc, #612]	; (80088f0 <UART_SetConfig+0x2e8>)
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	2b03      	cmp	r3, #3
 8008692:	d817      	bhi.n	80086c4 <UART_SetConfig+0xbc>
 8008694:	a201      	add	r2, pc, #4	; (adr r2, 800869c <UART_SetConfig+0x94>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	080086ad 	.word	0x080086ad
 80086a0:	080086b9 	.word	0x080086b9
 80086a4:	080086bf 	.word	0x080086bf
 80086a8:	080086b3 	.word	0x080086b3
 80086ac:	2301      	movs	r3, #1
 80086ae:	77fb      	strb	r3, [r7, #31]
 80086b0:	e0b2      	b.n	8008818 <UART_SetConfig+0x210>
 80086b2:	2302      	movs	r3, #2
 80086b4:	77fb      	strb	r3, [r7, #31]
 80086b6:	e0af      	b.n	8008818 <UART_SetConfig+0x210>
 80086b8:	2304      	movs	r3, #4
 80086ba:	77fb      	strb	r3, [r7, #31]
 80086bc:	e0ac      	b.n	8008818 <UART_SetConfig+0x210>
 80086be:	2308      	movs	r3, #8
 80086c0:	77fb      	strb	r3, [r7, #31]
 80086c2:	e0a9      	b.n	8008818 <UART_SetConfig+0x210>
 80086c4:	2310      	movs	r3, #16
 80086c6:	77fb      	strb	r3, [r7, #31]
 80086c8:	bf00      	nop
 80086ca:	e0a5      	b.n	8008818 <UART_SetConfig+0x210>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a88      	ldr	r2, [pc, #544]	; (80088f4 <UART_SetConfig+0x2ec>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d123      	bne.n	800871e <UART_SetConfig+0x116>
 80086d6:	4b86      	ldr	r3, [pc, #536]	; (80088f0 <UART_SetConfig+0x2e8>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e2:	d012      	beq.n	800870a <UART_SetConfig+0x102>
 80086e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e8:	d802      	bhi.n	80086f0 <UART_SetConfig+0xe8>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d007      	beq.n	80086fe <UART_SetConfig+0xf6>
 80086ee:	e012      	b.n	8008716 <UART_SetConfig+0x10e>
 80086f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086f4:	d00c      	beq.n	8008710 <UART_SetConfig+0x108>
 80086f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086fa:	d003      	beq.n	8008704 <UART_SetConfig+0xfc>
 80086fc:	e00b      	b.n	8008716 <UART_SetConfig+0x10e>
 80086fe:	2300      	movs	r3, #0
 8008700:	77fb      	strb	r3, [r7, #31]
 8008702:	e089      	b.n	8008818 <UART_SetConfig+0x210>
 8008704:	2302      	movs	r3, #2
 8008706:	77fb      	strb	r3, [r7, #31]
 8008708:	e086      	b.n	8008818 <UART_SetConfig+0x210>
 800870a:	2304      	movs	r3, #4
 800870c:	77fb      	strb	r3, [r7, #31]
 800870e:	e083      	b.n	8008818 <UART_SetConfig+0x210>
 8008710:	2308      	movs	r3, #8
 8008712:	77fb      	strb	r3, [r7, #31]
 8008714:	e080      	b.n	8008818 <UART_SetConfig+0x210>
 8008716:	2310      	movs	r3, #16
 8008718:	77fb      	strb	r3, [r7, #31]
 800871a:	bf00      	nop
 800871c:	e07c      	b.n	8008818 <UART_SetConfig+0x210>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a75      	ldr	r2, [pc, #468]	; (80088f8 <UART_SetConfig+0x2f0>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d123      	bne.n	8008770 <UART_SetConfig+0x168>
 8008728:	4b71      	ldr	r3, [pc, #452]	; (80088f0 <UART_SetConfig+0x2e8>)
 800872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008730:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008734:	d012      	beq.n	800875c <UART_SetConfig+0x154>
 8008736:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800873a:	d802      	bhi.n	8008742 <UART_SetConfig+0x13a>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <UART_SetConfig+0x148>
 8008740:	e012      	b.n	8008768 <UART_SetConfig+0x160>
 8008742:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008746:	d00c      	beq.n	8008762 <UART_SetConfig+0x15a>
 8008748:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800874c:	d003      	beq.n	8008756 <UART_SetConfig+0x14e>
 800874e:	e00b      	b.n	8008768 <UART_SetConfig+0x160>
 8008750:	2300      	movs	r3, #0
 8008752:	77fb      	strb	r3, [r7, #31]
 8008754:	e060      	b.n	8008818 <UART_SetConfig+0x210>
 8008756:	2302      	movs	r3, #2
 8008758:	77fb      	strb	r3, [r7, #31]
 800875a:	e05d      	b.n	8008818 <UART_SetConfig+0x210>
 800875c:	2304      	movs	r3, #4
 800875e:	77fb      	strb	r3, [r7, #31]
 8008760:	e05a      	b.n	8008818 <UART_SetConfig+0x210>
 8008762:	2308      	movs	r3, #8
 8008764:	77fb      	strb	r3, [r7, #31]
 8008766:	e057      	b.n	8008818 <UART_SetConfig+0x210>
 8008768:	2310      	movs	r3, #16
 800876a:	77fb      	strb	r3, [r7, #31]
 800876c:	bf00      	nop
 800876e:	e053      	b.n	8008818 <UART_SetConfig+0x210>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a61      	ldr	r2, [pc, #388]	; (80088fc <UART_SetConfig+0x2f4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d123      	bne.n	80087c2 <UART_SetConfig+0x1ba>
 800877a:	4b5d      	ldr	r3, [pc, #372]	; (80088f0 <UART_SetConfig+0x2e8>)
 800877c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008786:	d012      	beq.n	80087ae <UART_SetConfig+0x1a6>
 8008788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800878c:	d802      	bhi.n	8008794 <UART_SetConfig+0x18c>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <UART_SetConfig+0x19a>
 8008792:	e012      	b.n	80087ba <UART_SetConfig+0x1b2>
 8008794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008798:	d00c      	beq.n	80087b4 <UART_SetConfig+0x1ac>
 800879a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800879e:	d003      	beq.n	80087a8 <UART_SetConfig+0x1a0>
 80087a0:	e00b      	b.n	80087ba <UART_SetConfig+0x1b2>
 80087a2:	2300      	movs	r3, #0
 80087a4:	77fb      	strb	r3, [r7, #31]
 80087a6:	e037      	b.n	8008818 <UART_SetConfig+0x210>
 80087a8:	2302      	movs	r3, #2
 80087aa:	77fb      	strb	r3, [r7, #31]
 80087ac:	e034      	b.n	8008818 <UART_SetConfig+0x210>
 80087ae:	2304      	movs	r3, #4
 80087b0:	77fb      	strb	r3, [r7, #31]
 80087b2:	e031      	b.n	8008818 <UART_SetConfig+0x210>
 80087b4:	2308      	movs	r3, #8
 80087b6:	77fb      	strb	r3, [r7, #31]
 80087b8:	e02e      	b.n	8008818 <UART_SetConfig+0x210>
 80087ba:	2310      	movs	r3, #16
 80087bc:	77fb      	strb	r3, [r7, #31]
 80087be:	bf00      	nop
 80087c0:	e02a      	b.n	8008818 <UART_SetConfig+0x210>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a4e      	ldr	r2, [pc, #312]	; (8008900 <UART_SetConfig+0x2f8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d123      	bne.n	8008814 <UART_SetConfig+0x20c>
 80087cc:	4b48      	ldr	r3, [pc, #288]	; (80088f0 <UART_SetConfig+0x2e8>)
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80087d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087d8:	d012      	beq.n	8008800 <UART_SetConfig+0x1f8>
 80087da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087de:	d802      	bhi.n	80087e6 <UART_SetConfig+0x1de>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d007      	beq.n	80087f4 <UART_SetConfig+0x1ec>
 80087e4:	e012      	b.n	800880c <UART_SetConfig+0x204>
 80087e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087ea:	d00c      	beq.n	8008806 <UART_SetConfig+0x1fe>
 80087ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087f0:	d003      	beq.n	80087fa <UART_SetConfig+0x1f2>
 80087f2:	e00b      	b.n	800880c <UART_SetConfig+0x204>
 80087f4:	2300      	movs	r3, #0
 80087f6:	77fb      	strb	r3, [r7, #31]
 80087f8:	e00e      	b.n	8008818 <UART_SetConfig+0x210>
 80087fa:	2302      	movs	r3, #2
 80087fc:	77fb      	strb	r3, [r7, #31]
 80087fe:	e00b      	b.n	8008818 <UART_SetConfig+0x210>
 8008800:	2304      	movs	r3, #4
 8008802:	77fb      	strb	r3, [r7, #31]
 8008804:	e008      	b.n	8008818 <UART_SetConfig+0x210>
 8008806:	2308      	movs	r3, #8
 8008808:	77fb      	strb	r3, [r7, #31]
 800880a:	e005      	b.n	8008818 <UART_SetConfig+0x210>
 800880c:	2310      	movs	r3, #16
 800880e:	77fb      	strb	r3, [r7, #31]
 8008810:	bf00      	nop
 8008812:	e001      	b.n	8008818 <UART_SetConfig+0x210>
 8008814:	2310      	movs	r3, #16
 8008816:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008820:	f040 8090 	bne.w	8008944 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8008824:	7ffb      	ldrb	r3, [r7, #31]
 8008826:	2b08      	cmp	r3, #8
 8008828:	d86c      	bhi.n	8008904 <UART_SetConfig+0x2fc>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <UART_SetConfig+0x228>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008855 	.word	0x08008855
 8008834:	08008875 	.word	0x08008875
 8008838:	08008895 	.word	0x08008895
 800883c:	08008905 	.word	0x08008905
 8008840:	080088b1 	.word	0x080088b1
 8008844:	08008905 	.word	0x08008905
 8008848:	08008905 	.word	0x08008905
 800884c:	08008905 	.word	0x08008905
 8008850:	080088d1 	.word	0x080088d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008854:	f7fd f8c0 	bl	80059d8 <HAL_RCC_GetPCLK1Freq>
 8008858:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	005a      	lsls	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	441a      	add	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	fbb2 f3f3 	udiv	r3, r2, r3
 800886e:	b29b      	uxth	r3, r3
 8008870:	61bb      	str	r3, [r7, #24]
        break;
 8008872:	e04a      	b.n	800890a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008874:	f7fd f8d2 	bl	8005a1c <HAL_RCC_GetPCLK2Freq>
 8008878:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	005a      	lsls	r2, r3, #1
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	fbb2 f3f3 	udiv	r3, r2, r3
 800888e:	b29b      	uxth	r3, r3
 8008890:	61bb      	str	r3, [r7, #24]
        break;
 8008892:	e03a      	b.n	800890a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800889e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6852      	ldr	r2, [r2, #4]
 80088a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	61bb      	str	r3, [r7, #24]
        break;
 80088ae:	e02c      	b.n	800890a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088b0:	f7fd f81c 	bl	80058ec <HAL_RCC_GetSysClockFreq>
 80088b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	005a      	lsls	r2, r3, #1
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	441a      	add	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	61bb      	str	r3, [r7, #24]
        break;
 80088ce:	e01c      	b.n	800890a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	085b      	lsrs	r3, r3, #1
 80088d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	61bb      	str	r3, [r7, #24]
        break;
 80088e6:	e010      	b.n	800890a <UART_SetConfig+0x302>
 80088e8:	efff69f3 	.word	0xefff69f3
 80088ec:	40013800 	.word	0x40013800
 80088f0:	40021000 	.word	0x40021000
 80088f4:	40004400 	.word	0x40004400
 80088f8:	40004800 	.word	0x40004800
 80088fc:	40004c00 	.word	0x40004c00
 8008900:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	75fb      	strb	r3, [r7, #23]
        break;
 8008908:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	2b0f      	cmp	r3, #15
 800890e:	d916      	bls.n	800893e <UART_SetConfig+0x336>
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008916:	d212      	bcs.n	800893e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	b29b      	uxth	r3, r3
 800891c:	f023 030f 	bic.w	r3, r3, #15
 8008920:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	b29b      	uxth	r3, r3
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	b29a      	uxth	r2, r3
 800892e:	897b      	ldrh	r3, [r7, #10]
 8008930:	4313      	orrs	r3, r2
 8008932:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	897a      	ldrh	r2, [r7, #10]
 800893a:	60da      	str	r2, [r3, #12]
 800893c:	e072      	b.n	8008a24 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	75fb      	strb	r3, [r7, #23]
 8008942:	e06f      	b.n	8008a24 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8008944:	7ffb      	ldrb	r3, [r7, #31]
 8008946:	2b08      	cmp	r3, #8
 8008948:	d85b      	bhi.n	8008a02 <UART_SetConfig+0x3fa>
 800894a:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <UART_SetConfig+0x348>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	08008975 	.word	0x08008975
 8008954:	08008993 	.word	0x08008993
 8008958:	080089b1 	.word	0x080089b1
 800895c:	08008a03 	.word	0x08008a03
 8008960:	080089cd 	.word	0x080089cd
 8008964:	08008a03 	.word	0x08008a03
 8008968:	08008a03 	.word	0x08008a03
 800896c:	08008a03 	.word	0x08008a03
 8008970:	080089eb 	.word	0x080089eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008974:	f7fd f830 	bl	80059d8 <HAL_RCC_GetPCLK1Freq>
 8008978:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	085a      	lsrs	r2, r3, #1
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	441a      	add	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	fbb2 f3f3 	udiv	r3, r2, r3
 800898c:	b29b      	uxth	r3, r3
 800898e:	61bb      	str	r3, [r7, #24]
        break;
 8008990:	e03a      	b.n	8008a08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008992:	f7fd f843 	bl	8005a1c <HAL_RCC_GetPCLK2Freq>
 8008996:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	085a      	lsrs	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	441a      	add	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	61bb      	str	r3, [r7, #24]
        break;
 80089ae:	e02b      	b.n	8008a08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	085b      	lsrs	r3, r3, #1
 80089b6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80089ba:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6852      	ldr	r2, [r2, #4]
 80089c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	61bb      	str	r3, [r7, #24]
        break;
 80089ca:	e01d      	b.n	8008a08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089cc:	f7fc ff8e 	bl	80058ec <HAL_RCC_GetSysClockFreq>
 80089d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	085a      	lsrs	r2, r3, #1
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	441a      	add	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	61bb      	str	r3, [r7, #24]
        break;
 80089e8:	e00e      	b.n	8008a08 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	61bb      	str	r3, [r7, #24]
        break;
 8008a00:	e002      	b.n	8008a08 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	75fb      	strb	r3, [r7, #23]
        break;
 8008a06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	2b0f      	cmp	r3, #15
 8008a0c:	d908      	bls.n	8008a20 <UART_SetConfig+0x418>
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a14:	d204      	bcs.n	8008a20 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	60da      	str	r2, [r3, #12]
 8008a1e:	e001      	b.n	8008a24 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3720      	adds	r7, #32
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop

08008a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00a      	beq.n	8008a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00a      	beq.n	8008aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	f003 0308 	and.w	r3, r3, #8
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad0:	f003 0310 	and.w	r3, r3, #16
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00a      	beq.n	8008aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	430a      	orrs	r2, r1
 8008aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	f003 0320 	and.w	r3, r3, #32
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01a      	beq.n	8008b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b3a:	d10a      	bne.n	8008b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	605a      	str	r2, [r3, #4]
  }
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008b8e:	f7f9 fa6b 	bl	8002068 <HAL_GetTick>
 8008b92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0308 	and.w	r3, r3, #8
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d10e      	bne.n	8008bc0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ba2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f82a 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e020      	b.n	8008c02 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0304 	and.w	r3, r3, #4
 8008bca:	2b04      	cmp	r3, #4
 8008bcc:	d10e      	bne.n	8008bec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f814 	bl	8008c0a <UART_WaitOnFlagUntilTimeout>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e00a      	b.n	8008c02 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	603b      	str	r3, [r7, #0]
 8008c16:	4613      	mov	r3, r2
 8008c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c1a:	e05d      	b.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c22:	d059      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c24:	f7f9 fa20 	bl	8002068 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d302      	bcc.n	8008c3a <UART_WaitOnFlagUntilTimeout+0x30>
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d11b      	bne.n	8008c72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0201 	bic.w	r2, r2, #1
 8008c58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2220      	movs	r2, #32
 8008c64:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e042      	b.n	8008cf8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d02b      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c8e:	d123      	bne.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c98:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ca8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0201 	bic.w	r2, r2, #1
 8008cb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e00f      	b.n	8008cf8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	69da      	ldr	r2, [r3, #28]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2301      	moveq	r3, #1
 8008cea:	2300      	movne	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d092      	beq.n	8008c1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d16:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 0201 	bic.w	r2, r2, #1
 8008d26:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f7ff fc3e 	bl	80085e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d64:	bf00      	nop
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d7e:	2200      	movs	r2, #0
 8008d80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d004      	beq.n	8008d94 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d118      	bne.n	8008dc6 <UART_DMATxAbortCallback+0x5a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	220f      	movs	r2, #15
 8008db0:	621a      	str	r2, [r3, #32]


  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2220      	movs	r2, #32
 8008db6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f7ff fc18 	bl	80085f4 <HAL_UART_AbortCpltCallback>
 8008dc4:	e000      	b.n	8008dc8 <UART_DMATxAbortCallback+0x5c>
      return;
 8008dc6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008de0:	2200      	movs	r2, #0
 8008de2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d004      	beq.n	8008df6 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d120      	bne.n	8008e38 <UART_DMARxAbortCallback+0x6a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	220f      	movs	r2, #15
 8008e12:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	699a      	ldr	r2, [r3, #24]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f042 0208 	orr.w	r2, r2, #8
 8008e22:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2220      	movs	r2, #32
 8008e28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f7ff fbdf 	bl	80085f4 <HAL_UART_AbortCpltCallback>
 8008e36:	e000      	b.n	8008e3a <UART_DMARxAbortCallback+0x6c>
      return;
 8008e38:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e56:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff fbb1 	bl	80085cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e6a:	bf00      	nop
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e80:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e86:	2b22      	cmp	r3, #34	; 0x22
 8008e88:	d13a      	bne.n	8008f00 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e90:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e92:	89bb      	ldrh	r3, [r7, #12]
 8008e94:	b2d9      	uxtb	r1, r3
 8008e96:	89fb      	ldrh	r3, [r7, #14]
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9e:	400a      	ands	r2, r1
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d121      	bne.n	8008f10 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008eda:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689a      	ldr	r2, [r3, #8]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 0201 	bic.w	r2, r2, #1
 8008eea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7f8 fb27 	bl	800154c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008efe:	e007      	b.n	8008f10 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699a      	ldr	r2, [r3, #24]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0208 	orr.w	r2, r2, #8
 8008f0e:	619a      	str	r2, [r3, #24]
}
 8008f10:	bf00      	nop
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f26:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f2c:	2b22      	cmp	r3, #34	; 0x22
 8008f2e:	d13a      	bne.n	8008fa6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f36:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f3e:	89ba      	ldrh	r2, [r7, #12]
 8008f40:	89fb      	ldrh	r3, [r7, #14]
 8008f42:	4013      	ands	r3, r2
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f4e:	1c9a      	adds	r2, r3, #2
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d121      	bne.n	8008fb6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f80:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 0201 	bic.w	r2, r2, #1
 8008f90:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7f8 fad4 	bl	800154c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fa4:	e007      	b.n	8008fb6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	699a      	ldr	r2, [r3, #24]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f042 0208 	orr.w	r2, r2, #8
 8008fb4:	619a      	str	r2, [r3, #24]
}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008fc6:	bf00      	nop
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <atoi>:
 8008fd2:	220a      	movs	r2, #10
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	f000 b8db 	b.w	8009190 <strtol>
	...

08008fdc <__errno>:
 8008fdc:	4b01      	ldr	r3, [pc, #4]	; (8008fe4 <__errno+0x8>)
 8008fde:	6818      	ldr	r0, [r3, #0]
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000020 	.word	0x20000020

08008fe8 <__libc_init_array>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	4e0d      	ldr	r6, [pc, #52]	; (8009020 <__libc_init_array+0x38>)
 8008fec:	4c0d      	ldr	r4, [pc, #52]	; (8009024 <__libc_init_array+0x3c>)
 8008fee:	1ba4      	subs	r4, r4, r6
 8008ff0:	10a4      	asrs	r4, r4, #2
 8008ff2:	2500      	movs	r5, #0
 8008ff4:	42a5      	cmp	r5, r4
 8008ff6:	d109      	bne.n	800900c <__libc_init_array+0x24>
 8008ff8:	4e0b      	ldr	r6, [pc, #44]	; (8009028 <__libc_init_array+0x40>)
 8008ffa:	4c0c      	ldr	r4, [pc, #48]	; (800902c <__libc_init_array+0x44>)
 8008ffc:	f001 f804 	bl	800a008 <_init>
 8009000:	1ba4      	subs	r4, r4, r6
 8009002:	10a4      	asrs	r4, r4, #2
 8009004:	2500      	movs	r5, #0
 8009006:	42a5      	cmp	r5, r4
 8009008:	d105      	bne.n	8009016 <__libc_init_array+0x2e>
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009010:	4798      	blx	r3
 8009012:	3501      	adds	r5, #1
 8009014:	e7ee      	b.n	8008ff4 <__libc_init_array+0xc>
 8009016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800901a:	4798      	blx	r3
 800901c:	3501      	adds	r5, #1
 800901e:	e7f2      	b.n	8009006 <__libc_init_array+0x1e>
 8009020:	0800a228 	.word	0x0800a228
 8009024:	0800a228 	.word	0x0800a228
 8009028:	0800a228 	.word	0x0800a228
 800902c:	0800a22c 	.word	0x0800a22c

08009030 <memset>:
 8009030:	4402      	add	r2, r0
 8009032:	4603      	mov	r3, r0
 8009034:	4293      	cmp	r3, r2
 8009036:	d100      	bne.n	800903a <memset+0xa>
 8009038:	4770      	bx	lr
 800903a:	f803 1b01 	strb.w	r1, [r3], #1
 800903e:	e7f9      	b.n	8009034 <memset+0x4>

08009040 <iprintf>:
 8009040:	b40f      	push	{r0, r1, r2, r3}
 8009042:	4b0a      	ldr	r3, [pc, #40]	; (800906c <iprintf+0x2c>)
 8009044:	b513      	push	{r0, r1, r4, lr}
 8009046:	681c      	ldr	r4, [r3, #0]
 8009048:	b124      	cbz	r4, 8009054 <iprintf+0x14>
 800904a:	69a3      	ldr	r3, [r4, #24]
 800904c:	b913      	cbnz	r3, 8009054 <iprintf+0x14>
 800904e:	4620      	mov	r0, r4
 8009050:	f000 f8f4 	bl	800923c <__sinit>
 8009054:	ab05      	add	r3, sp, #20
 8009056:	9a04      	ldr	r2, [sp, #16]
 8009058:	68a1      	ldr	r1, [r4, #8]
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fa11 	bl	8009484 <_vfiprintf_r>
 8009062:	b002      	add	sp, #8
 8009064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009068:	b004      	add	sp, #16
 800906a:	4770      	bx	lr
 800906c:	20000020 	.word	0x20000020

08009070 <putchar>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4b08      	ldr	r3, [pc, #32]	; (8009094 <putchar+0x24>)
 8009074:	681c      	ldr	r4, [r3, #0]
 8009076:	4605      	mov	r5, r0
 8009078:	b124      	cbz	r4, 8009084 <putchar+0x14>
 800907a:	69a3      	ldr	r3, [r4, #24]
 800907c:	b913      	cbnz	r3, 8009084 <putchar+0x14>
 800907e:	4620      	mov	r0, r4
 8009080:	f000 f8dc 	bl	800923c <__sinit>
 8009084:	68a2      	ldr	r2, [r4, #8]
 8009086:	4629      	mov	r1, r5
 8009088:	4620      	mov	r0, r4
 800908a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800908e:	f000 bc97 	b.w	80099c0 <_putc_r>
 8009092:	bf00      	nop
 8009094:	20000020 	.word	0x20000020

08009098 <_strtol_l.isra.0>:
 8009098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	4680      	mov	r8, r0
 800909e:	4689      	mov	r9, r1
 80090a0:	4692      	mov	sl, r2
 80090a2:	461e      	mov	r6, r3
 80090a4:	460f      	mov	r7, r1
 80090a6:	463d      	mov	r5, r7
 80090a8:	9808      	ldr	r0, [sp, #32]
 80090aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090ae:	f000 f94f 	bl	8009350 <__locale_ctype_ptr_l>
 80090b2:	4420      	add	r0, r4
 80090b4:	7843      	ldrb	r3, [r0, #1]
 80090b6:	f013 0308 	ands.w	r3, r3, #8
 80090ba:	d132      	bne.n	8009122 <_strtol_l.isra.0+0x8a>
 80090bc:	2c2d      	cmp	r4, #45	; 0x2d
 80090be:	d132      	bne.n	8009126 <_strtol_l.isra.0+0x8e>
 80090c0:	787c      	ldrb	r4, [r7, #1]
 80090c2:	1cbd      	adds	r5, r7, #2
 80090c4:	2201      	movs	r2, #1
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	d05d      	beq.n	8009186 <_strtol_l.isra.0+0xee>
 80090ca:	2e10      	cmp	r6, #16
 80090cc:	d109      	bne.n	80090e2 <_strtol_l.isra.0+0x4a>
 80090ce:	2c30      	cmp	r4, #48	; 0x30
 80090d0:	d107      	bne.n	80090e2 <_strtol_l.isra.0+0x4a>
 80090d2:	782b      	ldrb	r3, [r5, #0]
 80090d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090d8:	2b58      	cmp	r3, #88	; 0x58
 80090da:	d14f      	bne.n	800917c <_strtol_l.isra.0+0xe4>
 80090dc:	786c      	ldrb	r4, [r5, #1]
 80090de:	2610      	movs	r6, #16
 80090e0:	3502      	adds	r5, #2
 80090e2:	2a00      	cmp	r2, #0
 80090e4:	bf14      	ite	ne
 80090e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80090ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80090ee:	2700      	movs	r7, #0
 80090f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80090f4:	4638      	mov	r0, r7
 80090f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80090fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80090fe:	2b09      	cmp	r3, #9
 8009100:	d817      	bhi.n	8009132 <_strtol_l.isra.0+0x9a>
 8009102:	461c      	mov	r4, r3
 8009104:	42a6      	cmp	r6, r4
 8009106:	dd23      	ble.n	8009150 <_strtol_l.isra.0+0xb8>
 8009108:	1c7b      	adds	r3, r7, #1
 800910a:	d007      	beq.n	800911c <_strtol_l.isra.0+0x84>
 800910c:	4584      	cmp	ip, r0
 800910e:	d31c      	bcc.n	800914a <_strtol_l.isra.0+0xb2>
 8009110:	d101      	bne.n	8009116 <_strtol_l.isra.0+0x7e>
 8009112:	45a6      	cmp	lr, r4
 8009114:	db19      	blt.n	800914a <_strtol_l.isra.0+0xb2>
 8009116:	fb00 4006 	mla	r0, r0, r6, r4
 800911a:	2701      	movs	r7, #1
 800911c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009120:	e7eb      	b.n	80090fa <_strtol_l.isra.0+0x62>
 8009122:	462f      	mov	r7, r5
 8009124:	e7bf      	b.n	80090a6 <_strtol_l.isra.0+0xe>
 8009126:	2c2b      	cmp	r4, #43	; 0x2b
 8009128:	bf04      	itt	eq
 800912a:	1cbd      	addeq	r5, r7, #2
 800912c:	787c      	ldrbeq	r4, [r7, #1]
 800912e:	461a      	mov	r2, r3
 8009130:	e7c9      	b.n	80090c6 <_strtol_l.isra.0+0x2e>
 8009132:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009136:	2b19      	cmp	r3, #25
 8009138:	d801      	bhi.n	800913e <_strtol_l.isra.0+0xa6>
 800913a:	3c37      	subs	r4, #55	; 0x37
 800913c:	e7e2      	b.n	8009104 <_strtol_l.isra.0+0x6c>
 800913e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009142:	2b19      	cmp	r3, #25
 8009144:	d804      	bhi.n	8009150 <_strtol_l.isra.0+0xb8>
 8009146:	3c57      	subs	r4, #87	; 0x57
 8009148:	e7dc      	b.n	8009104 <_strtol_l.isra.0+0x6c>
 800914a:	f04f 37ff 	mov.w	r7, #4294967295
 800914e:	e7e5      	b.n	800911c <_strtol_l.isra.0+0x84>
 8009150:	1c7b      	adds	r3, r7, #1
 8009152:	d108      	bne.n	8009166 <_strtol_l.isra.0+0xce>
 8009154:	2322      	movs	r3, #34	; 0x22
 8009156:	f8c8 3000 	str.w	r3, [r8]
 800915a:	4608      	mov	r0, r1
 800915c:	f1ba 0f00 	cmp.w	sl, #0
 8009160:	d107      	bne.n	8009172 <_strtol_l.isra.0+0xda>
 8009162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009166:	b102      	cbz	r2, 800916a <_strtol_l.isra.0+0xd2>
 8009168:	4240      	negs	r0, r0
 800916a:	f1ba 0f00 	cmp.w	sl, #0
 800916e:	d0f8      	beq.n	8009162 <_strtol_l.isra.0+0xca>
 8009170:	b10f      	cbz	r7, 8009176 <_strtol_l.isra.0+0xde>
 8009172:	f105 39ff 	add.w	r9, r5, #4294967295
 8009176:	f8ca 9000 	str.w	r9, [sl]
 800917a:	e7f2      	b.n	8009162 <_strtol_l.isra.0+0xca>
 800917c:	2430      	movs	r4, #48	; 0x30
 800917e:	2e00      	cmp	r6, #0
 8009180:	d1af      	bne.n	80090e2 <_strtol_l.isra.0+0x4a>
 8009182:	2608      	movs	r6, #8
 8009184:	e7ad      	b.n	80090e2 <_strtol_l.isra.0+0x4a>
 8009186:	2c30      	cmp	r4, #48	; 0x30
 8009188:	d0a3      	beq.n	80090d2 <_strtol_l.isra.0+0x3a>
 800918a:	260a      	movs	r6, #10
 800918c:	e7a9      	b.n	80090e2 <_strtol_l.isra.0+0x4a>
	...

08009190 <strtol>:
 8009190:	4b08      	ldr	r3, [pc, #32]	; (80091b4 <strtol+0x24>)
 8009192:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009194:	681c      	ldr	r4, [r3, #0]
 8009196:	4d08      	ldr	r5, [pc, #32]	; (80091b8 <strtol+0x28>)
 8009198:	6a23      	ldr	r3, [r4, #32]
 800919a:	2b00      	cmp	r3, #0
 800919c:	bf08      	it	eq
 800919e:	462b      	moveq	r3, r5
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	4613      	mov	r3, r2
 80091a4:	460a      	mov	r2, r1
 80091a6:	4601      	mov	r1, r0
 80091a8:	4620      	mov	r0, r4
 80091aa:	f7ff ff75 	bl	8009098 <_strtol_l.isra.0>
 80091ae:	b003      	add	sp, #12
 80091b0:	bd30      	pop	{r4, r5, pc}
 80091b2:	bf00      	nop
 80091b4:	20000020 	.word	0x20000020
 80091b8:	20000084 	.word	0x20000084

080091bc <std>:
 80091bc:	2300      	movs	r3, #0
 80091be:	b510      	push	{r4, lr}
 80091c0:	4604      	mov	r4, r0
 80091c2:	e9c0 3300 	strd	r3, r3, [r0]
 80091c6:	6083      	str	r3, [r0, #8]
 80091c8:	8181      	strh	r1, [r0, #12]
 80091ca:	6643      	str	r3, [r0, #100]	; 0x64
 80091cc:	81c2      	strh	r2, [r0, #14]
 80091ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091d2:	6183      	str	r3, [r0, #24]
 80091d4:	4619      	mov	r1, r3
 80091d6:	2208      	movs	r2, #8
 80091d8:	305c      	adds	r0, #92	; 0x5c
 80091da:	f7ff ff29 	bl	8009030 <memset>
 80091de:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <std+0x38>)
 80091e0:	6263      	str	r3, [r4, #36]	; 0x24
 80091e2:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <std+0x3c>)
 80091e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80091e6:	4b05      	ldr	r3, [pc, #20]	; (80091fc <std+0x40>)
 80091e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091ea:	4b05      	ldr	r3, [pc, #20]	; (8009200 <std+0x44>)
 80091ec:	6224      	str	r4, [r4, #32]
 80091ee:	6323      	str	r3, [r4, #48]	; 0x30
 80091f0:	bd10      	pop	{r4, pc}
 80091f2:	bf00      	nop
 80091f4:	08009a4d 	.word	0x08009a4d
 80091f8:	08009a6f 	.word	0x08009a6f
 80091fc:	08009aa7 	.word	0x08009aa7
 8009200:	08009acb 	.word	0x08009acb

08009204 <_cleanup_r>:
 8009204:	4901      	ldr	r1, [pc, #4]	; (800920c <_cleanup_r+0x8>)
 8009206:	f000 b885 	b.w	8009314 <_fwalk_reent>
 800920a:	bf00      	nop
 800920c:	08009dc1 	.word	0x08009dc1

08009210 <__sfmoreglue>:
 8009210:	b570      	push	{r4, r5, r6, lr}
 8009212:	1e4a      	subs	r2, r1, #1
 8009214:	2568      	movs	r5, #104	; 0x68
 8009216:	4355      	muls	r5, r2
 8009218:	460e      	mov	r6, r1
 800921a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800921e:	f000 f8ad 	bl	800937c <_malloc_r>
 8009222:	4604      	mov	r4, r0
 8009224:	b140      	cbz	r0, 8009238 <__sfmoreglue+0x28>
 8009226:	2100      	movs	r1, #0
 8009228:	e9c0 1600 	strd	r1, r6, [r0]
 800922c:	300c      	adds	r0, #12
 800922e:	60a0      	str	r0, [r4, #8]
 8009230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009234:	f7ff fefc 	bl	8009030 <memset>
 8009238:	4620      	mov	r0, r4
 800923a:	bd70      	pop	{r4, r5, r6, pc}

0800923c <__sinit>:
 800923c:	6983      	ldr	r3, [r0, #24]
 800923e:	b510      	push	{r4, lr}
 8009240:	4604      	mov	r4, r0
 8009242:	bb33      	cbnz	r3, 8009292 <__sinit+0x56>
 8009244:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009248:	6503      	str	r3, [r0, #80]	; 0x50
 800924a:	4b12      	ldr	r3, [pc, #72]	; (8009294 <__sinit+0x58>)
 800924c:	4a12      	ldr	r2, [pc, #72]	; (8009298 <__sinit+0x5c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6282      	str	r2, [r0, #40]	; 0x28
 8009252:	4298      	cmp	r0, r3
 8009254:	bf04      	itt	eq
 8009256:	2301      	moveq	r3, #1
 8009258:	6183      	streq	r3, [r0, #24]
 800925a:	f000 f81f 	bl	800929c <__sfp>
 800925e:	6060      	str	r0, [r4, #4]
 8009260:	4620      	mov	r0, r4
 8009262:	f000 f81b 	bl	800929c <__sfp>
 8009266:	60a0      	str	r0, [r4, #8]
 8009268:	4620      	mov	r0, r4
 800926a:	f000 f817 	bl	800929c <__sfp>
 800926e:	2200      	movs	r2, #0
 8009270:	60e0      	str	r0, [r4, #12]
 8009272:	2104      	movs	r1, #4
 8009274:	6860      	ldr	r0, [r4, #4]
 8009276:	f7ff ffa1 	bl	80091bc <std>
 800927a:	2201      	movs	r2, #1
 800927c:	2109      	movs	r1, #9
 800927e:	68a0      	ldr	r0, [r4, #8]
 8009280:	f7ff ff9c 	bl	80091bc <std>
 8009284:	2202      	movs	r2, #2
 8009286:	2112      	movs	r1, #18
 8009288:	68e0      	ldr	r0, [r4, #12]
 800928a:	f7ff ff97 	bl	80091bc <std>
 800928e:	2301      	movs	r3, #1
 8009290:	61a3      	str	r3, [r4, #24]
 8009292:	bd10      	pop	{r4, pc}
 8009294:	0800a084 	.word	0x0800a084
 8009298:	08009205 	.word	0x08009205

0800929c <__sfp>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	4b1b      	ldr	r3, [pc, #108]	; (800930c <__sfp+0x70>)
 80092a0:	681e      	ldr	r6, [r3, #0]
 80092a2:	69b3      	ldr	r3, [r6, #24]
 80092a4:	4607      	mov	r7, r0
 80092a6:	b913      	cbnz	r3, 80092ae <__sfp+0x12>
 80092a8:	4630      	mov	r0, r6
 80092aa:	f7ff ffc7 	bl	800923c <__sinit>
 80092ae:	3648      	adds	r6, #72	; 0x48
 80092b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	d503      	bpl.n	80092c0 <__sfp+0x24>
 80092b8:	6833      	ldr	r3, [r6, #0]
 80092ba:	b133      	cbz	r3, 80092ca <__sfp+0x2e>
 80092bc:	6836      	ldr	r6, [r6, #0]
 80092be:	e7f7      	b.n	80092b0 <__sfp+0x14>
 80092c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092c4:	b16d      	cbz	r5, 80092e2 <__sfp+0x46>
 80092c6:	3468      	adds	r4, #104	; 0x68
 80092c8:	e7f4      	b.n	80092b4 <__sfp+0x18>
 80092ca:	2104      	movs	r1, #4
 80092cc:	4638      	mov	r0, r7
 80092ce:	f7ff ff9f 	bl	8009210 <__sfmoreglue>
 80092d2:	6030      	str	r0, [r6, #0]
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d1f1      	bne.n	80092bc <__sfp+0x20>
 80092d8:	230c      	movs	r3, #12
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	4604      	mov	r4, r0
 80092de:	4620      	mov	r0, r4
 80092e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e2:	4b0b      	ldr	r3, [pc, #44]	; (8009310 <__sfp+0x74>)
 80092e4:	6665      	str	r5, [r4, #100]	; 0x64
 80092e6:	e9c4 5500 	strd	r5, r5, [r4]
 80092ea:	60a5      	str	r5, [r4, #8]
 80092ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80092f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80092f4:	2208      	movs	r2, #8
 80092f6:	4629      	mov	r1, r5
 80092f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092fc:	f7ff fe98 	bl	8009030 <memset>
 8009300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009308:	e7e9      	b.n	80092de <__sfp+0x42>
 800930a:	bf00      	nop
 800930c:	0800a084 	.word	0x0800a084
 8009310:	ffff0001 	.word	0xffff0001

08009314 <_fwalk_reent>:
 8009314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009318:	4680      	mov	r8, r0
 800931a:	4689      	mov	r9, r1
 800931c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009320:	2600      	movs	r6, #0
 8009322:	b914      	cbnz	r4, 800932a <_fwalk_reent+0x16>
 8009324:	4630      	mov	r0, r6
 8009326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800932a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800932e:	3f01      	subs	r7, #1
 8009330:	d501      	bpl.n	8009336 <_fwalk_reent+0x22>
 8009332:	6824      	ldr	r4, [r4, #0]
 8009334:	e7f5      	b.n	8009322 <_fwalk_reent+0xe>
 8009336:	89ab      	ldrh	r3, [r5, #12]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d907      	bls.n	800934c <_fwalk_reent+0x38>
 800933c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009340:	3301      	adds	r3, #1
 8009342:	d003      	beq.n	800934c <_fwalk_reent+0x38>
 8009344:	4629      	mov	r1, r5
 8009346:	4640      	mov	r0, r8
 8009348:	47c8      	blx	r9
 800934a:	4306      	orrs	r6, r0
 800934c:	3568      	adds	r5, #104	; 0x68
 800934e:	e7ee      	b.n	800932e <_fwalk_reent+0x1a>

08009350 <__locale_ctype_ptr_l>:
 8009350:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009354:	4770      	bx	lr

08009356 <__ascii_mbtowc>:
 8009356:	b082      	sub	sp, #8
 8009358:	b901      	cbnz	r1, 800935c <__ascii_mbtowc+0x6>
 800935a:	a901      	add	r1, sp, #4
 800935c:	b142      	cbz	r2, 8009370 <__ascii_mbtowc+0x1a>
 800935e:	b14b      	cbz	r3, 8009374 <__ascii_mbtowc+0x1e>
 8009360:	7813      	ldrb	r3, [r2, #0]
 8009362:	600b      	str	r3, [r1, #0]
 8009364:	7812      	ldrb	r2, [r2, #0]
 8009366:	1c10      	adds	r0, r2, #0
 8009368:	bf18      	it	ne
 800936a:	2001      	movne	r0, #1
 800936c:	b002      	add	sp, #8
 800936e:	4770      	bx	lr
 8009370:	4610      	mov	r0, r2
 8009372:	e7fb      	b.n	800936c <__ascii_mbtowc+0x16>
 8009374:	f06f 0001 	mvn.w	r0, #1
 8009378:	e7f8      	b.n	800936c <__ascii_mbtowc+0x16>
	...

0800937c <_malloc_r>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	1ccd      	adds	r5, r1, #3
 8009380:	f025 0503 	bic.w	r5, r5, #3
 8009384:	3508      	adds	r5, #8
 8009386:	2d0c      	cmp	r5, #12
 8009388:	bf38      	it	cc
 800938a:	250c      	movcc	r5, #12
 800938c:	2d00      	cmp	r5, #0
 800938e:	4606      	mov	r6, r0
 8009390:	db01      	blt.n	8009396 <_malloc_r+0x1a>
 8009392:	42a9      	cmp	r1, r5
 8009394:	d903      	bls.n	800939e <_malloc_r+0x22>
 8009396:	230c      	movs	r3, #12
 8009398:	6033      	str	r3, [r6, #0]
 800939a:	2000      	movs	r0, #0
 800939c:	bd70      	pop	{r4, r5, r6, pc}
 800939e:	f000 fdaf 	bl	8009f00 <__malloc_lock>
 80093a2:	4a21      	ldr	r2, [pc, #132]	; (8009428 <_malloc_r+0xac>)
 80093a4:	6814      	ldr	r4, [r2, #0]
 80093a6:	4621      	mov	r1, r4
 80093a8:	b991      	cbnz	r1, 80093d0 <_malloc_r+0x54>
 80093aa:	4c20      	ldr	r4, [pc, #128]	; (800942c <_malloc_r+0xb0>)
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	b91b      	cbnz	r3, 80093b8 <_malloc_r+0x3c>
 80093b0:	4630      	mov	r0, r6
 80093b2:	f000 fb3b 	bl	8009a2c <_sbrk_r>
 80093b6:	6020      	str	r0, [r4, #0]
 80093b8:	4629      	mov	r1, r5
 80093ba:	4630      	mov	r0, r6
 80093bc:	f000 fb36 	bl	8009a2c <_sbrk_r>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d124      	bne.n	800940e <_malloc_r+0x92>
 80093c4:	230c      	movs	r3, #12
 80093c6:	6033      	str	r3, [r6, #0]
 80093c8:	4630      	mov	r0, r6
 80093ca:	f000 fd9a 	bl	8009f02 <__malloc_unlock>
 80093ce:	e7e4      	b.n	800939a <_malloc_r+0x1e>
 80093d0:	680b      	ldr	r3, [r1, #0]
 80093d2:	1b5b      	subs	r3, r3, r5
 80093d4:	d418      	bmi.n	8009408 <_malloc_r+0x8c>
 80093d6:	2b0b      	cmp	r3, #11
 80093d8:	d90f      	bls.n	80093fa <_malloc_r+0x7e>
 80093da:	600b      	str	r3, [r1, #0]
 80093dc:	50cd      	str	r5, [r1, r3]
 80093de:	18cc      	adds	r4, r1, r3
 80093e0:	4630      	mov	r0, r6
 80093e2:	f000 fd8e 	bl	8009f02 <__malloc_unlock>
 80093e6:	f104 000b 	add.w	r0, r4, #11
 80093ea:	1d23      	adds	r3, r4, #4
 80093ec:	f020 0007 	bic.w	r0, r0, #7
 80093f0:	1ac3      	subs	r3, r0, r3
 80093f2:	d0d3      	beq.n	800939c <_malloc_r+0x20>
 80093f4:	425a      	negs	r2, r3
 80093f6:	50e2      	str	r2, [r4, r3]
 80093f8:	e7d0      	b.n	800939c <_malloc_r+0x20>
 80093fa:	428c      	cmp	r4, r1
 80093fc:	684b      	ldr	r3, [r1, #4]
 80093fe:	bf16      	itet	ne
 8009400:	6063      	strne	r3, [r4, #4]
 8009402:	6013      	streq	r3, [r2, #0]
 8009404:	460c      	movne	r4, r1
 8009406:	e7eb      	b.n	80093e0 <_malloc_r+0x64>
 8009408:	460c      	mov	r4, r1
 800940a:	6849      	ldr	r1, [r1, #4]
 800940c:	e7cc      	b.n	80093a8 <_malloc_r+0x2c>
 800940e:	1cc4      	adds	r4, r0, #3
 8009410:	f024 0403 	bic.w	r4, r4, #3
 8009414:	42a0      	cmp	r0, r4
 8009416:	d005      	beq.n	8009424 <_malloc_r+0xa8>
 8009418:	1a21      	subs	r1, r4, r0
 800941a:	4630      	mov	r0, r6
 800941c:	f000 fb06 	bl	8009a2c <_sbrk_r>
 8009420:	3001      	adds	r0, #1
 8009422:	d0cf      	beq.n	80093c4 <_malloc_r+0x48>
 8009424:	6025      	str	r5, [r4, #0]
 8009426:	e7db      	b.n	80093e0 <_malloc_r+0x64>
 8009428:	20000248 	.word	0x20000248
 800942c:	2000024c 	.word	0x2000024c

08009430 <__sfputc_r>:
 8009430:	6893      	ldr	r3, [r2, #8]
 8009432:	3b01      	subs	r3, #1
 8009434:	2b00      	cmp	r3, #0
 8009436:	b410      	push	{r4}
 8009438:	6093      	str	r3, [r2, #8]
 800943a:	da08      	bge.n	800944e <__sfputc_r+0x1e>
 800943c:	6994      	ldr	r4, [r2, #24]
 800943e:	42a3      	cmp	r3, r4
 8009440:	db01      	blt.n	8009446 <__sfputc_r+0x16>
 8009442:	290a      	cmp	r1, #10
 8009444:	d103      	bne.n	800944e <__sfputc_r+0x1e>
 8009446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800944a:	f000 bb43 	b.w	8009ad4 <__swbuf_r>
 800944e:	6813      	ldr	r3, [r2, #0]
 8009450:	1c58      	adds	r0, r3, #1
 8009452:	6010      	str	r0, [r2, #0]
 8009454:	7019      	strb	r1, [r3, #0]
 8009456:	4608      	mov	r0, r1
 8009458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800945c:	4770      	bx	lr

0800945e <__sfputs_r>:
 800945e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009460:	4606      	mov	r6, r0
 8009462:	460f      	mov	r7, r1
 8009464:	4614      	mov	r4, r2
 8009466:	18d5      	adds	r5, r2, r3
 8009468:	42ac      	cmp	r4, r5
 800946a:	d101      	bne.n	8009470 <__sfputs_r+0x12>
 800946c:	2000      	movs	r0, #0
 800946e:	e007      	b.n	8009480 <__sfputs_r+0x22>
 8009470:	463a      	mov	r2, r7
 8009472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009476:	4630      	mov	r0, r6
 8009478:	f7ff ffda 	bl	8009430 <__sfputc_r>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d1f3      	bne.n	8009468 <__sfputs_r+0xa>
 8009480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009484 <_vfiprintf_r>:
 8009484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	460c      	mov	r4, r1
 800948a:	b09d      	sub	sp, #116	; 0x74
 800948c:	4617      	mov	r7, r2
 800948e:	461d      	mov	r5, r3
 8009490:	4606      	mov	r6, r0
 8009492:	b118      	cbz	r0, 800949c <_vfiprintf_r+0x18>
 8009494:	6983      	ldr	r3, [r0, #24]
 8009496:	b90b      	cbnz	r3, 800949c <_vfiprintf_r+0x18>
 8009498:	f7ff fed0 	bl	800923c <__sinit>
 800949c:	4b7c      	ldr	r3, [pc, #496]	; (8009690 <_vfiprintf_r+0x20c>)
 800949e:	429c      	cmp	r4, r3
 80094a0:	d158      	bne.n	8009554 <_vfiprintf_r+0xd0>
 80094a2:	6874      	ldr	r4, [r6, #4]
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	0718      	lsls	r0, r3, #28
 80094a8:	d55e      	bpl.n	8009568 <_vfiprintf_r+0xe4>
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d05b      	beq.n	8009568 <_vfiprintf_r+0xe4>
 80094b0:	2300      	movs	r3, #0
 80094b2:	9309      	str	r3, [sp, #36]	; 0x24
 80094b4:	2320      	movs	r3, #32
 80094b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094ba:	2330      	movs	r3, #48	; 0x30
 80094bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094c0:	9503      	str	r5, [sp, #12]
 80094c2:	f04f 0b01 	mov.w	fp, #1
 80094c6:	46b8      	mov	r8, r7
 80094c8:	4645      	mov	r5, r8
 80094ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094ce:	b10b      	cbz	r3, 80094d4 <_vfiprintf_r+0x50>
 80094d0:	2b25      	cmp	r3, #37	; 0x25
 80094d2:	d154      	bne.n	800957e <_vfiprintf_r+0xfa>
 80094d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80094d8:	d00b      	beq.n	80094f2 <_vfiprintf_r+0x6e>
 80094da:	4653      	mov	r3, sl
 80094dc:	463a      	mov	r2, r7
 80094de:	4621      	mov	r1, r4
 80094e0:	4630      	mov	r0, r6
 80094e2:	f7ff ffbc 	bl	800945e <__sfputs_r>
 80094e6:	3001      	adds	r0, #1
 80094e8:	f000 80c2 	beq.w	8009670 <_vfiprintf_r+0x1ec>
 80094ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ee:	4453      	add	r3, sl
 80094f0:	9309      	str	r3, [sp, #36]	; 0x24
 80094f2:	f898 3000 	ldrb.w	r3, [r8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 80ba 	beq.w	8009670 <_vfiprintf_r+0x1ec>
 80094fc:	2300      	movs	r3, #0
 80094fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009506:	9304      	str	r3, [sp, #16]
 8009508:	9307      	str	r3, [sp, #28]
 800950a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800950e:	931a      	str	r3, [sp, #104]	; 0x68
 8009510:	46a8      	mov	r8, r5
 8009512:	2205      	movs	r2, #5
 8009514:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009518:	485e      	ldr	r0, [pc, #376]	; (8009694 <_vfiprintf_r+0x210>)
 800951a:	f7f6 fe61 	bl	80001e0 <memchr>
 800951e:	9b04      	ldr	r3, [sp, #16]
 8009520:	bb78      	cbnz	r0, 8009582 <_vfiprintf_r+0xfe>
 8009522:	06d9      	lsls	r1, r3, #27
 8009524:	bf44      	itt	mi
 8009526:	2220      	movmi	r2, #32
 8009528:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800952c:	071a      	lsls	r2, r3, #28
 800952e:	bf44      	itt	mi
 8009530:	222b      	movmi	r2, #43	; 0x2b
 8009532:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009536:	782a      	ldrb	r2, [r5, #0]
 8009538:	2a2a      	cmp	r2, #42	; 0x2a
 800953a:	d02a      	beq.n	8009592 <_vfiprintf_r+0x10e>
 800953c:	9a07      	ldr	r2, [sp, #28]
 800953e:	46a8      	mov	r8, r5
 8009540:	2000      	movs	r0, #0
 8009542:	250a      	movs	r5, #10
 8009544:	4641      	mov	r1, r8
 8009546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800954a:	3b30      	subs	r3, #48	; 0x30
 800954c:	2b09      	cmp	r3, #9
 800954e:	d969      	bls.n	8009624 <_vfiprintf_r+0x1a0>
 8009550:	b360      	cbz	r0, 80095ac <_vfiprintf_r+0x128>
 8009552:	e024      	b.n	800959e <_vfiprintf_r+0x11a>
 8009554:	4b50      	ldr	r3, [pc, #320]	; (8009698 <_vfiprintf_r+0x214>)
 8009556:	429c      	cmp	r4, r3
 8009558:	d101      	bne.n	800955e <_vfiprintf_r+0xda>
 800955a:	68b4      	ldr	r4, [r6, #8]
 800955c:	e7a2      	b.n	80094a4 <_vfiprintf_r+0x20>
 800955e:	4b4f      	ldr	r3, [pc, #316]	; (800969c <_vfiprintf_r+0x218>)
 8009560:	429c      	cmp	r4, r3
 8009562:	bf08      	it	eq
 8009564:	68f4      	ldreq	r4, [r6, #12]
 8009566:	e79d      	b.n	80094a4 <_vfiprintf_r+0x20>
 8009568:	4621      	mov	r1, r4
 800956a:	4630      	mov	r0, r6
 800956c:	f000 fb24 	bl	8009bb8 <__swsetup_r>
 8009570:	2800      	cmp	r0, #0
 8009572:	d09d      	beq.n	80094b0 <_vfiprintf_r+0x2c>
 8009574:	f04f 30ff 	mov.w	r0, #4294967295
 8009578:	b01d      	add	sp, #116	; 0x74
 800957a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957e:	46a8      	mov	r8, r5
 8009580:	e7a2      	b.n	80094c8 <_vfiprintf_r+0x44>
 8009582:	4a44      	ldr	r2, [pc, #272]	; (8009694 <_vfiprintf_r+0x210>)
 8009584:	1a80      	subs	r0, r0, r2
 8009586:	fa0b f000 	lsl.w	r0, fp, r0
 800958a:	4318      	orrs	r0, r3
 800958c:	9004      	str	r0, [sp, #16]
 800958e:	4645      	mov	r5, r8
 8009590:	e7be      	b.n	8009510 <_vfiprintf_r+0x8c>
 8009592:	9a03      	ldr	r2, [sp, #12]
 8009594:	1d11      	adds	r1, r2, #4
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	9103      	str	r1, [sp, #12]
 800959a:	2a00      	cmp	r2, #0
 800959c:	db01      	blt.n	80095a2 <_vfiprintf_r+0x11e>
 800959e:	9207      	str	r2, [sp, #28]
 80095a0:	e004      	b.n	80095ac <_vfiprintf_r+0x128>
 80095a2:	4252      	negs	r2, r2
 80095a4:	f043 0302 	orr.w	r3, r3, #2
 80095a8:	9207      	str	r2, [sp, #28]
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	f898 3000 	ldrb.w	r3, [r8]
 80095b0:	2b2e      	cmp	r3, #46	; 0x2e
 80095b2:	d10e      	bne.n	80095d2 <_vfiprintf_r+0x14e>
 80095b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80095b8:	2b2a      	cmp	r3, #42	; 0x2a
 80095ba:	d138      	bne.n	800962e <_vfiprintf_r+0x1aa>
 80095bc:	9b03      	ldr	r3, [sp, #12]
 80095be:	1d1a      	adds	r2, r3, #4
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	9203      	str	r2, [sp, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bfb8      	it	lt
 80095c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80095cc:	f108 0802 	add.w	r8, r8, #2
 80095d0:	9305      	str	r3, [sp, #20]
 80095d2:	4d33      	ldr	r5, [pc, #204]	; (80096a0 <_vfiprintf_r+0x21c>)
 80095d4:	f898 1000 	ldrb.w	r1, [r8]
 80095d8:	2203      	movs	r2, #3
 80095da:	4628      	mov	r0, r5
 80095dc:	f7f6 fe00 	bl	80001e0 <memchr>
 80095e0:	b140      	cbz	r0, 80095f4 <_vfiprintf_r+0x170>
 80095e2:	2340      	movs	r3, #64	; 0x40
 80095e4:	1b40      	subs	r0, r0, r5
 80095e6:	fa03 f000 	lsl.w	r0, r3, r0
 80095ea:	9b04      	ldr	r3, [sp, #16]
 80095ec:	4303      	orrs	r3, r0
 80095ee:	f108 0801 	add.w	r8, r8, #1
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	f898 1000 	ldrb.w	r1, [r8]
 80095f8:	482a      	ldr	r0, [pc, #168]	; (80096a4 <_vfiprintf_r+0x220>)
 80095fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095fe:	2206      	movs	r2, #6
 8009600:	f108 0701 	add.w	r7, r8, #1
 8009604:	f7f6 fdec 	bl	80001e0 <memchr>
 8009608:	2800      	cmp	r0, #0
 800960a:	d037      	beq.n	800967c <_vfiprintf_r+0x1f8>
 800960c:	4b26      	ldr	r3, [pc, #152]	; (80096a8 <_vfiprintf_r+0x224>)
 800960e:	bb1b      	cbnz	r3, 8009658 <_vfiprintf_r+0x1d4>
 8009610:	9b03      	ldr	r3, [sp, #12]
 8009612:	3307      	adds	r3, #7
 8009614:	f023 0307 	bic.w	r3, r3, #7
 8009618:	3308      	adds	r3, #8
 800961a:	9303      	str	r3, [sp, #12]
 800961c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961e:	444b      	add	r3, r9
 8009620:	9309      	str	r3, [sp, #36]	; 0x24
 8009622:	e750      	b.n	80094c6 <_vfiprintf_r+0x42>
 8009624:	fb05 3202 	mla	r2, r5, r2, r3
 8009628:	2001      	movs	r0, #1
 800962a:	4688      	mov	r8, r1
 800962c:	e78a      	b.n	8009544 <_vfiprintf_r+0xc0>
 800962e:	2300      	movs	r3, #0
 8009630:	f108 0801 	add.w	r8, r8, #1
 8009634:	9305      	str	r3, [sp, #20]
 8009636:	4619      	mov	r1, r3
 8009638:	250a      	movs	r5, #10
 800963a:	4640      	mov	r0, r8
 800963c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009640:	3a30      	subs	r2, #48	; 0x30
 8009642:	2a09      	cmp	r2, #9
 8009644:	d903      	bls.n	800964e <_vfiprintf_r+0x1ca>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0c3      	beq.n	80095d2 <_vfiprintf_r+0x14e>
 800964a:	9105      	str	r1, [sp, #20]
 800964c:	e7c1      	b.n	80095d2 <_vfiprintf_r+0x14e>
 800964e:	fb05 2101 	mla	r1, r5, r1, r2
 8009652:	2301      	movs	r3, #1
 8009654:	4680      	mov	r8, r0
 8009656:	e7f0      	b.n	800963a <_vfiprintf_r+0x1b6>
 8009658:	ab03      	add	r3, sp, #12
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	4622      	mov	r2, r4
 800965e:	4b13      	ldr	r3, [pc, #76]	; (80096ac <_vfiprintf_r+0x228>)
 8009660:	a904      	add	r1, sp, #16
 8009662:	4630      	mov	r0, r6
 8009664:	f3af 8000 	nop.w
 8009668:	f1b0 3fff 	cmp.w	r0, #4294967295
 800966c:	4681      	mov	r9, r0
 800966e:	d1d5      	bne.n	800961c <_vfiprintf_r+0x198>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	065b      	lsls	r3, r3, #25
 8009674:	f53f af7e 	bmi.w	8009574 <_vfiprintf_r+0xf0>
 8009678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800967a:	e77d      	b.n	8009578 <_vfiprintf_r+0xf4>
 800967c:	ab03      	add	r3, sp, #12
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4622      	mov	r2, r4
 8009682:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <_vfiprintf_r+0x228>)
 8009684:	a904      	add	r1, sp, #16
 8009686:	4630      	mov	r0, r6
 8009688:	f000 f888 	bl	800979c <_printf_i>
 800968c:	e7ec      	b.n	8009668 <_vfiprintf_r+0x1e4>
 800968e:	bf00      	nop
 8009690:	0800a0a8 	.word	0x0800a0a8
 8009694:	0800a0f2 	.word	0x0800a0f2
 8009698:	0800a0c8 	.word	0x0800a0c8
 800969c:	0800a088 	.word	0x0800a088
 80096a0:	0800a0f8 	.word	0x0800a0f8
 80096a4:	0800a0fc 	.word	0x0800a0fc
 80096a8:	00000000 	.word	0x00000000
 80096ac:	0800945f 	.word	0x0800945f

080096b0 <_printf_common>:
 80096b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b4:	4691      	mov	r9, r2
 80096b6:	461f      	mov	r7, r3
 80096b8:	688a      	ldr	r2, [r1, #8]
 80096ba:	690b      	ldr	r3, [r1, #16]
 80096bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096c0:	4293      	cmp	r3, r2
 80096c2:	bfb8      	it	lt
 80096c4:	4613      	movlt	r3, r2
 80096c6:	f8c9 3000 	str.w	r3, [r9]
 80096ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096ce:	4606      	mov	r6, r0
 80096d0:	460c      	mov	r4, r1
 80096d2:	b112      	cbz	r2, 80096da <_printf_common+0x2a>
 80096d4:	3301      	adds	r3, #1
 80096d6:	f8c9 3000 	str.w	r3, [r9]
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	0699      	lsls	r1, r3, #26
 80096de:	bf42      	ittt	mi
 80096e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80096e4:	3302      	addmi	r3, #2
 80096e6:	f8c9 3000 	strmi.w	r3, [r9]
 80096ea:	6825      	ldr	r5, [r4, #0]
 80096ec:	f015 0506 	ands.w	r5, r5, #6
 80096f0:	d107      	bne.n	8009702 <_printf_common+0x52>
 80096f2:	f104 0a19 	add.w	sl, r4, #25
 80096f6:	68e3      	ldr	r3, [r4, #12]
 80096f8:	f8d9 2000 	ldr.w	r2, [r9]
 80096fc:	1a9b      	subs	r3, r3, r2
 80096fe:	42ab      	cmp	r3, r5
 8009700:	dc28      	bgt.n	8009754 <_printf_common+0xa4>
 8009702:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009706:	6822      	ldr	r2, [r4, #0]
 8009708:	3300      	adds	r3, #0
 800970a:	bf18      	it	ne
 800970c:	2301      	movne	r3, #1
 800970e:	0692      	lsls	r2, r2, #26
 8009710:	d42d      	bmi.n	800976e <_printf_common+0xbe>
 8009712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009716:	4639      	mov	r1, r7
 8009718:	4630      	mov	r0, r6
 800971a:	47c0      	blx	r8
 800971c:	3001      	adds	r0, #1
 800971e:	d020      	beq.n	8009762 <_printf_common+0xb2>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	68e5      	ldr	r5, [r4, #12]
 8009724:	f8d9 2000 	ldr.w	r2, [r9]
 8009728:	f003 0306 	and.w	r3, r3, #6
 800972c:	2b04      	cmp	r3, #4
 800972e:	bf08      	it	eq
 8009730:	1aad      	subeq	r5, r5, r2
 8009732:	68a3      	ldr	r3, [r4, #8]
 8009734:	6922      	ldr	r2, [r4, #16]
 8009736:	bf0c      	ite	eq
 8009738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800973c:	2500      	movne	r5, #0
 800973e:	4293      	cmp	r3, r2
 8009740:	bfc4      	itt	gt
 8009742:	1a9b      	subgt	r3, r3, r2
 8009744:	18ed      	addgt	r5, r5, r3
 8009746:	f04f 0900 	mov.w	r9, #0
 800974a:	341a      	adds	r4, #26
 800974c:	454d      	cmp	r5, r9
 800974e:	d11a      	bne.n	8009786 <_printf_common+0xd6>
 8009750:	2000      	movs	r0, #0
 8009752:	e008      	b.n	8009766 <_printf_common+0xb6>
 8009754:	2301      	movs	r3, #1
 8009756:	4652      	mov	r2, sl
 8009758:	4639      	mov	r1, r7
 800975a:	4630      	mov	r0, r6
 800975c:	47c0      	blx	r8
 800975e:	3001      	adds	r0, #1
 8009760:	d103      	bne.n	800976a <_printf_common+0xba>
 8009762:	f04f 30ff 	mov.w	r0, #4294967295
 8009766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800976a:	3501      	adds	r5, #1
 800976c:	e7c3      	b.n	80096f6 <_printf_common+0x46>
 800976e:	18e1      	adds	r1, r4, r3
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	2030      	movs	r0, #48	; 0x30
 8009774:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009778:	4422      	add	r2, r4
 800977a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800977e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009782:	3302      	adds	r3, #2
 8009784:	e7c5      	b.n	8009712 <_printf_common+0x62>
 8009786:	2301      	movs	r3, #1
 8009788:	4622      	mov	r2, r4
 800978a:	4639      	mov	r1, r7
 800978c:	4630      	mov	r0, r6
 800978e:	47c0      	blx	r8
 8009790:	3001      	adds	r0, #1
 8009792:	d0e6      	beq.n	8009762 <_printf_common+0xb2>
 8009794:	f109 0901 	add.w	r9, r9, #1
 8009798:	e7d8      	b.n	800974c <_printf_common+0x9c>
	...

0800979c <_printf_i>:
 800979c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80097a4:	460c      	mov	r4, r1
 80097a6:	7e09      	ldrb	r1, [r1, #24]
 80097a8:	b085      	sub	sp, #20
 80097aa:	296e      	cmp	r1, #110	; 0x6e
 80097ac:	4617      	mov	r7, r2
 80097ae:	4606      	mov	r6, r0
 80097b0:	4698      	mov	r8, r3
 80097b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097b4:	f000 80b3 	beq.w	800991e <_printf_i+0x182>
 80097b8:	d822      	bhi.n	8009800 <_printf_i+0x64>
 80097ba:	2963      	cmp	r1, #99	; 0x63
 80097bc:	d036      	beq.n	800982c <_printf_i+0x90>
 80097be:	d80a      	bhi.n	80097d6 <_printf_i+0x3a>
 80097c0:	2900      	cmp	r1, #0
 80097c2:	f000 80b9 	beq.w	8009938 <_printf_i+0x19c>
 80097c6:	2958      	cmp	r1, #88	; 0x58
 80097c8:	f000 8083 	beq.w	80098d2 <_printf_i+0x136>
 80097cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80097d4:	e032      	b.n	800983c <_printf_i+0xa0>
 80097d6:	2964      	cmp	r1, #100	; 0x64
 80097d8:	d001      	beq.n	80097de <_printf_i+0x42>
 80097da:	2969      	cmp	r1, #105	; 0x69
 80097dc:	d1f6      	bne.n	80097cc <_printf_i+0x30>
 80097de:	6820      	ldr	r0, [r4, #0]
 80097e0:	6813      	ldr	r3, [r2, #0]
 80097e2:	0605      	lsls	r5, r0, #24
 80097e4:	f103 0104 	add.w	r1, r3, #4
 80097e8:	d52a      	bpl.n	8009840 <_printf_i+0xa4>
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6011      	str	r1, [r2, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	da03      	bge.n	80097fa <_printf_i+0x5e>
 80097f2:	222d      	movs	r2, #45	; 0x2d
 80097f4:	425b      	negs	r3, r3
 80097f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80097fa:	486f      	ldr	r0, [pc, #444]	; (80099b8 <_printf_i+0x21c>)
 80097fc:	220a      	movs	r2, #10
 80097fe:	e039      	b.n	8009874 <_printf_i+0xd8>
 8009800:	2973      	cmp	r1, #115	; 0x73
 8009802:	f000 809d 	beq.w	8009940 <_printf_i+0x1a4>
 8009806:	d808      	bhi.n	800981a <_printf_i+0x7e>
 8009808:	296f      	cmp	r1, #111	; 0x6f
 800980a:	d020      	beq.n	800984e <_printf_i+0xb2>
 800980c:	2970      	cmp	r1, #112	; 0x70
 800980e:	d1dd      	bne.n	80097cc <_printf_i+0x30>
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	f043 0320 	orr.w	r3, r3, #32
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	e003      	b.n	8009822 <_printf_i+0x86>
 800981a:	2975      	cmp	r1, #117	; 0x75
 800981c:	d017      	beq.n	800984e <_printf_i+0xb2>
 800981e:	2978      	cmp	r1, #120	; 0x78
 8009820:	d1d4      	bne.n	80097cc <_printf_i+0x30>
 8009822:	2378      	movs	r3, #120	; 0x78
 8009824:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009828:	4864      	ldr	r0, [pc, #400]	; (80099bc <_printf_i+0x220>)
 800982a:	e055      	b.n	80098d8 <_printf_i+0x13c>
 800982c:	6813      	ldr	r3, [r2, #0]
 800982e:	1d19      	adds	r1, r3, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6011      	str	r1, [r2, #0]
 8009834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800983c:	2301      	movs	r3, #1
 800983e:	e08c      	b.n	800995a <_printf_i+0x1be>
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6011      	str	r1, [r2, #0]
 8009844:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009848:	bf18      	it	ne
 800984a:	b21b      	sxthne	r3, r3
 800984c:	e7cf      	b.n	80097ee <_printf_i+0x52>
 800984e:	6813      	ldr	r3, [r2, #0]
 8009850:	6825      	ldr	r5, [r4, #0]
 8009852:	1d18      	adds	r0, r3, #4
 8009854:	6010      	str	r0, [r2, #0]
 8009856:	0628      	lsls	r0, r5, #24
 8009858:	d501      	bpl.n	800985e <_printf_i+0xc2>
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	e002      	b.n	8009864 <_printf_i+0xc8>
 800985e:	0668      	lsls	r0, r5, #25
 8009860:	d5fb      	bpl.n	800985a <_printf_i+0xbe>
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	4854      	ldr	r0, [pc, #336]	; (80099b8 <_printf_i+0x21c>)
 8009866:	296f      	cmp	r1, #111	; 0x6f
 8009868:	bf14      	ite	ne
 800986a:	220a      	movne	r2, #10
 800986c:	2208      	moveq	r2, #8
 800986e:	2100      	movs	r1, #0
 8009870:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009874:	6865      	ldr	r5, [r4, #4]
 8009876:	60a5      	str	r5, [r4, #8]
 8009878:	2d00      	cmp	r5, #0
 800987a:	f2c0 8095 	blt.w	80099a8 <_printf_i+0x20c>
 800987e:	6821      	ldr	r1, [r4, #0]
 8009880:	f021 0104 	bic.w	r1, r1, #4
 8009884:	6021      	str	r1, [r4, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d13d      	bne.n	8009906 <_printf_i+0x16a>
 800988a:	2d00      	cmp	r5, #0
 800988c:	f040 808e 	bne.w	80099ac <_printf_i+0x210>
 8009890:	4665      	mov	r5, ip
 8009892:	2a08      	cmp	r2, #8
 8009894:	d10b      	bne.n	80098ae <_printf_i+0x112>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	07db      	lsls	r3, r3, #31
 800989a:	d508      	bpl.n	80098ae <_printf_i+0x112>
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	6862      	ldr	r2, [r4, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	bfde      	ittt	le
 80098a4:	2330      	movle	r3, #48	; 0x30
 80098a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098ae:	ebac 0305 	sub.w	r3, ip, r5
 80098b2:	6123      	str	r3, [r4, #16]
 80098b4:	f8cd 8000 	str.w	r8, [sp]
 80098b8:	463b      	mov	r3, r7
 80098ba:	aa03      	add	r2, sp, #12
 80098bc:	4621      	mov	r1, r4
 80098be:	4630      	mov	r0, r6
 80098c0:	f7ff fef6 	bl	80096b0 <_printf_common>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d14d      	bne.n	8009964 <_printf_i+0x1c8>
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	b005      	add	sp, #20
 80098ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098d2:	4839      	ldr	r0, [pc, #228]	; (80099b8 <_printf_i+0x21c>)
 80098d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80098d8:	6813      	ldr	r3, [r2, #0]
 80098da:	6821      	ldr	r1, [r4, #0]
 80098dc:	1d1d      	adds	r5, r3, #4
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6015      	str	r5, [r2, #0]
 80098e2:	060a      	lsls	r2, r1, #24
 80098e4:	d50b      	bpl.n	80098fe <_printf_i+0x162>
 80098e6:	07ca      	lsls	r2, r1, #31
 80098e8:	bf44      	itt	mi
 80098ea:	f041 0120 	orrmi.w	r1, r1, #32
 80098ee:	6021      	strmi	r1, [r4, #0]
 80098f0:	b91b      	cbnz	r3, 80098fa <_printf_i+0x15e>
 80098f2:	6822      	ldr	r2, [r4, #0]
 80098f4:	f022 0220 	bic.w	r2, r2, #32
 80098f8:	6022      	str	r2, [r4, #0]
 80098fa:	2210      	movs	r2, #16
 80098fc:	e7b7      	b.n	800986e <_printf_i+0xd2>
 80098fe:	064d      	lsls	r5, r1, #25
 8009900:	bf48      	it	mi
 8009902:	b29b      	uxthmi	r3, r3
 8009904:	e7ef      	b.n	80098e6 <_printf_i+0x14a>
 8009906:	4665      	mov	r5, ip
 8009908:	fbb3 f1f2 	udiv	r1, r3, r2
 800990c:	fb02 3311 	mls	r3, r2, r1, r3
 8009910:	5cc3      	ldrb	r3, [r0, r3]
 8009912:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009916:	460b      	mov	r3, r1
 8009918:	2900      	cmp	r1, #0
 800991a:	d1f5      	bne.n	8009908 <_printf_i+0x16c>
 800991c:	e7b9      	b.n	8009892 <_printf_i+0xf6>
 800991e:	6813      	ldr	r3, [r2, #0]
 8009920:	6825      	ldr	r5, [r4, #0]
 8009922:	6961      	ldr	r1, [r4, #20]
 8009924:	1d18      	adds	r0, r3, #4
 8009926:	6010      	str	r0, [r2, #0]
 8009928:	0628      	lsls	r0, r5, #24
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	d501      	bpl.n	8009932 <_printf_i+0x196>
 800992e:	6019      	str	r1, [r3, #0]
 8009930:	e002      	b.n	8009938 <_printf_i+0x19c>
 8009932:	066a      	lsls	r2, r5, #25
 8009934:	d5fb      	bpl.n	800992e <_printf_i+0x192>
 8009936:	8019      	strh	r1, [r3, #0]
 8009938:	2300      	movs	r3, #0
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	4665      	mov	r5, ip
 800993e:	e7b9      	b.n	80098b4 <_printf_i+0x118>
 8009940:	6813      	ldr	r3, [r2, #0]
 8009942:	1d19      	adds	r1, r3, #4
 8009944:	6011      	str	r1, [r2, #0]
 8009946:	681d      	ldr	r5, [r3, #0]
 8009948:	6862      	ldr	r2, [r4, #4]
 800994a:	2100      	movs	r1, #0
 800994c:	4628      	mov	r0, r5
 800994e:	f7f6 fc47 	bl	80001e0 <memchr>
 8009952:	b108      	cbz	r0, 8009958 <_printf_i+0x1bc>
 8009954:	1b40      	subs	r0, r0, r5
 8009956:	6060      	str	r0, [r4, #4]
 8009958:	6863      	ldr	r3, [r4, #4]
 800995a:	6123      	str	r3, [r4, #16]
 800995c:	2300      	movs	r3, #0
 800995e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009962:	e7a7      	b.n	80098b4 <_printf_i+0x118>
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	462a      	mov	r2, r5
 8009968:	4639      	mov	r1, r7
 800996a:	4630      	mov	r0, r6
 800996c:	47c0      	blx	r8
 800996e:	3001      	adds	r0, #1
 8009970:	d0aa      	beq.n	80098c8 <_printf_i+0x12c>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	079b      	lsls	r3, r3, #30
 8009976:	d413      	bmi.n	80099a0 <_printf_i+0x204>
 8009978:	68e0      	ldr	r0, [r4, #12]
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	4298      	cmp	r0, r3
 800997e:	bfb8      	it	lt
 8009980:	4618      	movlt	r0, r3
 8009982:	e7a3      	b.n	80098cc <_printf_i+0x130>
 8009984:	2301      	movs	r3, #1
 8009986:	464a      	mov	r2, r9
 8009988:	4639      	mov	r1, r7
 800998a:	4630      	mov	r0, r6
 800998c:	47c0      	blx	r8
 800998e:	3001      	adds	r0, #1
 8009990:	d09a      	beq.n	80098c8 <_printf_i+0x12c>
 8009992:	3501      	adds	r5, #1
 8009994:	68e3      	ldr	r3, [r4, #12]
 8009996:	9a03      	ldr	r2, [sp, #12]
 8009998:	1a9b      	subs	r3, r3, r2
 800999a:	42ab      	cmp	r3, r5
 800999c:	dcf2      	bgt.n	8009984 <_printf_i+0x1e8>
 800999e:	e7eb      	b.n	8009978 <_printf_i+0x1dc>
 80099a0:	2500      	movs	r5, #0
 80099a2:	f104 0919 	add.w	r9, r4, #25
 80099a6:	e7f5      	b.n	8009994 <_printf_i+0x1f8>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1ac      	bne.n	8009906 <_printf_i+0x16a>
 80099ac:	7803      	ldrb	r3, [r0, #0]
 80099ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b6:	e76c      	b.n	8009892 <_printf_i+0xf6>
 80099b8:	0800a103 	.word	0x0800a103
 80099bc:	0800a114 	.word	0x0800a114

080099c0 <_putc_r>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	460d      	mov	r5, r1
 80099c4:	4614      	mov	r4, r2
 80099c6:	4606      	mov	r6, r0
 80099c8:	b118      	cbz	r0, 80099d2 <_putc_r+0x12>
 80099ca:	6983      	ldr	r3, [r0, #24]
 80099cc:	b90b      	cbnz	r3, 80099d2 <_putc_r+0x12>
 80099ce:	f7ff fc35 	bl	800923c <__sinit>
 80099d2:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <_putc_r+0x60>)
 80099d4:	429c      	cmp	r4, r3
 80099d6:	d112      	bne.n	80099fe <_putc_r+0x3e>
 80099d8:	6874      	ldr	r4, [r6, #4]
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	3b01      	subs	r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	60a3      	str	r3, [r4, #8]
 80099e2:	da16      	bge.n	8009a12 <_putc_r+0x52>
 80099e4:	69a2      	ldr	r2, [r4, #24]
 80099e6:	4293      	cmp	r3, r2
 80099e8:	db02      	blt.n	80099f0 <_putc_r+0x30>
 80099ea:	b2eb      	uxtb	r3, r5
 80099ec:	2b0a      	cmp	r3, #10
 80099ee:	d110      	bne.n	8009a12 <_putc_r+0x52>
 80099f0:	4622      	mov	r2, r4
 80099f2:	4629      	mov	r1, r5
 80099f4:	4630      	mov	r0, r6
 80099f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099fa:	f000 b86b 	b.w	8009ad4 <__swbuf_r>
 80099fe:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <_putc_r+0x64>)
 8009a00:	429c      	cmp	r4, r3
 8009a02:	d101      	bne.n	8009a08 <_putc_r+0x48>
 8009a04:	68b4      	ldr	r4, [r6, #8]
 8009a06:	e7e8      	b.n	80099da <_putc_r+0x1a>
 8009a08:	4b07      	ldr	r3, [pc, #28]	; (8009a28 <_putc_r+0x68>)
 8009a0a:	429c      	cmp	r4, r3
 8009a0c:	bf08      	it	eq
 8009a0e:	68f4      	ldreq	r4, [r6, #12]
 8009a10:	e7e3      	b.n	80099da <_putc_r+0x1a>
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	1c5a      	adds	r2, r3, #1
 8009a16:	6022      	str	r2, [r4, #0]
 8009a18:	701d      	strb	r5, [r3, #0]
 8009a1a:	b2e8      	uxtb	r0, r5
 8009a1c:	bd70      	pop	{r4, r5, r6, pc}
 8009a1e:	bf00      	nop
 8009a20:	0800a0a8 	.word	0x0800a0a8
 8009a24:	0800a0c8 	.word	0x0800a0c8
 8009a28:	0800a088 	.word	0x0800a088

08009a2c <_sbrk_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4c06      	ldr	r4, [pc, #24]	; (8009a48 <_sbrk_r+0x1c>)
 8009a30:	2300      	movs	r3, #0
 8009a32:	4605      	mov	r5, r0
 8009a34:	4608      	mov	r0, r1
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	f7f8 fa50 	bl	8001edc <_sbrk>
 8009a3c:	1c43      	adds	r3, r0, #1
 8009a3e:	d102      	bne.n	8009a46 <_sbrk_r+0x1a>
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	b103      	cbz	r3, 8009a46 <_sbrk_r+0x1a>
 8009a44:	602b      	str	r3, [r5, #0]
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	2000c2cc 	.word	0x2000c2cc

08009a4c <__sread>:
 8009a4c:	b510      	push	{r4, lr}
 8009a4e:	460c      	mov	r4, r1
 8009a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a54:	f000 faa4 	bl	8009fa0 <_read_r>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	bfab      	itete	ge
 8009a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a60:	181b      	addge	r3, r3, r0
 8009a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a66:	bfac      	ite	ge
 8009a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a6a:	81a3      	strhlt	r3, [r4, #12]
 8009a6c:	bd10      	pop	{r4, pc}

08009a6e <__swrite>:
 8009a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a72:	461f      	mov	r7, r3
 8009a74:	898b      	ldrh	r3, [r1, #12]
 8009a76:	05db      	lsls	r3, r3, #23
 8009a78:	4605      	mov	r5, r0
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	4616      	mov	r6, r2
 8009a7e:	d505      	bpl.n	8009a8c <__swrite+0x1e>
 8009a80:	2302      	movs	r3, #2
 8009a82:	2200      	movs	r2, #0
 8009a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a88:	f000 f9c4 	bl	8009e14 <_lseek_r>
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	4632      	mov	r2, r6
 8009a9a:	463b      	mov	r3, r7
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa2:	f000 b877 	b.w	8009b94 <_write_r>

08009aa6 <__sseek>:
 8009aa6:	b510      	push	{r4, lr}
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aae:	f000 f9b1 	bl	8009e14 <_lseek_r>
 8009ab2:	1c43      	adds	r3, r0, #1
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	bf15      	itete	ne
 8009ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ac2:	81a3      	strheq	r3, [r4, #12]
 8009ac4:	bf18      	it	ne
 8009ac6:	81a3      	strhne	r3, [r4, #12]
 8009ac8:	bd10      	pop	{r4, pc}

08009aca <__sclose>:
 8009aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ace:	f000 b8e1 	b.w	8009c94 <_close_r>
	...

08009ad4 <__swbuf_r>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	460e      	mov	r6, r1
 8009ad8:	4614      	mov	r4, r2
 8009ada:	4605      	mov	r5, r0
 8009adc:	b118      	cbz	r0, 8009ae6 <__swbuf_r+0x12>
 8009ade:	6983      	ldr	r3, [r0, #24]
 8009ae0:	b90b      	cbnz	r3, 8009ae6 <__swbuf_r+0x12>
 8009ae2:	f7ff fbab 	bl	800923c <__sinit>
 8009ae6:	4b21      	ldr	r3, [pc, #132]	; (8009b6c <__swbuf_r+0x98>)
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	d12a      	bne.n	8009b42 <__swbuf_r+0x6e>
 8009aec:	686c      	ldr	r4, [r5, #4]
 8009aee:	69a3      	ldr	r3, [r4, #24]
 8009af0:	60a3      	str	r3, [r4, #8]
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	071a      	lsls	r2, r3, #28
 8009af6:	d52e      	bpl.n	8009b56 <__swbuf_r+0x82>
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	b363      	cbz	r3, 8009b56 <__swbuf_r+0x82>
 8009afc:	6923      	ldr	r3, [r4, #16]
 8009afe:	6820      	ldr	r0, [r4, #0]
 8009b00:	1ac0      	subs	r0, r0, r3
 8009b02:	6963      	ldr	r3, [r4, #20]
 8009b04:	b2f6      	uxtb	r6, r6
 8009b06:	4283      	cmp	r3, r0
 8009b08:	4637      	mov	r7, r6
 8009b0a:	dc04      	bgt.n	8009b16 <__swbuf_r+0x42>
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f956 	bl	8009dc0 <_fflush_r>
 8009b14:	bb28      	cbnz	r0, 8009b62 <__swbuf_r+0x8e>
 8009b16:	68a3      	ldr	r3, [r4, #8]
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	60a3      	str	r3, [r4, #8]
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	6022      	str	r2, [r4, #0]
 8009b22:	701e      	strb	r6, [r3, #0]
 8009b24:	6963      	ldr	r3, [r4, #20]
 8009b26:	3001      	adds	r0, #1
 8009b28:	4283      	cmp	r3, r0
 8009b2a:	d004      	beq.n	8009b36 <__swbuf_r+0x62>
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	07db      	lsls	r3, r3, #31
 8009b30:	d519      	bpl.n	8009b66 <__swbuf_r+0x92>
 8009b32:	2e0a      	cmp	r6, #10
 8009b34:	d117      	bne.n	8009b66 <__swbuf_r+0x92>
 8009b36:	4621      	mov	r1, r4
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f000 f941 	bl	8009dc0 <_fflush_r>
 8009b3e:	b190      	cbz	r0, 8009b66 <__swbuf_r+0x92>
 8009b40:	e00f      	b.n	8009b62 <__swbuf_r+0x8e>
 8009b42:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <__swbuf_r+0x9c>)
 8009b44:	429c      	cmp	r4, r3
 8009b46:	d101      	bne.n	8009b4c <__swbuf_r+0x78>
 8009b48:	68ac      	ldr	r4, [r5, #8]
 8009b4a:	e7d0      	b.n	8009aee <__swbuf_r+0x1a>
 8009b4c:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <__swbuf_r+0xa0>)
 8009b4e:	429c      	cmp	r4, r3
 8009b50:	bf08      	it	eq
 8009b52:	68ec      	ldreq	r4, [r5, #12]
 8009b54:	e7cb      	b.n	8009aee <__swbuf_r+0x1a>
 8009b56:	4621      	mov	r1, r4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f000 f82d 	bl	8009bb8 <__swsetup_r>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d0cc      	beq.n	8009afc <__swbuf_r+0x28>
 8009b62:	f04f 37ff 	mov.w	r7, #4294967295
 8009b66:	4638      	mov	r0, r7
 8009b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	0800a0a8 	.word	0x0800a0a8
 8009b70:	0800a0c8 	.word	0x0800a0c8
 8009b74:	0800a088 	.word	0x0800a088

08009b78 <__ascii_wctomb>:
 8009b78:	b149      	cbz	r1, 8009b8e <__ascii_wctomb+0x16>
 8009b7a:	2aff      	cmp	r2, #255	; 0xff
 8009b7c:	bf85      	ittet	hi
 8009b7e:	238a      	movhi	r3, #138	; 0x8a
 8009b80:	6003      	strhi	r3, [r0, #0]
 8009b82:	700a      	strbls	r2, [r1, #0]
 8009b84:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b88:	bf98      	it	ls
 8009b8a:	2001      	movls	r0, #1
 8009b8c:	4770      	bx	lr
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4770      	bx	lr
	...

08009b94 <_write_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4c07      	ldr	r4, [pc, #28]	; (8009bb4 <_write_r+0x20>)
 8009b98:	4605      	mov	r5, r0
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	6022      	str	r2, [r4, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f7f8 f949 	bl	8001e3a <_write>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_write_r+0x1e>
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_write_r+0x1e>
 8009bb0:	602b      	str	r3, [r5, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	2000c2cc 	.word	0x2000c2cc

08009bb8 <__swsetup_r>:
 8009bb8:	4b32      	ldr	r3, [pc, #200]	; (8009c84 <__swsetup_r+0xcc>)
 8009bba:	b570      	push	{r4, r5, r6, lr}
 8009bbc:	681d      	ldr	r5, [r3, #0]
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	b125      	cbz	r5, 8009bce <__swsetup_r+0x16>
 8009bc4:	69ab      	ldr	r3, [r5, #24]
 8009bc6:	b913      	cbnz	r3, 8009bce <__swsetup_r+0x16>
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f7ff fb37 	bl	800923c <__sinit>
 8009bce:	4b2e      	ldr	r3, [pc, #184]	; (8009c88 <__swsetup_r+0xd0>)
 8009bd0:	429c      	cmp	r4, r3
 8009bd2:	d10f      	bne.n	8009bf4 <__swsetup_r+0x3c>
 8009bd4:	686c      	ldr	r4, [r5, #4]
 8009bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	0715      	lsls	r5, r2, #28
 8009bde:	d42c      	bmi.n	8009c3a <__swsetup_r+0x82>
 8009be0:	06d0      	lsls	r0, r2, #27
 8009be2:	d411      	bmi.n	8009c08 <__swsetup_r+0x50>
 8009be4:	2209      	movs	r2, #9
 8009be6:	6032      	str	r2, [r6, #0]
 8009be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bec:	81a3      	strh	r3, [r4, #12]
 8009bee:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf2:	e03e      	b.n	8009c72 <__swsetup_r+0xba>
 8009bf4:	4b25      	ldr	r3, [pc, #148]	; (8009c8c <__swsetup_r+0xd4>)
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	d101      	bne.n	8009bfe <__swsetup_r+0x46>
 8009bfa:	68ac      	ldr	r4, [r5, #8]
 8009bfc:	e7eb      	b.n	8009bd6 <__swsetup_r+0x1e>
 8009bfe:	4b24      	ldr	r3, [pc, #144]	; (8009c90 <__swsetup_r+0xd8>)
 8009c00:	429c      	cmp	r4, r3
 8009c02:	bf08      	it	eq
 8009c04:	68ec      	ldreq	r4, [r5, #12]
 8009c06:	e7e6      	b.n	8009bd6 <__swsetup_r+0x1e>
 8009c08:	0751      	lsls	r1, r2, #29
 8009c0a:	d512      	bpl.n	8009c32 <__swsetup_r+0x7a>
 8009c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c0e:	b141      	cbz	r1, 8009c22 <__swsetup_r+0x6a>
 8009c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c14:	4299      	cmp	r1, r3
 8009c16:	d002      	beq.n	8009c1e <__swsetup_r+0x66>
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f000 f973 	bl	8009f04 <_free_r>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	6363      	str	r3, [r4, #52]	; 0x34
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c28:	81a3      	strh	r3, [r4, #12]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	6063      	str	r3, [r4, #4]
 8009c2e:	6923      	ldr	r3, [r4, #16]
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f043 0308 	orr.w	r3, r3, #8
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	6923      	ldr	r3, [r4, #16]
 8009c3c:	b94b      	cbnz	r3, 8009c52 <__swsetup_r+0x9a>
 8009c3e:	89a3      	ldrh	r3, [r4, #12]
 8009c40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c48:	d003      	beq.n	8009c52 <__swsetup_r+0x9a>
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f000 f917 	bl	8009e80 <__smakebuf_r>
 8009c52:	89a2      	ldrh	r2, [r4, #12]
 8009c54:	f012 0301 	ands.w	r3, r2, #1
 8009c58:	d00c      	beq.n	8009c74 <__swsetup_r+0xbc>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60a3      	str	r3, [r4, #8]
 8009c5e:	6963      	ldr	r3, [r4, #20]
 8009c60:	425b      	negs	r3, r3
 8009c62:	61a3      	str	r3, [r4, #24]
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	b953      	cbnz	r3, 8009c7e <__swsetup_r+0xc6>
 8009c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009c70:	d1ba      	bne.n	8009be8 <__swsetup_r+0x30>
 8009c72:	bd70      	pop	{r4, r5, r6, pc}
 8009c74:	0792      	lsls	r2, r2, #30
 8009c76:	bf58      	it	pl
 8009c78:	6963      	ldrpl	r3, [r4, #20]
 8009c7a:	60a3      	str	r3, [r4, #8]
 8009c7c:	e7f2      	b.n	8009c64 <__swsetup_r+0xac>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e7f7      	b.n	8009c72 <__swsetup_r+0xba>
 8009c82:	bf00      	nop
 8009c84:	20000020 	.word	0x20000020
 8009c88:	0800a0a8 	.word	0x0800a0a8
 8009c8c:	0800a0c8 	.word	0x0800a0c8
 8009c90:	0800a088 	.word	0x0800a088

08009c94 <_close_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	4c06      	ldr	r4, [pc, #24]	; (8009cb0 <_close_r+0x1c>)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	f7f8 f8e7 	bl	8001e72 <_close>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d102      	bne.n	8009cae <_close_r+0x1a>
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	b103      	cbz	r3, 8009cae <_close_r+0x1a>
 8009cac:	602b      	str	r3, [r5, #0]
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	2000c2cc 	.word	0x2000c2cc

08009cb4 <__sflush_r>:
 8009cb4:	898a      	ldrh	r2, [r1, #12]
 8009cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cba:	4605      	mov	r5, r0
 8009cbc:	0710      	lsls	r0, r2, #28
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	d458      	bmi.n	8009d74 <__sflush_r+0xc0>
 8009cc2:	684b      	ldr	r3, [r1, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dc05      	bgt.n	8009cd4 <__sflush_r+0x20>
 8009cc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dc02      	bgt.n	8009cd4 <__sflush_r+0x20>
 8009cce:	2000      	movs	r0, #0
 8009cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cd6:	2e00      	cmp	r6, #0
 8009cd8:	d0f9      	beq.n	8009cce <__sflush_r+0x1a>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ce0:	682f      	ldr	r7, [r5, #0]
 8009ce2:	6a21      	ldr	r1, [r4, #32]
 8009ce4:	602b      	str	r3, [r5, #0]
 8009ce6:	d032      	beq.n	8009d4e <__sflush_r+0x9a>
 8009ce8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	075a      	lsls	r2, r3, #29
 8009cee:	d505      	bpl.n	8009cfc <__sflush_r+0x48>
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	1ac0      	subs	r0, r0, r3
 8009cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cf6:	b10b      	cbz	r3, 8009cfc <__sflush_r+0x48>
 8009cf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cfa:	1ac0      	subs	r0, r0, r3
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4602      	mov	r2, r0
 8009d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d02:	6a21      	ldr	r1, [r4, #32]
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b0      	blx	r6
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	89a3      	ldrh	r3, [r4, #12]
 8009d0c:	d106      	bne.n	8009d1c <__sflush_r+0x68>
 8009d0e:	6829      	ldr	r1, [r5, #0]
 8009d10:	291d      	cmp	r1, #29
 8009d12:	d848      	bhi.n	8009da6 <__sflush_r+0xf2>
 8009d14:	4a29      	ldr	r2, [pc, #164]	; (8009dbc <__sflush_r+0x108>)
 8009d16:	40ca      	lsrs	r2, r1
 8009d18:	07d6      	lsls	r6, r2, #31
 8009d1a:	d544      	bpl.n	8009da6 <__sflush_r+0xf2>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	6062      	str	r2, [r4, #4]
 8009d20:	04d9      	lsls	r1, r3, #19
 8009d22:	6922      	ldr	r2, [r4, #16]
 8009d24:	6022      	str	r2, [r4, #0]
 8009d26:	d504      	bpl.n	8009d32 <__sflush_r+0x7e>
 8009d28:	1c42      	adds	r2, r0, #1
 8009d2a:	d101      	bne.n	8009d30 <__sflush_r+0x7c>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b903      	cbnz	r3, 8009d32 <__sflush_r+0x7e>
 8009d30:	6560      	str	r0, [r4, #84]	; 0x54
 8009d32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d34:	602f      	str	r7, [r5, #0]
 8009d36:	2900      	cmp	r1, #0
 8009d38:	d0c9      	beq.n	8009cce <__sflush_r+0x1a>
 8009d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d3e:	4299      	cmp	r1, r3
 8009d40:	d002      	beq.n	8009d48 <__sflush_r+0x94>
 8009d42:	4628      	mov	r0, r5
 8009d44:	f000 f8de 	bl	8009f04 <_free_r>
 8009d48:	2000      	movs	r0, #0
 8009d4a:	6360      	str	r0, [r4, #52]	; 0x34
 8009d4c:	e7c0      	b.n	8009cd0 <__sflush_r+0x1c>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4628      	mov	r0, r5
 8009d52:	47b0      	blx	r6
 8009d54:	1c41      	adds	r1, r0, #1
 8009d56:	d1c8      	bne.n	8009cea <__sflush_r+0x36>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0c5      	beq.n	8009cea <__sflush_r+0x36>
 8009d5e:	2b1d      	cmp	r3, #29
 8009d60:	d001      	beq.n	8009d66 <__sflush_r+0xb2>
 8009d62:	2b16      	cmp	r3, #22
 8009d64:	d101      	bne.n	8009d6a <__sflush_r+0xb6>
 8009d66:	602f      	str	r7, [r5, #0]
 8009d68:	e7b1      	b.n	8009cce <__sflush_r+0x1a>
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	e7ad      	b.n	8009cd0 <__sflush_r+0x1c>
 8009d74:	690f      	ldr	r7, [r1, #16]
 8009d76:	2f00      	cmp	r7, #0
 8009d78:	d0a9      	beq.n	8009cce <__sflush_r+0x1a>
 8009d7a:	0793      	lsls	r3, r2, #30
 8009d7c:	680e      	ldr	r6, [r1, #0]
 8009d7e:	bf08      	it	eq
 8009d80:	694b      	ldreq	r3, [r1, #20]
 8009d82:	600f      	str	r7, [r1, #0]
 8009d84:	bf18      	it	ne
 8009d86:	2300      	movne	r3, #0
 8009d88:	eba6 0807 	sub.w	r8, r6, r7
 8009d8c:	608b      	str	r3, [r1, #8]
 8009d8e:	f1b8 0f00 	cmp.w	r8, #0
 8009d92:	dd9c      	ble.n	8009cce <__sflush_r+0x1a>
 8009d94:	4643      	mov	r3, r8
 8009d96:	463a      	mov	r2, r7
 8009d98:	6a21      	ldr	r1, [r4, #32]
 8009d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b0      	blx	r6
 8009da0:	2800      	cmp	r0, #0
 8009da2:	dc06      	bgt.n	8009db2 <__sflush_r+0xfe>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
 8009db0:	e78e      	b.n	8009cd0 <__sflush_r+0x1c>
 8009db2:	4407      	add	r7, r0
 8009db4:	eba8 0800 	sub.w	r8, r8, r0
 8009db8:	e7e9      	b.n	8009d8e <__sflush_r+0xda>
 8009dba:	bf00      	nop
 8009dbc:	20400001 	.word	0x20400001

08009dc0 <_fflush_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	690b      	ldr	r3, [r1, #16]
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	b1db      	cbz	r3, 8009e02 <_fflush_r+0x42>
 8009dca:	b118      	cbz	r0, 8009dd4 <_fflush_r+0x14>
 8009dcc:	6983      	ldr	r3, [r0, #24]
 8009dce:	b90b      	cbnz	r3, 8009dd4 <_fflush_r+0x14>
 8009dd0:	f7ff fa34 	bl	800923c <__sinit>
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <_fflush_r+0x48>)
 8009dd6:	429c      	cmp	r4, r3
 8009dd8:	d109      	bne.n	8009dee <_fflush_r+0x2e>
 8009dda:	686c      	ldr	r4, [r5, #4]
 8009ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de0:	b17b      	cbz	r3, 8009e02 <_fflush_r+0x42>
 8009de2:	4621      	mov	r1, r4
 8009de4:	4628      	mov	r0, r5
 8009de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dea:	f7ff bf63 	b.w	8009cb4 <__sflush_r>
 8009dee:	4b07      	ldr	r3, [pc, #28]	; (8009e0c <_fflush_r+0x4c>)
 8009df0:	429c      	cmp	r4, r3
 8009df2:	d101      	bne.n	8009df8 <_fflush_r+0x38>
 8009df4:	68ac      	ldr	r4, [r5, #8]
 8009df6:	e7f1      	b.n	8009ddc <_fflush_r+0x1c>
 8009df8:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <_fflush_r+0x50>)
 8009dfa:	429c      	cmp	r4, r3
 8009dfc:	bf08      	it	eq
 8009dfe:	68ec      	ldreq	r4, [r5, #12]
 8009e00:	e7ec      	b.n	8009ddc <_fflush_r+0x1c>
 8009e02:	2000      	movs	r0, #0
 8009e04:	bd38      	pop	{r3, r4, r5, pc}
 8009e06:	bf00      	nop
 8009e08:	0800a0a8 	.word	0x0800a0a8
 8009e0c:	0800a0c8 	.word	0x0800a0c8
 8009e10:	0800a088 	.word	0x0800a088

08009e14 <_lseek_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4c07      	ldr	r4, [pc, #28]	; (8009e34 <_lseek_r+0x20>)
 8009e18:	4605      	mov	r5, r0
 8009e1a:	4608      	mov	r0, r1
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	2200      	movs	r2, #0
 8009e20:	6022      	str	r2, [r4, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f7f8 f84c 	bl	8001ec0 <_lseek>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d102      	bne.n	8009e32 <_lseek_r+0x1e>
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	b103      	cbz	r3, 8009e32 <_lseek_r+0x1e>
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	bd38      	pop	{r3, r4, r5, pc}
 8009e34:	2000c2cc 	.word	0x2000c2cc

08009e38 <__swhatbuf_r>:
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	460e      	mov	r6, r1
 8009e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e40:	2900      	cmp	r1, #0
 8009e42:	b096      	sub	sp, #88	; 0x58
 8009e44:	4614      	mov	r4, r2
 8009e46:	461d      	mov	r5, r3
 8009e48:	da07      	bge.n	8009e5a <__swhatbuf_r+0x22>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	602b      	str	r3, [r5, #0]
 8009e4e:	89b3      	ldrh	r3, [r6, #12]
 8009e50:	061a      	lsls	r2, r3, #24
 8009e52:	d410      	bmi.n	8009e76 <__swhatbuf_r+0x3e>
 8009e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e58:	e00e      	b.n	8009e78 <__swhatbuf_r+0x40>
 8009e5a:	466a      	mov	r2, sp
 8009e5c:	f000 f8b2 	bl	8009fc4 <_fstat_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	dbf2      	blt.n	8009e4a <__swhatbuf_r+0x12>
 8009e64:	9a01      	ldr	r2, [sp, #4]
 8009e66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e6e:	425a      	negs	r2, r3
 8009e70:	415a      	adcs	r2, r3
 8009e72:	602a      	str	r2, [r5, #0]
 8009e74:	e7ee      	b.n	8009e54 <__swhatbuf_r+0x1c>
 8009e76:	2340      	movs	r3, #64	; 0x40
 8009e78:	2000      	movs	r0, #0
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	b016      	add	sp, #88	; 0x58
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}

08009e80 <__smakebuf_r>:
 8009e80:	898b      	ldrh	r3, [r1, #12]
 8009e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e84:	079d      	lsls	r5, r3, #30
 8009e86:	4606      	mov	r6, r0
 8009e88:	460c      	mov	r4, r1
 8009e8a:	d507      	bpl.n	8009e9c <__smakebuf_r+0x1c>
 8009e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	6123      	str	r3, [r4, #16]
 8009e94:	2301      	movs	r3, #1
 8009e96:	6163      	str	r3, [r4, #20]
 8009e98:	b002      	add	sp, #8
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	ab01      	add	r3, sp, #4
 8009e9e:	466a      	mov	r2, sp
 8009ea0:	f7ff ffca 	bl	8009e38 <__swhatbuf_r>
 8009ea4:	9900      	ldr	r1, [sp, #0]
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f7ff fa67 	bl	800937c <_malloc_r>
 8009eae:	b948      	cbnz	r0, 8009ec4 <__smakebuf_r+0x44>
 8009eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb4:	059a      	lsls	r2, r3, #22
 8009eb6:	d4ef      	bmi.n	8009e98 <__smakebuf_r+0x18>
 8009eb8:	f023 0303 	bic.w	r3, r3, #3
 8009ebc:	f043 0302 	orr.w	r3, r3, #2
 8009ec0:	81a3      	strh	r3, [r4, #12]
 8009ec2:	e7e3      	b.n	8009e8c <__smakebuf_r+0xc>
 8009ec4:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <__smakebuf_r+0x7c>)
 8009ec6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	6020      	str	r0, [r4, #0]
 8009ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed0:	81a3      	strh	r3, [r4, #12]
 8009ed2:	9b00      	ldr	r3, [sp, #0]
 8009ed4:	6163      	str	r3, [r4, #20]
 8009ed6:	9b01      	ldr	r3, [sp, #4]
 8009ed8:	6120      	str	r0, [r4, #16]
 8009eda:	b15b      	cbz	r3, 8009ef4 <__smakebuf_r+0x74>
 8009edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f000 f881 	bl	8009fe8 <_isatty_r>
 8009ee6:	b128      	cbz	r0, 8009ef4 <__smakebuf_r+0x74>
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	f023 0303 	bic.w	r3, r3, #3
 8009eee:	f043 0301 	orr.w	r3, r3, #1
 8009ef2:	81a3      	strh	r3, [r4, #12]
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	431d      	orrs	r5, r3
 8009ef8:	81a5      	strh	r5, [r4, #12]
 8009efa:	e7cd      	b.n	8009e98 <__smakebuf_r+0x18>
 8009efc:	08009205 	.word	0x08009205

08009f00 <__malloc_lock>:
 8009f00:	4770      	bx	lr

08009f02 <__malloc_unlock>:
 8009f02:	4770      	bx	lr

08009f04 <_free_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4605      	mov	r5, r0
 8009f08:	2900      	cmp	r1, #0
 8009f0a:	d045      	beq.n	8009f98 <_free_r+0x94>
 8009f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f10:	1f0c      	subs	r4, r1, #4
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	bfb8      	it	lt
 8009f16:	18e4      	addlt	r4, r4, r3
 8009f18:	f7ff fff2 	bl	8009f00 <__malloc_lock>
 8009f1c:	4a1f      	ldr	r2, [pc, #124]	; (8009f9c <_free_r+0x98>)
 8009f1e:	6813      	ldr	r3, [r2, #0]
 8009f20:	4610      	mov	r0, r2
 8009f22:	b933      	cbnz	r3, 8009f32 <_free_r+0x2e>
 8009f24:	6063      	str	r3, [r4, #4]
 8009f26:	6014      	str	r4, [r2, #0]
 8009f28:	4628      	mov	r0, r5
 8009f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f2e:	f7ff bfe8 	b.w	8009f02 <__malloc_unlock>
 8009f32:	42a3      	cmp	r3, r4
 8009f34:	d90c      	bls.n	8009f50 <_free_r+0x4c>
 8009f36:	6821      	ldr	r1, [r4, #0]
 8009f38:	1862      	adds	r2, r4, r1
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	bf04      	itt	eq
 8009f3e:	681a      	ldreq	r2, [r3, #0]
 8009f40:	685b      	ldreq	r3, [r3, #4]
 8009f42:	6063      	str	r3, [r4, #4]
 8009f44:	bf04      	itt	eq
 8009f46:	1852      	addeq	r2, r2, r1
 8009f48:	6022      	streq	r2, [r4, #0]
 8009f4a:	6004      	str	r4, [r0, #0]
 8009f4c:	e7ec      	b.n	8009f28 <_free_r+0x24>
 8009f4e:	4613      	mov	r3, r2
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	b10a      	cbz	r2, 8009f58 <_free_r+0x54>
 8009f54:	42a2      	cmp	r2, r4
 8009f56:	d9fa      	bls.n	8009f4e <_free_r+0x4a>
 8009f58:	6819      	ldr	r1, [r3, #0]
 8009f5a:	1858      	adds	r0, r3, r1
 8009f5c:	42a0      	cmp	r0, r4
 8009f5e:	d10b      	bne.n	8009f78 <_free_r+0x74>
 8009f60:	6820      	ldr	r0, [r4, #0]
 8009f62:	4401      	add	r1, r0
 8009f64:	1858      	adds	r0, r3, r1
 8009f66:	4282      	cmp	r2, r0
 8009f68:	6019      	str	r1, [r3, #0]
 8009f6a:	d1dd      	bne.n	8009f28 <_free_r+0x24>
 8009f6c:	6810      	ldr	r0, [r2, #0]
 8009f6e:	6852      	ldr	r2, [r2, #4]
 8009f70:	605a      	str	r2, [r3, #4]
 8009f72:	4401      	add	r1, r0
 8009f74:	6019      	str	r1, [r3, #0]
 8009f76:	e7d7      	b.n	8009f28 <_free_r+0x24>
 8009f78:	d902      	bls.n	8009f80 <_free_r+0x7c>
 8009f7a:	230c      	movs	r3, #12
 8009f7c:	602b      	str	r3, [r5, #0]
 8009f7e:	e7d3      	b.n	8009f28 <_free_r+0x24>
 8009f80:	6820      	ldr	r0, [r4, #0]
 8009f82:	1821      	adds	r1, r4, r0
 8009f84:	428a      	cmp	r2, r1
 8009f86:	bf04      	itt	eq
 8009f88:	6811      	ldreq	r1, [r2, #0]
 8009f8a:	6852      	ldreq	r2, [r2, #4]
 8009f8c:	6062      	str	r2, [r4, #4]
 8009f8e:	bf04      	itt	eq
 8009f90:	1809      	addeq	r1, r1, r0
 8009f92:	6021      	streq	r1, [r4, #0]
 8009f94:	605c      	str	r4, [r3, #4]
 8009f96:	e7c7      	b.n	8009f28 <_free_r+0x24>
 8009f98:	bd38      	pop	{r3, r4, r5, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20000248 	.word	0x20000248

08009fa0 <_read_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4c07      	ldr	r4, [pc, #28]	; (8009fc0 <_read_r+0x20>)
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	4608      	mov	r0, r1
 8009fa8:	4611      	mov	r1, r2
 8009faa:	2200      	movs	r2, #0
 8009fac:	6022      	str	r2, [r4, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f7f7 ff26 	bl	8001e00 <_read>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	d102      	bne.n	8009fbe <_read_r+0x1e>
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	b103      	cbz	r3, 8009fbe <_read_r+0x1e>
 8009fbc:	602b      	str	r3, [r5, #0]
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	2000c2cc 	.word	0x2000c2cc

08009fc4 <_fstat_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4c07      	ldr	r4, [pc, #28]	; (8009fe4 <_fstat_r+0x20>)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4605      	mov	r5, r0
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	f7f7 ff5a 	bl	8001e8a <_fstat>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d102      	bne.n	8009fe0 <_fstat_r+0x1c>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	b103      	cbz	r3, 8009fe0 <_fstat_r+0x1c>
 8009fde:	602b      	str	r3, [r5, #0]
 8009fe0:	bd38      	pop	{r3, r4, r5, pc}
 8009fe2:	bf00      	nop
 8009fe4:	2000c2cc 	.word	0x2000c2cc

08009fe8 <_isatty_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	4c06      	ldr	r4, [pc, #24]	; (800a004 <_isatty_r+0x1c>)
 8009fec:	2300      	movs	r3, #0
 8009fee:	4605      	mov	r5, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	f7f7 ff59 	bl	8001eaa <_isatty>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_isatty_r+0x1a>
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_isatty_r+0x1a>
 800a000:	602b      	str	r3, [r5, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	2000c2cc 	.word	0x2000c2cc

0800a008 <_init>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	bf00      	nop
 800a00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00e:	bc08      	pop	{r3}
 800a010:	469e      	mov	lr, r3
 800a012:	4770      	bx	lr

0800a014 <_fini>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	bf00      	nop
 800a018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01a:	bc08      	pop	{r3}
 800a01c:	469e      	mov	lr, r3
 800a01e:	4770      	bx	lr
